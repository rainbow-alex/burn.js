lex1.burn:
	?
lex2.burn:
	^

string1.burn:
	"
string_x1.burn:
	"\x"
string_x2.burn:
	"\x..."
string_x3.burn:
	"\xA"
string_x4.burn:
	"\xA..."
string_x5.burn:
	"\xGG"
string_u1.burn:
	"\u"
string_u2.burn:
	"\u..."
string_u3.burn:
	"\uAB"
string_u4.burn:
	"\uAB.."
string_u5.burn:
	"\uGAGA"
string_U1.burn:
	"\U"
string_U2.burn:
	"\U..."
string_U3.burn:
	"\UABCDE"
string_U4.burn:
	"\UAB.."
string_U5.burn:
	"\UGAGABABA"

var1.burn:
	let $
var2.burn:
	let $0
var3.burn:
	let $:
var4.burn:
	let $:foo
var5.burn:
	let $foo:
var6.burn:
	let $foo::bar

include1.burn:
	include

break1.burn:
	break
break2.burn:
	break #loop
break3.burn:
	while true {
		break #loop
	}

continue1.burn:
	continue
continue2.burn:
	continue #loop
continue3.burn:
	continue true {
		break #loop
	}

catch1.burn:
	try {
	} catch {
	}
catch2.burn:
	try {
	} catch TypeError {
	}

while1.burn:
	while
while2.burn:
	while {
	}
while3.burn:
	#loop
	while true {
		#loop
		while true {
		}
	}

// all scripts must fail to pass
$ for f in `ls`; do if $BURN $f 2> /dev/null; then >&2 echo "$f passed"; exit 1; fi done
