// generated by `etc/generate_operator_test.py is_not`

is_not_result_1.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { nothing is not nothing }, TypeError )
	
	test.assert_throws( function() { nothing is not true }, TypeError )
	
	test.assert_throws( function() { nothing is not false }, TypeError )
	
	test.assert_throws( function() { nothing is not 0 }, TypeError )
	
	test.assert_throws( function() { nothing is not 2 }, TypeError )
	
	test.assert_throws( function() { nothing is not -2 }, TypeError )
	
	test.assert_throws( function() { nothing is not 0.0 }, TypeError )
	
	test.assert_throws( function() { nothing is not 2.0 }, TypeError )
	
	test.assert_throws( function() { nothing is not -0.5 }, TypeError )
	
	test.assert_throws( function() { nothing is not "" }, TypeError )
	
	test.assert_throws( function() { nothing is not "apple" }, TypeError )
	
	test.assert_throws( function() { nothing is not "banana" }, TypeError )
	
	test.assert_throws( function() { nothing is not repr }, TypeError )
	
	test.assert_throws( function() { nothing is not function(){} }, TypeError )
	
	let $v14 = nothing is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = nothing is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { nothing is not types }, TypeError )

$ $BURN is_not_result_1.burn

is_not_result_2.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { true is not nothing }, TypeError )
	
	test.assert_throws( function() { true is not true }, TypeError )
	
	test.assert_throws( function() { true is not false }, TypeError )
	
	test.assert_throws( function() { true is not 0 }, TypeError )
	
	test.assert_throws( function() { true is not 2 }, TypeError )
	
	test.assert_throws( function() { true is not -2 }, TypeError )
	
	test.assert_throws( function() { true is not 0.0 }, TypeError )
	
	test.assert_throws( function() { true is not 2.0 }, TypeError )
	
	test.assert_throws( function() { true is not -0.5 }, TypeError )
	
	test.assert_throws( function() { true is not "" }, TypeError )
	
	test.assert_throws( function() { true is not "apple" }, TypeError )
	
	test.assert_throws( function() { true is not "banana" }, TypeError )
	
	test.assert_throws( function() { true is not repr }, TypeError )
	
	test.assert_throws( function() { true is not function(){} }, TypeError )
	
	let $v14 = true is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = true is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { true is not types }, TypeError )

$ $BURN is_not_result_2.burn

is_not_result_3.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { false is not nothing }, TypeError )
	
	test.assert_throws( function() { false is not true }, TypeError )
	
	test.assert_throws( function() { false is not false }, TypeError )
	
	test.assert_throws( function() { false is not 0 }, TypeError )
	
	test.assert_throws( function() { false is not 2 }, TypeError )
	
	test.assert_throws( function() { false is not -2 }, TypeError )
	
	test.assert_throws( function() { false is not 0.0 }, TypeError )
	
	test.assert_throws( function() { false is not 2.0 }, TypeError )
	
	test.assert_throws( function() { false is not -0.5 }, TypeError )
	
	test.assert_throws( function() { false is not "" }, TypeError )
	
	test.assert_throws( function() { false is not "apple" }, TypeError )
	
	test.assert_throws( function() { false is not "banana" }, TypeError )
	
	test.assert_throws( function() { false is not repr }, TypeError )
	
	test.assert_throws( function() { false is not function(){} }, TypeError )
	
	let $v14 = false is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = false is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { false is not types }, TypeError )

$ $BURN is_not_result_3.burn

is_not_result_4.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 0 is not nothing }, TypeError )
	
	test.assert_throws( function() { 0 is not true }, TypeError )
	
	test.assert_throws( function() { 0 is not false }, TypeError )
	
	test.assert_throws( function() { 0 is not 0 }, TypeError )
	
	test.assert_throws( function() { 0 is not 2 }, TypeError )
	
	test.assert_throws( function() { 0 is not -2 }, TypeError )
	
	test.assert_throws( function() { 0 is not 0.0 }, TypeError )
	
	test.assert_throws( function() { 0 is not 2.0 }, TypeError )
	
	test.assert_throws( function() { 0 is not -0.5 }, TypeError )
	
	test.assert_throws( function() { 0 is not "" }, TypeError )
	
	test.assert_throws( function() { 0 is not "apple" }, TypeError )
	
	test.assert_throws( function() { 0 is not "banana" }, TypeError )
	
	test.assert_throws( function() { 0 is not repr }, TypeError )
	
	test.assert_throws( function() { 0 is not function(){} }, TypeError )
	
	let $v14 = 0 is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == false )
	
	let $v15 = 0 is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { 0 is not types }, TypeError )

$ $BURN is_not_result_4.burn

is_not_result_5.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 2 is not nothing }, TypeError )
	
	test.assert_throws( function() { 2 is not true }, TypeError )
	
	test.assert_throws( function() { 2 is not false }, TypeError )
	
	test.assert_throws( function() { 2 is not 0 }, TypeError )
	
	test.assert_throws( function() { 2 is not 2 }, TypeError )
	
	test.assert_throws( function() { 2 is not -2 }, TypeError )
	
	test.assert_throws( function() { 2 is not 0.0 }, TypeError )
	
	test.assert_throws( function() { 2 is not 2.0 }, TypeError )
	
	test.assert_throws( function() { 2 is not -0.5 }, TypeError )
	
	test.assert_throws( function() { 2 is not "" }, TypeError )
	
	test.assert_throws( function() { 2 is not "apple" }, TypeError )
	
	test.assert_throws( function() { 2 is not "banana" }, TypeError )
	
	test.assert_throws( function() { 2 is not repr }, TypeError )
	
	test.assert_throws( function() { 2 is not function(){} }, TypeError )
	
	let $v14 = 2 is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == false )
	
	let $v15 = 2 is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { 2 is not types }, TypeError )

$ $BURN is_not_result_5.burn

is_not_result_6.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { -2 is not nothing }, TypeError )
	
	test.assert_throws( function() { -2 is not true }, TypeError )
	
	test.assert_throws( function() { -2 is not false }, TypeError )
	
	test.assert_throws( function() { -2 is not 0 }, TypeError )
	
	test.assert_throws( function() { -2 is not 2 }, TypeError )
	
	test.assert_throws( function() { -2 is not -2 }, TypeError )
	
	test.assert_throws( function() { -2 is not 0.0 }, TypeError )
	
	test.assert_throws( function() { -2 is not 2.0 }, TypeError )
	
	test.assert_throws( function() { -2 is not -0.5 }, TypeError )
	
	test.assert_throws( function() { -2 is not "" }, TypeError )
	
	test.assert_throws( function() { -2 is not "apple" }, TypeError )
	
	test.assert_throws( function() { -2 is not "banana" }, TypeError )
	
	test.assert_throws( function() { -2 is not repr }, TypeError )
	
	test.assert_throws( function() { -2 is not function(){} }, TypeError )
	
	let $v14 = -2 is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == false )
	
	let $v15 = -2 is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { -2 is not types }, TypeError )

$ $BURN is_not_result_6.burn

is_not_result_7.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 0.0 is not nothing }, TypeError )
	
	test.assert_throws( function() { 0.0 is not true }, TypeError )
	
	test.assert_throws( function() { 0.0 is not false }, TypeError )
	
	test.assert_throws( function() { 0.0 is not 0 }, TypeError )
	
	test.assert_throws( function() { 0.0 is not 2 }, TypeError )
	
	test.assert_throws( function() { 0.0 is not -2 }, TypeError )
	
	test.assert_throws( function() { 0.0 is not 0.0 }, TypeError )
	
	test.assert_throws( function() { 0.0 is not 2.0 }, TypeError )
	
	test.assert_throws( function() { 0.0 is not -0.5 }, TypeError )
	
	test.assert_throws( function() { 0.0 is not "" }, TypeError )
	
	test.assert_throws( function() { 0.0 is not "apple" }, TypeError )
	
	test.assert_throws( function() { 0.0 is not "banana" }, TypeError )
	
	test.assert_throws( function() { 0.0 is not repr }, TypeError )
	
	test.assert_throws( function() { 0.0 is not function(){} }, TypeError )
	
	let $v14 = 0.0 is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = 0.0 is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { 0.0 is not types }, TypeError )

$ $BURN is_not_result_7.burn

is_not_result_8.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 2.0 is not nothing }, TypeError )
	
	test.assert_throws( function() { 2.0 is not true }, TypeError )
	
	test.assert_throws( function() { 2.0 is not false }, TypeError )
	
	test.assert_throws( function() { 2.0 is not 0 }, TypeError )
	
	test.assert_throws( function() { 2.0 is not 2 }, TypeError )
	
	test.assert_throws( function() { 2.0 is not -2 }, TypeError )
	
	test.assert_throws( function() { 2.0 is not 0.0 }, TypeError )
	
	test.assert_throws( function() { 2.0 is not 2.0 }, TypeError )
	
	test.assert_throws( function() { 2.0 is not -0.5 }, TypeError )
	
	test.assert_throws( function() { 2.0 is not "" }, TypeError )
	
	test.assert_throws( function() { 2.0 is not "apple" }, TypeError )
	
	test.assert_throws( function() { 2.0 is not "banana" }, TypeError )
	
	test.assert_throws( function() { 2.0 is not repr }, TypeError )
	
	test.assert_throws( function() { 2.0 is not function(){} }, TypeError )
	
	let $v14 = 2.0 is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = 2.0 is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { 2.0 is not types }, TypeError )

$ $BURN is_not_result_8.burn

is_not_result_9.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { -0.5 is not nothing }, TypeError )
	
	test.assert_throws( function() { -0.5 is not true }, TypeError )
	
	test.assert_throws( function() { -0.5 is not false }, TypeError )
	
	test.assert_throws( function() { -0.5 is not 0 }, TypeError )
	
	test.assert_throws( function() { -0.5 is not 2 }, TypeError )
	
	test.assert_throws( function() { -0.5 is not -2 }, TypeError )
	
	test.assert_throws( function() { -0.5 is not 0.0 }, TypeError )
	
	test.assert_throws( function() { -0.5 is not 2.0 }, TypeError )
	
	test.assert_throws( function() { -0.5 is not -0.5 }, TypeError )
	
	test.assert_throws( function() { -0.5 is not "" }, TypeError )
	
	test.assert_throws( function() { -0.5 is not "apple" }, TypeError )
	
	test.assert_throws( function() { -0.5 is not "banana" }, TypeError )
	
	test.assert_throws( function() { -0.5 is not repr }, TypeError )
	
	test.assert_throws( function() { -0.5 is not function(){} }, TypeError )
	
	let $v14 = -0.5 is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = -0.5 is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { -0.5 is not types }, TypeError )

$ $BURN is_not_result_9.burn

is_not_result_10.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { "" is not nothing }, TypeError )
	
	test.assert_throws( function() { "" is not true }, TypeError )
	
	test.assert_throws( function() { "" is not false }, TypeError )
	
	test.assert_throws( function() { "" is not 0 }, TypeError )
	
	test.assert_throws( function() { "" is not 2 }, TypeError )
	
	test.assert_throws( function() { "" is not -2 }, TypeError )
	
	test.assert_throws( function() { "" is not 0.0 }, TypeError )
	
	test.assert_throws( function() { "" is not 2.0 }, TypeError )
	
	test.assert_throws( function() { "" is not -0.5 }, TypeError )
	
	test.assert_throws( function() { "" is not "" }, TypeError )
	
	test.assert_throws( function() { "" is not "apple" }, TypeError )
	
	test.assert_throws( function() { "" is not "banana" }, TypeError )
	
	test.assert_throws( function() { "" is not repr }, TypeError )
	
	test.assert_throws( function() { "" is not function(){} }, TypeError )
	
	let $v14 = "" is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = "" is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { "" is not types }, TypeError )

$ $BURN is_not_result_10.burn

is_not_result_11.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { "apple" is not nothing }, TypeError )
	
	test.assert_throws( function() { "apple" is not true }, TypeError )
	
	test.assert_throws( function() { "apple" is not false }, TypeError )
	
	test.assert_throws( function() { "apple" is not 0 }, TypeError )
	
	test.assert_throws( function() { "apple" is not 2 }, TypeError )
	
	test.assert_throws( function() { "apple" is not -2 }, TypeError )
	
	test.assert_throws( function() { "apple" is not 0.0 }, TypeError )
	
	test.assert_throws( function() { "apple" is not 2.0 }, TypeError )
	
	test.assert_throws( function() { "apple" is not -0.5 }, TypeError )
	
	test.assert_throws( function() { "apple" is not "" }, TypeError )
	
	test.assert_throws( function() { "apple" is not "apple" }, TypeError )
	
	test.assert_throws( function() { "apple" is not "banana" }, TypeError )
	
	test.assert_throws( function() { "apple" is not repr }, TypeError )
	
	test.assert_throws( function() { "apple" is not function(){} }, TypeError )
	
	let $v14 = "apple" is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = "apple" is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { "apple" is not types }, TypeError )

$ $BURN is_not_result_11.burn

is_not_result_12.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { "banana" is not nothing }, TypeError )
	
	test.assert_throws( function() { "banana" is not true }, TypeError )
	
	test.assert_throws( function() { "banana" is not false }, TypeError )
	
	test.assert_throws( function() { "banana" is not 0 }, TypeError )
	
	test.assert_throws( function() { "banana" is not 2 }, TypeError )
	
	test.assert_throws( function() { "banana" is not -2 }, TypeError )
	
	test.assert_throws( function() { "banana" is not 0.0 }, TypeError )
	
	test.assert_throws( function() { "banana" is not 2.0 }, TypeError )
	
	test.assert_throws( function() { "banana" is not -0.5 }, TypeError )
	
	test.assert_throws( function() { "banana" is not "" }, TypeError )
	
	test.assert_throws( function() { "banana" is not "apple" }, TypeError )
	
	test.assert_throws( function() { "banana" is not "banana" }, TypeError )
	
	test.assert_throws( function() { "banana" is not repr }, TypeError )
	
	test.assert_throws( function() { "banana" is not function(){} }, TypeError )
	
	let $v14 = "banana" is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = "banana" is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { "banana" is not types }, TypeError )

$ $BURN is_not_result_12.burn

is_not_result_13.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { repr is not nothing }, TypeError )
	
	test.assert_throws( function() { repr is not true }, TypeError )
	
	test.assert_throws( function() { repr is not false }, TypeError )
	
	test.assert_throws( function() { repr is not 0 }, TypeError )
	
	test.assert_throws( function() { repr is not 2 }, TypeError )
	
	test.assert_throws( function() { repr is not -2 }, TypeError )
	
	test.assert_throws( function() { repr is not 0.0 }, TypeError )
	
	test.assert_throws( function() { repr is not 2.0 }, TypeError )
	
	test.assert_throws( function() { repr is not -0.5 }, TypeError )
	
	test.assert_throws( function() { repr is not "" }, TypeError )
	
	test.assert_throws( function() { repr is not "apple" }, TypeError )
	
	test.assert_throws( function() { repr is not "banana" }, TypeError )
	
	test.assert_throws( function() { repr is not repr }, TypeError )
	
	test.assert_throws( function() { repr is not function(){} }, TypeError )
	
	let $v14 = repr is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = repr is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { repr is not types }, TypeError )

$ $BURN is_not_result_13.burn

is_not_result_14.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { function(){} is not nothing }, TypeError )
	
	test.assert_throws( function() { function(){} is not true }, TypeError )
	
	test.assert_throws( function() { function(){} is not false }, TypeError )
	
	test.assert_throws( function() { function(){} is not 0 }, TypeError )
	
	test.assert_throws( function() { function(){} is not 2 }, TypeError )
	
	test.assert_throws( function() { function(){} is not -2 }, TypeError )
	
	test.assert_throws( function() { function(){} is not 0.0 }, TypeError )
	
	test.assert_throws( function() { function(){} is not 2.0 }, TypeError )
	
	test.assert_throws( function() { function(){} is not -0.5 }, TypeError )
	
	test.assert_throws( function() { function(){} is not "" }, TypeError )
	
	test.assert_throws( function() { function(){} is not "apple" }, TypeError )
	
	test.assert_throws( function() { function(){} is not "banana" }, TypeError )
	
	test.assert_throws( function() { function(){} is not repr }, TypeError )
	
	test.assert_throws( function() { function(){} is not function(){} }, TypeError )
	
	let $v14 = function(){} is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = function(){} is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { function(){} is not types }, TypeError )

$ $BURN is_not_result_14.burn

is_not_result_15.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { Integer is not nothing }, TypeError )
	
	test.assert_throws( function() { Integer is not true }, TypeError )
	
	test.assert_throws( function() { Integer is not false }, TypeError )
	
	test.assert_throws( function() { Integer is not 0 }, TypeError )
	
	test.assert_throws( function() { Integer is not 2 }, TypeError )
	
	test.assert_throws( function() { Integer is not -2 }, TypeError )
	
	test.assert_throws( function() { Integer is not 0.0 }, TypeError )
	
	test.assert_throws( function() { Integer is not 2.0 }, TypeError )
	
	test.assert_throws( function() { Integer is not -0.5 }, TypeError )
	
	test.assert_throws( function() { Integer is not "" }, TypeError )
	
	test.assert_throws( function() { Integer is not "apple" }, TypeError )
	
	test.assert_throws( function() { Integer is not "banana" }, TypeError )
	
	test.assert_throws( function() { Integer is not repr }, TypeError )
	
	test.assert_throws( function() { Integer is not function(){} }, TypeError )
	
	let $v14 = Integer is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = Integer is not Type
	assert( $v15 is Boolean )
	assert( $v15 == false )
	
	test.assert_throws( function() { Integer is not types }, TypeError )

$ $BURN is_not_result_15.burn

is_not_result_16.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { Type is not nothing }, TypeError )
	
	test.assert_throws( function() { Type is not true }, TypeError )
	
	test.assert_throws( function() { Type is not false }, TypeError )
	
	test.assert_throws( function() { Type is not 0 }, TypeError )
	
	test.assert_throws( function() { Type is not 2 }, TypeError )
	
	test.assert_throws( function() { Type is not -2 }, TypeError )
	
	test.assert_throws( function() { Type is not 0.0 }, TypeError )
	
	test.assert_throws( function() { Type is not 2.0 }, TypeError )
	
	test.assert_throws( function() { Type is not -0.5 }, TypeError )
	
	test.assert_throws( function() { Type is not "" }, TypeError )
	
	test.assert_throws( function() { Type is not "apple" }, TypeError )
	
	test.assert_throws( function() { Type is not "banana" }, TypeError )
	
	test.assert_throws( function() { Type is not repr }, TypeError )
	
	test.assert_throws( function() { Type is not function(){} }, TypeError )
	
	let $v14 = Type is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = Type is not Type
	assert( $v15 is Boolean )
	assert( $v15 == false )
	
	test.assert_throws( function() { Type is not types }, TypeError )

$ $BURN is_not_result_16.burn

is_not_result_17.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { types is not nothing }, TypeError )
	
	test.assert_throws( function() { types is not true }, TypeError )
	
	test.assert_throws( function() { types is not false }, TypeError )
	
	test.assert_throws( function() { types is not 0 }, TypeError )
	
	test.assert_throws( function() { types is not 2 }, TypeError )
	
	test.assert_throws( function() { types is not -2 }, TypeError )
	
	test.assert_throws( function() { types is not 0.0 }, TypeError )
	
	test.assert_throws( function() { types is not 2.0 }, TypeError )
	
	test.assert_throws( function() { types is not -0.5 }, TypeError )
	
	test.assert_throws( function() { types is not "" }, TypeError )
	
	test.assert_throws( function() { types is not "apple" }, TypeError )
	
	test.assert_throws( function() { types is not "banana" }, TypeError )
	
	test.assert_throws( function() { types is not repr }, TypeError )
	
	test.assert_throws( function() { types is not function(){} }, TypeError )
	
	let $v14 = types is not Integer
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = types is not Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	test.assert_throws( function() { types is not types }, TypeError )

$ $BURN is_not_result_17.burn
