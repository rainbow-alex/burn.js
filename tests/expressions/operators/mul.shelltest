// generated by `etc/generate_operator_test.py mul`

mul_result_1.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { nothing * nothing }, TypeError )
	
	test.assert_throws( function() { nothing * true }, TypeError )
	
	test.assert_throws( function() { nothing * false }, TypeError )
	
	test.assert_throws( function() { nothing * 0 }, TypeError )
	
	test.assert_throws( function() { nothing * 2 }, TypeError )
	
	test.assert_throws( function() { nothing * -2 }, TypeError )
	
	test.assert_throws( function() { nothing * 0.0 }, TypeError )
	
	test.assert_throws( function() { nothing * 2.0 }, TypeError )
	
	test.assert_throws( function() { nothing * -0.5 }, TypeError )
	
	test.assert_throws( function() { nothing * "c"[0] }, TypeError )
	
	test.assert_throws( function() { nothing * "" }, TypeError )
	
	test.assert_throws( function() { nothing * "apple" }, TypeError )
	
	test.assert_throws( function() { nothing * "banana" }, TypeError )
	
	test.assert_throws( function() { nothing * repr }, TypeError )
	
	test.assert_throws( function() { nothing * function(){} }, TypeError )
	
	test.assert_throws( function() { nothing * Integer }, TypeError )
	
	test.assert_throws( function() { nothing * Type }, TypeError )
	
	test.assert_throws( function() { nothing * types }, TypeError )
	
	test.assert_throws( function() { nothing * 3 }, TypeError )
	
	test.assert_throws( function() { nothing * 8 }, TypeError )
	
	test.assert_throws( function() { nothing * 0.3 }, TypeError )
	
	test.assert_throws( function() { nothing * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { nothing * 0.7 }, TypeError )

$ $BURN mul_result_1.burn

mul_result_2.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { true * nothing }, TypeError )
	
	test.assert_throws( function() { true * true }, TypeError )
	
	test.assert_throws( function() { true * false }, TypeError )
	
	test.assert_throws( function() { true * 0 }, TypeError )
	
	test.assert_throws( function() { true * 2 }, TypeError )
	
	test.assert_throws( function() { true * -2 }, TypeError )
	
	test.assert_throws( function() { true * 0.0 }, TypeError )
	
	test.assert_throws( function() { true * 2.0 }, TypeError )
	
	test.assert_throws( function() { true * -0.5 }, TypeError )
	
	test.assert_throws( function() { true * "c"[0] }, TypeError )
	
	test.assert_throws( function() { true * "" }, TypeError )
	
	test.assert_throws( function() { true * "apple" }, TypeError )
	
	test.assert_throws( function() { true * "banana" }, TypeError )
	
	test.assert_throws( function() { true * repr }, TypeError )
	
	test.assert_throws( function() { true * function(){} }, TypeError )
	
	test.assert_throws( function() { true * Integer }, TypeError )
	
	test.assert_throws( function() { true * Type }, TypeError )
	
	test.assert_throws( function() { true * types }, TypeError )
	
	test.assert_throws( function() { true * 3 }, TypeError )
	
	test.assert_throws( function() { true * 8 }, TypeError )
	
	test.assert_throws( function() { true * 0.3 }, TypeError )
	
	test.assert_throws( function() { true * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { true * 0.7 }, TypeError )

$ $BURN mul_result_2.burn

mul_result_3.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { false * nothing }, TypeError )
	
	test.assert_throws( function() { false * true }, TypeError )
	
	test.assert_throws( function() { false * false }, TypeError )
	
	test.assert_throws( function() { false * 0 }, TypeError )
	
	test.assert_throws( function() { false * 2 }, TypeError )
	
	test.assert_throws( function() { false * -2 }, TypeError )
	
	test.assert_throws( function() { false * 0.0 }, TypeError )
	
	test.assert_throws( function() { false * 2.0 }, TypeError )
	
	test.assert_throws( function() { false * -0.5 }, TypeError )
	
	test.assert_throws( function() { false * "c"[0] }, TypeError )
	
	test.assert_throws( function() { false * "" }, TypeError )
	
	test.assert_throws( function() { false * "apple" }, TypeError )
	
	test.assert_throws( function() { false * "banana" }, TypeError )
	
	test.assert_throws( function() { false * repr }, TypeError )
	
	test.assert_throws( function() { false * function(){} }, TypeError )
	
	test.assert_throws( function() { false * Integer }, TypeError )
	
	test.assert_throws( function() { false * Type }, TypeError )
	
	test.assert_throws( function() { false * types }, TypeError )
	
	test.assert_throws( function() { false * 3 }, TypeError )
	
	test.assert_throws( function() { false * 8 }, TypeError )
	
	test.assert_throws( function() { false * 0.3 }, TypeError )
	
	test.assert_throws( function() { false * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { false * 0.7 }, TypeError )

$ $BURN mul_result_3.burn

mul_result_4.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 0 * nothing }, TypeError )
	
	test.assert_throws( function() { 0 * true }, TypeError )
	
	test.assert_throws( function() { 0 * false }, TypeError )
	
	let $v3 = 0 * 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 0 * 2
	assert( $v4 is Integer )
	assert( $v4 == 0 )
	
	let $v5 = 0 * -2
	assert( $v5 is Integer )
	assert( $v5 == 0 )
	
	let $v6 = 0 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0 * 2.0
	assert( $v7 is Float )
	assert( ( -0.0001 < $v7 ) and ( $v7 < 0.0001 ) )
	
	let $v8 = 0 * -0.5
	assert( $v8 is Float )
	assert( ( -0.0001 < $v8 ) and ( $v8 < 0.0001 ) )
	
	test.assert_throws( function() { 0 * "c"[0] }, TypeError )
	
	let $v10 = 0 * ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = 0 * "apple"
	assert( $v11 is String )
	assert( $v11 == "" )
	
	let $v12 = 0 * "banana"
	assert( $v12 is String )
	assert( $v12 == "" )
	
	test.assert_throws( function() { 0 * repr }, TypeError )
	
	test.assert_throws( function() { 0 * function(){} }, TypeError )
	
	test.assert_throws( function() { 0 * Integer }, TypeError )
	
	test.assert_throws( function() { 0 * Type }, TypeError )
	
	test.assert_throws( function() { 0 * types }, TypeError )
	
	let $v18 = 0 * 3
	assert( $v18 is Integer )
	assert( $v18 == 0 )
	
	let $v19 = 0 * 8
	assert( $v19 is Integer )
	assert( $v19 == 0 )
	
	let $v20 = 0 * 0.3
	assert( $v20 is Float )
	assert( ( -0.0001 < $v20 ) and ( $v20 < 0.0001 ) )
	
	let $v21 = 0 * 0.33333333333
	assert( $v21 is Float )
	assert( ( -0.0001 < $v21 ) and ( $v21 < 0.0001 ) )
	
	let $v22 = 0 * 0.7
	assert( $v22 is Float )
	assert( ( -0.0001 < $v22 ) and ( $v22 < 0.0001 ) )

$ $BURN mul_result_4.burn

mul_result_5.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 2 * nothing }, TypeError )
	
	test.assert_throws( function() { 2 * true }, TypeError )
	
	test.assert_throws( function() { 2 * false }, TypeError )
	
	let $v3 = 2 * 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 2 * 2
	assert( $v4 is Integer )
	assert( $v4 == 4 )
	
	let $v5 = 2 * -2
	assert( $v5 is Integer )
	assert( $v5 == -4 )
	
	let $v6 = 2 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 2 * 2.0
	assert( $v7 is Float )
	assert( ( 3.9999 < $v7 ) and ( $v7 < 4.0001 ) )
	
	let $v8 = 2 * -0.5
	assert( $v8 is Float )
	assert( ( -1.0001 < $v8 ) and ( $v8 < -0.9999 ) )
	
	test.assert_throws( function() { 2 * "c"[0] }, TypeError )
	
	let $v10 = 2 * ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = 2 * "apple"
	assert( $v11 is String )
	assert( $v11 == "appleapple" )
	
	let $v12 = 2 * "banana"
	assert( $v12 is String )
	assert( $v12 == "bananabanana" )
	
	test.assert_throws( function() { 2 * repr }, TypeError )
	
	test.assert_throws( function() { 2 * function(){} }, TypeError )
	
	test.assert_throws( function() { 2 * Integer }, TypeError )
	
	test.assert_throws( function() { 2 * Type }, TypeError )
	
	test.assert_throws( function() { 2 * types }, TypeError )
	
	let $v18 = 2 * 3
	assert( $v18 is Integer )
	assert( $v18 == 6 )
	
	let $v19 = 2 * 8
	assert( $v19 is Integer )
	assert( $v19 == 16 )
	
	let $v20 = 2 * 0.3
	assert( $v20 is Float )
	assert( ( 0.5999 < $v20 ) and ( $v20 < 0.6001 ) )
	
	let $v21 = 2 * 0.33333333333
	assert( $v21 is Float )
	assert( ( 0.6666 < $v21 ) and ( $v21 < 0.6668 ) )
	
	let $v22 = 2 * 0.7
	assert( $v22 is Float )
	assert( ( 1.3999 < $v22 ) and ( $v22 < 1.4001 ) )

$ $BURN mul_result_5.burn

mul_result_6.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { -2 * nothing }, TypeError )
	
	test.assert_throws( function() { -2 * true }, TypeError )
	
	test.assert_throws( function() { -2 * false }, TypeError )
	
	let $v3 = -2 * 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = -2 * 2
	assert( $v4 is Integer )
	assert( $v4 == -4 )
	
	let $v5 = -2 * -2
	assert( $v5 is Integer )
	assert( $v5 == 4 )
	
	let $v6 = -2 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = -2 * 2.0
	assert( $v7 is Float )
	assert( ( -4.0001 < $v7 ) and ( $v7 < -3.9999 ) )
	
	let $v8 = -2 * -0.5
	assert( $v8 is Float )
	assert( ( 0.9999 < $v8 ) and ( $v8 < 1.0001 ) )
	
	test.assert_throws( function() { -2 * "c"[0] }, TypeError )
	
	test.assert_throws( function() { -2 * "" }, TypeError )
	
	test.assert_throws( function() { -2 * "apple" }, TypeError )
	
	test.assert_throws( function() { -2 * "banana" }, TypeError )
	
	test.assert_throws( function() { -2 * repr }, TypeError )
	
	test.assert_throws( function() { -2 * function(){} }, TypeError )
	
	test.assert_throws( function() { -2 * Integer }, TypeError )
	
	test.assert_throws( function() { -2 * Type }, TypeError )
	
	test.assert_throws( function() { -2 * types }, TypeError )
	
	let $v18 = -2 * 3
	assert( $v18 is Integer )
	assert( $v18 == -6 )
	
	let $v19 = -2 * 8
	assert( $v19 is Integer )
	assert( $v19 == -16 )
	
	let $v20 = -2 * 0.3
	assert( $v20 is Float )
	assert( ( -0.6001 < $v20 ) and ( $v20 < -0.5999 ) )
	
	let $v21 = -2 * 0.33333333333
	assert( $v21 is Float )
	assert( ( -0.6668 < $v21 ) and ( $v21 < -0.6666 ) )
	
	let $v22 = -2 * 0.7
	assert( $v22 is Float )
	assert( ( -1.4001 < $v22 ) and ( $v22 < -1.3999 ) )

$ $BURN mul_result_6.burn

mul_result_7.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 0.0 * nothing }, TypeError )
	
	test.assert_throws( function() { 0.0 * true }, TypeError )
	
	test.assert_throws( function() { 0.0 * false }, TypeError )
	
	let $v3 = 0.0 * 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = 0.0 * 2
	assert( $v4 is Float )
	assert( ( -0.0001 < $v4 ) and ( $v4 < 0.0001 ) )
	
	let $v5 = 0.0 * -2
	assert( $v5 is Float )
	assert( ( -0.0001 < $v5 ) and ( $v5 < 0.0001 ) )
	
	let $v6 = 0.0 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0.0 * 2.0
	assert( $v7 is Float )
	assert( ( -0.0001 < $v7 ) and ( $v7 < 0.0001 ) )
	
	let $v8 = 0.0 * -0.5
	assert( $v8 is Float )
	assert( ( -0.0001 < $v8 ) and ( $v8 < 0.0001 ) )
	
	test.assert_throws( function() { 0.0 * "c"[0] }, TypeError )
	
	test.assert_throws( function() { 0.0 * "" }, TypeError )
	
	test.assert_throws( function() { 0.0 * "apple" }, TypeError )
	
	test.assert_throws( function() { 0.0 * "banana" }, TypeError )
	
	test.assert_throws( function() { 0.0 * repr }, TypeError )
	
	test.assert_throws( function() { 0.0 * function(){} }, TypeError )
	
	test.assert_throws( function() { 0.0 * Integer }, TypeError )
	
	test.assert_throws( function() { 0.0 * Type }, TypeError )
	
	test.assert_throws( function() { 0.0 * types }, TypeError )
	
	let $v18 = 0.0 * 3
	assert( $v18 is Float )
	assert( ( -0.0001 < $v18 ) and ( $v18 < 0.0001 ) )
	
	let $v19 = 0.0 * 8
	assert( $v19 is Float )
	assert( ( -0.0001 < $v19 ) and ( $v19 < 0.0001 ) )
	
	let $v20 = 0.0 * 0.3
	assert( $v20 is Float )
	assert( ( -0.0001 < $v20 ) and ( $v20 < 0.0001 ) )
	
	let $v21 = 0.0 * 0.33333333333
	assert( $v21 is Float )
	assert( ( -0.0001 < $v21 ) and ( $v21 < 0.0001 ) )
	
	let $v22 = 0.0 * 0.7
	assert( $v22 is Float )
	assert( ( -0.0001 < $v22 ) and ( $v22 < 0.0001 ) )

$ $BURN mul_result_7.burn

mul_result_8.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 2.0 * nothing }, TypeError )
	
	test.assert_throws( function() { 2.0 * true }, TypeError )
	
	test.assert_throws( function() { 2.0 * false }, TypeError )
	
	let $v3 = 2.0 * 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = 2.0 * 2
	assert( $v4 is Float )
	assert( ( 3.9999 < $v4 ) and ( $v4 < 4.0001 ) )
	
	let $v5 = 2.0 * -2
	assert( $v5 is Float )
	assert( ( -4.0001 < $v5 ) and ( $v5 < -3.9999 ) )
	
	let $v6 = 2.0 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 2.0 * 2.0
	assert( $v7 is Float )
	assert( ( 3.9999 < $v7 ) and ( $v7 < 4.0001 ) )
	
	let $v8 = 2.0 * -0.5
	assert( $v8 is Float )
	assert( ( -1.0001 < $v8 ) and ( $v8 < -0.9999 ) )
	
	test.assert_throws( function() { 2.0 * "c"[0] }, TypeError )
	
	test.assert_throws( function() { 2.0 * "" }, TypeError )
	
	test.assert_throws( function() { 2.0 * "apple" }, TypeError )
	
	test.assert_throws( function() { 2.0 * "banana" }, TypeError )
	
	test.assert_throws( function() { 2.0 * repr }, TypeError )
	
	test.assert_throws( function() { 2.0 * function(){} }, TypeError )
	
	test.assert_throws( function() { 2.0 * Integer }, TypeError )
	
	test.assert_throws( function() { 2.0 * Type }, TypeError )
	
	test.assert_throws( function() { 2.0 * types }, TypeError )
	
	let $v18 = 2.0 * 3
	assert( $v18 is Float )
	assert( ( 5.9999 < $v18 ) and ( $v18 < 6.0001 ) )
	
	let $v19 = 2.0 * 8
	assert( $v19 is Float )
	assert( ( 15.9999 < $v19 ) and ( $v19 < 16.0001 ) )
	
	let $v20 = 2.0 * 0.3
	assert( $v20 is Float )
	assert( ( 0.5999 < $v20 ) and ( $v20 < 0.6001 ) )
	
	let $v21 = 2.0 * 0.33333333333
	assert( $v21 is Float )
	assert( ( 0.6666 < $v21 ) and ( $v21 < 0.6668 ) )
	
	let $v22 = 2.0 * 0.7
	assert( $v22 is Float )
	assert( ( 1.3999 < $v22 ) and ( $v22 < 1.4001 ) )

$ $BURN mul_result_8.burn

mul_result_9.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { -0.5 * nothing }, TypeError )
	
	test.assert_throws( function() { -0.5 * true }, TypeError )
	
	test.assert_throws( function() { -0.5 * false }, TypeError )
	
	let $v3 = -0.5 * 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = -0.5 * 2
	assert( $v4 is Float )
	assert( ( -1.0001 < $v4 ) and ( $v4 < -0.9999 ) )
	
	let $v5 = -0.5 * -2
	assert( $v5 is Float )
	assert( ( 0.9999 < $v5 ) and ( $v5 < 1.0001 ) )
	
	let $v6 = -0.5 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = -0.5 * 2.0
	assert( $v7 is Float )
	assert( ( -1.0001 < $v7 ) and ( $v7 < -0.9999 ) )
	
	let $v8 = -0.5 * -0.5
	assert( $v8 is Float )
	assert( ( 0.2499 < $v8 ) and ( $v8 < 0.2501 ) )
	
	test.assert_throws( function() { -0.5 * "c"[0] }, TypeError )
	
	test.assert_throws( function() { -0.5 * "" }, TypeError )
	
	test.assert_throws( function() { -0.5 * "apple" }, TypeError )
	
	test.assert_throws( function() { -0.5 * "banana" }, TypeError )
	
	test.assert_throws( function() { -0.5 * repr }, TypeError )
	
	test.assert_throws( function() { -0.5 * function(){} }, TypeError )
	
	test.assert_throws( function() { -0.5 * Integer }, TypeError )
	
	test.assert_throws( function() { -0.5 * Type }, TypeError )
	
	test.assert_throws( function() { -0.5 * types }, TypeError )
	
	let $v18 = -0.5 * 3
	assert( $v18 is Float )
	assert( ( -1.5001 < $v18 ) and ( $v18 < -1.4999 ) )
	
	let $v19 = -0.5 * 8
	assert( $v19 is Float )
	assert( ( -4.0001 < $v19 ) and ( $v19 < -3.9999 ) )
	
	let $v20 = -0.5 * 0.3
	assert( $v20 is Float )
	assert( ( -0.1501 < $v20 ) and ( $v20 < -0.1499 ) )
	
	let $v21 = -0.5 * 0.33333333333
	assert( $v21 is Float )
	assert( ( -0.1668 < $v21 ) and ( $v21 < -0.1666 ) )
	
	let $v22 = -0.5 * 0.7
	assert( $v22 is Float )
	assert( ( -0.3501 < $v22 ) and ( $v22 < -0.3499 ) )

$ $BURN mul_result_9.burn

mul_result_10.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { "c"[0] * nothing }, TypeError )
	
	test.assert_throws( function() { "c"[0] * true }, TypeError )
	
	test.assert_throws( function() { "c"[0] * false }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 0 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 2 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * -2 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 0.0 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 2.0 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * -0.5 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * "c"[0] }, TypeError )
	
	test.assert_throws( function() { "c"[0] * "" }, TypeError )
	
	test.assert_throws( function() { "c"[0] * "apple" }, TypeError )
	
	test.assert_throws( function() { "c"[0] * "banana" }, TypeError )
	
	test.assert_throws( function() { "c"[0] * repr }, TypeError )
	
	test.assert_throws( function() { "c"[0] * function(){} }, TypeError )
	
	test.assert_throws( function() { "c"[0] * Integer }, TypeError )
	
	test.assert_throws( function() { "c"[0] * Type }, TypeError )
	
	test.assert_throws( function() { "c"[0] * types }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 3 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 8 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 0.3 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { "c"[0] * 0.7 }, TypeError )

$ $BURN mul_result_10.burn

mul_result_11.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { "" * nothing }, TypeError )
	
	test.assert_throws( function() { "" * true }, TypeError )
	
	test.assert_throws( function() { "" * false }, TypeError )
	
	let $v3 = "" * 0
	assert( $v3 is String )
	assert( $v3 == "" )
	
	let $v4 = "" * 2
	assert( $v4 is String )
	assert( $v4 == "" )
	
	test.assert_throws( function() { "" * -2 }, TypeError )
	
	test.assert_throws( function() { "" * 0.0 }, TypeError )
	
	test.assert_throws( function() { "" * 2.0 }, TypeError )
	
	test.assert_throws( function() { "" * -0.5 }, TypeError )
	
	test.assert_throws( function() { "" * "c"[0] }, TypeError )
	
	test.assert_throws( function() { "" * "" }, TypeError )
	
	test.assert_throws( function() { "" * "apple" }, TypeError )
	
	test.assert_throws( function() { "" * "banana" }, TypeError )
	
	test.assert_throws( function() { "" * repr }, TypeError )
	
	test.assert_throws( function() { "" * function(){} }, TypeError )
	
	test.assert_throws( function() { "" * Integer }, TypeError )
	
	test.assert_throws( function() { "" * Type }, TypeError )
	
	test.assert_throws( function() { "" * types }, TypeError )
	
	let $v18 = "" * 3
	assert( $v18 is String )
	assert( $v18 == "" )
	
	let $v19 = "" * 8
	assert( $v19 is String )
	assert( $v19 == "" )
	
	test.assert_throws( function() { "" * 0.3 }, TypeError )
	
	test.assert_throws( function() { "" * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { "" * 0.7 }, TypeError )

$ $BURN mul_result_11.burn

mul_result_12.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { "apple" * nothing }, TypeError )
	
	test.assert_throws( function() { "apple" * true }, TypeError )
	
	test.assert_throws( function() { "apple" * false }, TypeError )
	
	let $v3 = "apple" * 0
	assert( $v3 is String )
	assert( $v3 == "" )
	
	let $v4 = "apple" * 2
	assert( $v4 is String )
	assert( $v4 == "appleapple" )
	
	test.assert_throws( function() { "apple" * -2 }, TypeError )
	
	test.assert_throws( function() { "apple" * 0.0 }, TypeError )
	
	test.assert_throws( function() { "apple" * 2.0 }, TypeError )
	
	test.assert_throws( function() { "apple" * -0.5 }, TypeError )
	
	test.assert_throws( function() { "apple" * "c"[0] }, TypeError )
	
	test.assert_throws( function() { "apple" * "" }, TypeError )
	
	test.assert_throws( function() { "apple" * "apple" }, TypeError )
	
	test.assert_throws( function() { "apple" * "banana" }, TypeError )
	
	test.assert_throws( function() { "apple" * repr }, TypeError )
	
	test.assert_throws( function() { "apple" * function(){} }, TypeError )
	
	test.assert_throws( function() { "apple" * Integer }, TypeError )
	
	test.assert_throws( function() { "apple" * Type }, TypeError )
	
	test.assert_throws( function() { "apple" * types }, TypeError )
	
	let $v18 = "apple" * 3
	assert( $v18 is String )
	assert( $v18 == "appleappleapple" )
	
	let $v19 = "apple" * 8
	assert( $v19 is String )
	assert( $v19 == "appleappleappleappleappleappleappleapple" )
	
	test.assert_throws( function() { "apple" * 0.3 }, TypeError )
	
	test.assert_throws( function() { "apple" * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { "apple" * 0.7 }, TypeError )

$ $BURN mul_result_12.burn

mul_result_13.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { "banana" * nothing }, TypeError )
	
	test.assert_throws( function() { "banana" * true }, TypeError )
	
	test.assert_throws( function() { "banana" * false }, TypeError )
	
	let $v3 = "banana" * 0
	assert( $v3 is String )
	assert( $v3 == "" )
	
	let $v4 = "banana" * 2
	assert( $v4 is String )
	assert( $v4 == "bananabanana" )
	
	test.assert_throws( function() { "banana" * -2 }, TypeError )
	
	test.assert_throws( function() { "banana" * 0.0 }, TypeError )
	
	test.assert_throws( function() { "banana" * 2.0 }, TypeError )
	
	test.assert_throws( function() { "banana" * -0.5 }, TypeError )
	
	test.assert_throws( function() { "banana" * "c"[0] }, TypeError )
	
	test.assert_throws( function() { "banana" * "" }, TypeError )
	
	test.assert_throws( function() { "banana" * "apple" }, TypeError )
	
	test.assert_throws( function() { "banana" * "banana" }, TypeError )
	
	test.assert_throws( function() { "banana" * repr }, TypeError )
	
	test.assert_throws( function() { "banana" * function(){} }, TypeError )
	
	test.assert_throws( function() { "banana" * Integer }, TypeError )
	
	test.assert_throws( function() { "banana" * Type }, TypeError )
	
	test.assert_throws( function() { "banana" * types }, TypeError )
	
	let $v18 = "banana" * 3
	assert( $v18 is String )
	assert( $v18 == "bananabananabanana" )
	
	let $v19 = "banana" * 8
	assert( $v19 is String )
	assert( $v19 == "bananabananabananabananabananabananabananabanana" )
	
	test.assert_throws( function() { "banana" * 0.3 }, TypeError )
	
	test.assert_throws( function() { "banana" * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { "banana" * 0.7 }, TypeError )

$ $BURN mul_result_13.burn

mul_result_14.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { repr * nothing }, TypeError )
	
	test.assert_throws( function() { repr * true }, TypeError )
	
	test.assert_throws( function() { repr * false }, TypeError )
	
	test.assert_throws( function() { repr * 0 }, TypeError )
	
	test.assert_throws( function() { repr * 2 }, TypeError )
	
	test.assert_throws( function() { repr * -2 }, TypeError )
	
	test.assert_throws( function() { repr * 0.0 }, TypeError )
	
	test.assert_throws( function() { repr * 2.0 }, TypeError )
	
	test.assert_throws( function() { repr * -0.5 }, TypeError )
	
	test.assert_throws( function() { repr * "c"[0] }, TypeError )
	
	test.assert_throws( function() { repr * "" }, TypeError )
	
	test.assert_throws( function() { repr * "apple" }, TypeError )
	
	test.assert_throws( function() { repr * "banana" }, TypeError )
	
	test.assert_throws( function() { repr * repr }, TypeError )
	
	test.assert_throws( function() { repr * function(){} }, TypeError )
	
	test.assert_throws( function() { repr * Integer }, TypeError )
	
	test.assert_throws( function() { repr * Type }, TypeError )
	
	test.assert_throws( function() { repr * types }, TypeError )
	
	test.assert_throws( function() { repr * 3 }, TypeError )
	
	test.assert_throws( function() { repr * 8 }, TypeError )
	
	test.assert_throws( function() { repr * 0.3 }, TypeError )
	
	test.assert_throws( function() { repr * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { repr * 0.7 }, TypeError )

$ $BURN mul_result_14.burn

mul_result_15.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { function(){} * nothing }, TypeError )
	
	test.assert_throws( function() { function(){} * true }, TypeError )
	
	test.assert_throws( function() { function(){} * false }, TypeError )
	
	test.assert_throws( function() { function(){} * 0 }, TypeError )
	
	test.assert_throws( function() { function(){} * 2 }, TypeError )
	
	test.assert_throws( function() { function(){} * -2 }, TypeError )
	
	test.assert_throws( function() { function(){} * 0.0 }, TypeError )
	
	test.assert_throws( function() { function(){} * 2.0 }, TypeError )
	
	test.assert_throws( function() { function(){} * -0.5 }, TypeError )
	
	test.assert_throws( function() { function(){} * "c"[0] }, TypeError )
	
	test.assert_throws( function() { function(){} * "" }, TypeError )
	
	test.assert_throws( function() { function(){} * "apple" }, TypeError )
	
	test.assert_throws( function() { function(){} * "banana" }, TypeError )
	
	test.assert_throws( function() { function(){} * repr }, TypeError )
	
	test.assert_throws( function() { function(){} * function(){} }, TypeError )
	
	test.assert_throws( function() { function(){} * Integer }, TypeError )
	
	test.assert_throws( function() { function(){} * Type }, TypeError )
	
	test.assert_throws( function() { function(){} * types }, TypeError )
	
	test.assert_throws( function() { function(){} * 3 }, TypeError )
	
	test.assert_throws( function() { function(){} * 8 }, TypeError )
	
	test.assert_throws( function() { function(){} * 0.3 }, TypeError )
	
	test.assert_throws( function() { function(){} * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { function(){} * 0.7 }, TypeError )

$ $BURN mul_result_15.burn

mul_result_16.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { Integer * nothing }, TypeError )
	
	test.assert_throws( function() { Integer * true }, TypeError )
	
	test.assert_throws( function() { Integer * false }, TypeError )
	
	test.assert_throws( function() { Integer * 0 }, TypeError )
	
	test.assert_throws( function() { Integer * 2 }, TypeError )
	
	test.assert_throws( function() { Integer * -2 }, TypeError )
	
	test.assert_throws( function() { Integer * 0.0 }, TypeError )
	
	test.assert_throws( function() { Integer * 2.0 }, TypeError )
	
	test.assert_throws( function() { Integer * -0.5 }, TypeError )
	
	test.assert_throws( function() { Integer * "c"[0] }, TypeError )
	
	test.assert_throws( function() { Integer * "" }, TypeError )
	
	test.assert_throws( function() { Integer * "apple" }, TypeError )
	
	test.assert_throws( function() { Integer * "banana" }, TypeError )
	
	test.assert_throws( function() { Integer * repr }, TypeError )
	
	test.assert_throws( function() { Integer * function(){} }, TypeError )
	
	test.assert_throws( function() { Integer * Integer }, TypeError )
	
	test.assert_throws( function() { Integer * Type }, TypeError )
	
	test.assert_throws( function() { Integer * types }, TypeError )
	
	test.assert_throws( function() { Integer * 3 }, TypeError )
	
	test.assert_throws( function() { Integer * 8 }, TypeError )
	
	test.assert_throws( function() { Integer * 0.3 }, TypeError )
	
	test.assert_throws( function() { Integer * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { Integer * 0.7 }, TypeError )

$ $BURN mul_result_16.burn

mul_result_17.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { Type * nothing }, TypeError )
	
	test.assert_throws( function() { Type * true }, TypeError )
	
	test.assert_throws( function() { Type * false }, TypeError )
	
	test.assert_throws( function() { Type * 0 }, TypeError )
	
	test.assert_throws( function() { Type * 2 }, TypeError )
	
	test.assert_throws( function() { Type * -2 }, TypeError )
	
	test.assert_throws( function() { Type * 0.0 }, TypeError )
	
	test.assert_throws( function() { Type * 2.0 }, TypeError )
	
	test.assert_throws( function() { Type * -0.5 }, TypeError )
	
	test.assert_throws( function() { Type * "c"[0] }, TypeError )
	
	test.assert_throws( function() { Type * "" }, TypeError )
	
	test.assert_throws( function() { Type * "apple" }, TypeError )
	
	test.assert_throws( function() { Type * "banana" }, TypeError )
	
	test.assert_throws( function() { Type * repr }, TypeError )
	
	test.assert_throws( function() { Type * function(){} }, TypeError )
	
	test.assert_throws( function() { Type * Integer }, TypeError )
	
	test.assert_throws( function() { Type * Type }, TypeError )
	
	test.assert_throws( function() { Type * types }, TypeError )
	
	test.assert_throws( function() { Type * 3 }, TypeError )
	
	test.assert_throws( function() { Type * 8 }, TypeError )
	
	test.assert_throws( function() { Type * 0.3 }, TypeError )
	
	test.assert_throws( function() { Type * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { Type * 0.7 }, TypeError )

$ $BURN mul_result_17.burn

mul_result_18.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { types * nothing }, TypeError )
	
	test.assert_throws( function() { types * true }, TypeError )
	
	test.assert_throws( function() { types * false }, TypeError )
	
	test.assert_throws( function() { types * 0 }, TypeError )
	
	test.assert_throws( function() { types * 2 }, TypeError )
	
	test.assert_throws( function() { types * -2 }, TypeError )
	
	test.assert_throws( function() { types * 0.0 }, TypeError )
	
	test.assert_throws( function() { types * 2.0 }, TypeError )
	
	test.assert_throws( function() { types * -0.5 }, TypeError )
	
	test.assert_throws( function() { types * "c"[0] }, TypeError )
	
	test.assert_throws( function() { types * "" }, TypeError )
	
	test.assert_throws( function() { types * "apple" }, TypeError )
	
	test.assert_throws( function() { types * "banana" }, TypeError )
	
	test.assert_throws( function() { types * repr }, TypeError )
	
	test.assert_throws( function() { types * function(){} }, TypeError )
	
	test.assert_throws( function() { types * Integer }, TypeError )
	
	test.assert_throws( function() { types * Type }, TypeError )
	
	test.assert_throws( function() { types * types }, TypeError )
	
	test.assert_throws( function() { types * 3 }, TypeError )
	
	test.assert_throws( function() { types * 8 }, TypeError )
	
	test.assert_throws( function() { types * 0.3 }, TypeError )
	
	test.assert_throws( function() { types * 0.33333333333 }, TypeError )
	
	test.assert_throws( function() { types * 0.7 }, TypeError )

$ $BURN mul_result_18.burn

mul_result_19.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 3 * nothing }, TypeError )
	
	test.assert_throws( function() { 3 * true }, TypeError )
	
	test.assert_throws( function() { 3 * false }, TypeError )
	
	let $v3 = 3 * 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 3 * 2
	assert( $v4 is Integer )
	assert( $v4 == 6 )
	
	let $v5 = 3 * -2
	assert( $v5 is Integer )
	assert( $v5 == -6 )
	
	let $v6 = 3 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 3 * 2.0
	assert( $v7 is Float )
	assert( ( 5.9999 < $v7 ) and ( $v7 < 6.0001 ) )
	
	let $v8 = 3 * -0.5
	assert( $v8 is Float )
	assert( ( -1.5001 < $v8 ) and ( $v8 < -1.4999 ) )
	
	test.assert_throws( function() { 3 * "c"[0] }, TypeError )
	
	let $v10 = 3 * ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = 3 * "apple"
	assert( $v11 is String )
	assert( $v11 == "appleappleapple" )
	
	let $v12 = 3 * "banana"
	assert( $v12 is String )
	assert( $v12 == "bananabananabanana" )
	
	test.assert_throws( function() { 3 * repr }, TypeError )
	
	test.assert_throws( function() { 3 * function(){} }, TypeError )
	
	test.assert_throws( function() { 3 * Integer }, TypeError )
	
	test.assert_throws( function() { 3 * Type }, TypeError )
	
	test.assert_throws( function() { 3 * types }, TypeError )
	
	let $v18 = 3 * 3
	assert( $v18 is Integer )
	assert( $v18 == 9 )
	
	let $v19 = 3 * 8
	assert( $v19 is Integer )
	assert( $v19 == 24 )
	
	let $v20 = 3 * 0.3
	assert( $v20 is Float )
	assert( ( 0.8999 < $v20 ) and ( $v20 < 0.9001 ) )
	
	let $v21 = 3 * 0.33333333333
	assert( $v21 is Float )
	assert( ( 0.9999 < $v21 ) and ( $v21 < 1.0001 ) )
	
	let $v22 = 3 * 0.7
	assert( $v22 is Float )
	assert( ( 2.0999 < $v22 ) and ( $v22 < 2.1001 ) )

$ $BURN mul_result_19.burn

mul_result_20.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 8 * nothing }, TypeError )
	
	test.assert_throws( function() { 8 * true }, TypeError )
	
	test.assert_throws( function() { 8 * false }, TypeError )
	
	let $v3 = 8 * 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 8 * 2
	assert( $v4 is Integer )
	assert( $v4 == 16 )
	
	let $v5 = 8 * -2
	assert( $v5 is Integer )
	assert( $v5 == -16 )
	
	let $v6 = 8 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 8 * 2.0
	assert( $v7 is Float )
	assert( ( 15.9999 < $v7 ) and ( $v7 < 16.0001 ) )
	
	let $v8 = 8 * -0.5
	assert( $v8 is Float )
	assert( ( -4.0001 < $v8 ) and ( $v8 < -3.9999 ) )
	
	test.assert_throws( function() { 8 * "c"[0] }, TypeError )
	
	let $v10 = 8 * ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = 8 * "apple"
	assert( $v11 is String )
	assert( $v11 == "appleappleappleappleappleappleappleapple" )
	
	let $v12 = 8 * "banana"
	assert( $v12 is String )
	assert( $v12 == "bananabananabananabananabananabananabananabanana" )
	
	test.assert_throws( function() { 8 * repr }, TypeError )
	
	test.assert_throws( function() { 8 * function(){} }, TypeError )
	
	test.assert_throws( function() { 8 * Integer }, TypeError )
	
	test.assert_throws( function() { 8 * Type }, TypeError )
	
	test.assert_throws( function() { 8 * types }, TypeError )
	
	let $v18 = 8 * 3
	assert( $v18 is Integer )
	assert( $v18 == 24 )
	
	let $v19 = 8 * 8
	assert( $v19 is Integer )
	assert( $v19 == 64 )
	
	let $v20 = 8 * 0.3
	assert( $v20 is Float )
	assert( ( 2.3999 < $v20 ) and ( $v20 < 2.4001 ) )
	
	let $v21 = 8 * 0.33333333333
	assert( $v21 is Float )
	assert( ( 2.6666 < $v21 ) and ( $v21 < 2.6668 ) )
	
	let $v22 = 8 * 0.7
	assert( $v22 is Float )
	assert( ( 5.5999 < $v22 ) and ( $v22 < 5.6001 ) )

$ $BURN mul_result_20.burn

mul_result_21.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 0.3 * nothing }, TypeError )
	
	test.assert_throws( function() { 0.3 * true }, TypeError )
	
	test.assert_throws( function() { 0.3 * false }, TypeError )
	
	let $v3 = 0.3 * 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = 0.3 * 2
	assert( $v4 is Float )
	assert( ( 0.5999 < $v4 ) and ( $v4 < 0.6001 ) )
	
	let $v5 = 0.3 * -2
	assert( $v5 is Float )
	assert( ( -0.6001 < $v5 ) and ( $v5 < -0.5999 ) )
	
	let $v6 = 0.3 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0.3 * 2.0
	assert( $v7 is Float )
	assert( ( 0.5999 < $v7 ) and ( $v7 < 0.6001 ) )
	
	let $v8 = 0.3 * -0.5
	assert( $v8 is Float )
	assert( ( -0.1501 < $v8 ) and ( $v8 < -0.1499 ) )
	
	test.assert_throws( function() { 0.3 * "c"[0] }, TypeError )
	
	test.assert_throws( function() { 0.3 * "" }, TypeError )
	
	test.assert_throws( function() { 0.3 * "apple" }, TypeError )
	
	test.assert_throws( function() { 0.3 * "banana" }, TypeError )
	
	test.assert_throws( function() { 0.3 * repr }, TypeError )
	
	test.assert_throws( function() { 0.3 * function(){} }, TypeError )
	
	test.assert_throws( function() { 0.3 * Integer }, TypeError )
	
	test.assert_throws( function() { 0.3 * Type }, TypeError )
	
	test.assert_throws( function() { 0.3 * types }, TypeError )
	
	let $v18 = 0.3 * 3
	assert( $v18 is Float )
	assert( ( 0.8999 < $v18 ) and ( $v18 < 0.9001 ) )
	
	let $v19 = 0.3 * 8
	assert( $v19 is Float )
	assert( ( 2.3999 < $v19 ) and ( $v19 < 2.4001 ) )
	
	let $v20 = 0.3 * 0.3
	assert( $v20 is Float )
	assert( ( 0.0899 < $v20 ) and ( $v20 < 0.0901 ) )
	
	let $v21 = 0.3 * 0.33333333333
	assert( $v21 is Float )
	assert( ( 0.0999 < $v21 ) and ( $v21 < 0.1001 ) )
	
	let $v22 = 0.3 * 0.7
	assert( $v22 is Float )
	assert( ( 0.2099 < $v22 ) and ( $v22 < 0.2101 ) )

$ $BURN mul_result_21.burn

mul_result_22.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 0.33333333333 * nothing }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * true }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * false }, TypeError )
	
	let $v3 = 0.33333333333 * 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = 0.33333333333 * 2
	assert( $v4 is Float )
	assert( ( 0.6666 < $v4 ) and ( $v4 < 0.6668 ) )
	
	let $v5 = 0.33333333333 * -2
	assert( $v5 is Float )
	assert( ( -0.6668 < $v5 ) and ( $v5 < -0.6666 ) )
	
	let $v6 = 0.33333333333 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0.33333333333 * 2.0
	assert( $v7 is Float )
	assert( ( 0.6666 < $v7 ) and ( $v7 < 0.6668 ) )
	
	let $v8 = 0.33333333333 * -0.5
	assert( $v8 is Float )
	assert( ( -0.1668 < $v8 ) and ( $v8 < -0.1666 ) )
	
	test.assert_throws( function() { 0.33333333333 * "c"[0] }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * "" }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * "apple" }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * "banana" }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * repr }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * function(){} }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * Integer }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * Type }, TypeError )
	
	test.assert_throws( function() { 0.33333333333 * types }, TypeError )
	
	let $v18 = 0.33333333333 * 3
	assert( $v18 is Float )
	assert( ( 0.9999 < $v18 ) and ( $v18 < 1.0001 ) )
	
	let $v19 = 0.33333333333 * 8
	assert( $v19 is Float )
	assert( ( 2.6666 < $v19 ) and ( $v19 < 2.6668 ) )
	
	let $v20 = 0.33333333333 * 0.3
	assert( $v20 is Float )
	assert( ( 0.0999 < $v20 ) and ( $v20 < 0.1001 ) )
	
	let $v21 = 0.33333333333 * 0.33333333333
	assert( $v21 is Float )
	assert( ( 0.1110 < $v21 ) and ( $v21 < 0.1112 ) )
	
	let $v22 = 0.33333333333 * 0.7
	assert( $v22 is Float )
	assert( ( 0.2332 < $v22 ) and ( $v22 < 0.2334 ) )

$ $BURN mul_result_22.burn

mul_result_23.burn:
	import test
	import burn.types
	import burn.errors
	
	test.assert_throws( function() { 0.7 * nothing }, TypeError )
	
	test.assert_throws( function() { 0.7 * true }, TypeError )
	
	test.assert_throws( function() { 0.7 * false }, TypeError )
	
	let $v3 = 0.7 * 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = 0.7 * 2
	assert( $v4 is Float )
	assert( ( 1.3999 < $v4 ) and ( $v4 < 1.4001 ) )
	
	let $v5 = 0.7 * -2
	assert( $v5 is Float )
	assert( ( -1.4001 < $v5 ) and ( $v5 < -1.3999 ) )
	
	let $v6 = 0.7 * 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0.7 * 2.0
	assert( $v7 is Float )
	assert( ( 1.3999 < $v7 ) and ( $v7 < 1.4001 ) )
	
	let $v8 = 0.7 * -0.5
	assert( $v8 is Float )
	assert( ( -0.3501 < $v8 ) and ( $v8 < -0.3499 ) )
	
	test.assert_throws( function() { 0.7 * "c"[0] }, TypeError )
	
	test.assert_throws( function() { 0.7 * "" }, TypeError )
	
	test.assert_throws( function() { 0.7 * "apple" }, TypeError )
	
	test.assert_throws( function() { 0.7 * "banana" }, TypeError )
	
	test.assert_throws( function() { 0.7 * repr }, TypeError )
	
	test.assert_throws( function() { 0.7 * function(){} }, TypeError )
	
	test.assert_throws( function() { 0.7 * Integer }, TypeError )
	
	test.assert_throws( function() { 0.7 * Type }, TypeError )
	
	test.assert_throws( function() { 0.7 * types }, TypeError )
	
	let $v18 = 0.7 * 3
	assert( $v18 is Float )
	assert( ( 2.0999 < $v18 ) and ( $v18 < 2.1001 ) )
	
	let $v19 = 0.7 * 8
	assert( $v19 is Float )
	assert( ( 5.5999 < $v19 ) and ( $v19 < 5.6001 ) )
	
	let $v20 = 0.7 * 0.3
	assert( $v20 is Float )
	assert( ( 0.2099 < $v20 ) and ( $v20 < 0.2101 ) )
	
	let $v21 = 0.7 * 0.33333333333
	assert( $v21 is Float )
	assert( ( 0.2332 < $v21 ) and ( $v21 < 0.2334 ) )
	
	let $v22 = 0.7 * 0.7
	assert( $v22 is Float )
	assert( ( 0.4899 < $v22 ) and ( $v22 < 0.4901 ) )

$ $BURN mul_result_23.burn
