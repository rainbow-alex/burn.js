// generated by `etc/generate_operator_test.py lt`

lt_result_1.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { nothing < nothing }, TypeError )
	
	assert.throws( function() { nothing < true }, TypeError )
	
	assert.throws( function() { nothing < false }, TypeError )
	
	assert.throws( function() { nothing < 0 }, TypeError )
	
	assert.throws( function() { nothing < 2 }, TypeError )
	
	assert.throws( function() { nothing < -2 }, TypeError )
	
	assert.throws( function() { nothing < 0.0 }, TypeError )
	
	assert.throws( function() { nothing < 2.0 }, TypeError )
	
	assert.throws( function() { nothing < -0.5 }, TypeError )
	
	assert.throws( function() { nothing < "" }, TypeError )
	
	assert.throws( function() { nothing < "apple" }, TypeError )
	
	assert.throws( function() { nothing < "banana" }, TypeError )
	
	assert.throws( function() { nothing < repr }, TypeError )
	
	assert.throws( function() { nothing < function(){} }, TypeError )
	
	assert.throws( function() { nothing < Integer }, TypeError )
	
	assert.throws( function() { nothing < Type }, TypeError )
	
	assert.throws( function() { nothing < types }, TypeError )

$ $BURN lt_result_1.burn

lt_result_2.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { true < nothing }, TypeError )
	
	assert.throws( function() { true < true }, TypeError )
	
	assert.throws( function() { true < false }, TypeError )
	
	assert.throws( function() { true < 0 }, TypeError )
	
	assert.throws( function() { true < 2 }, TypeError )
	
	assert.throws( function() { true < -2 }, TypeError )
	
	assert.throws( function() { true < 0.0 }, TypeError )
	
	assert.throws( function() { true < 2.0 }, TypeError )
	
	assert.throws( function() { true < -0.5 }, TypeError )
	
	assert.throws( function() { true < "" }, TypeError )
	
	assert.throws( function() { true < "apple" }, TypeError )
	
	assert.throws( function() { true < "banana" }, TypeError )
	
	assert.throws( function() { true < repr }, TypeError )
	
	assert.throws( function() { true < function(){} }, TypeError )
	
	assert.throws( function() { true < Integer }, TypeError )
	
	assert.throws( function() { true < Type }, TypeError )
	
	assert.throws( function() { true < types }, TypeError )

$ $BURN lt_result_2.burn

lt_result_3.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { false < nothing }, TypeError )
	
	assert.throws( function() { false < true }, TypeError )
	
	assert.throws( function() { false < false }, TypeError )
	
	assert.throws( function() { false < 0 }, TypeError )
	
	assert.throws( function() { false < 2 }, TypeError )
	
	assert.throws( function() { false < -2 }, TypeError )
	
	assert.throws( function() { false < 0.0 }, TypeError )
	
	assert.throws( function() { false < 2.0 }, TypeError )
	
	assert.throws( function() { false < -0.5 }, TypeError )
	
	assert.throws( function() { false < "" }, TypeError )
	
	assert.throws( function() { false < "apple" }, TypeError )
	
	assert.throws( function() { false < "banana" }, TypeError )
	
	assert.throws( function() { false < repr }, TypeError )
	
	assert.throws( function() { false < function(){} }, TypeError )
	
	assert.throws( function() { false < Integer }, TypeError )
	
	assert.throws( function() { false < Type }, TypeError )
	
	assert.throws( function() { false < types }, TypeError )

$ $BURN lt_result_3.burn

lt_result_4.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0 < nothing }, TypeError )
	
	assert.throws( function() { 0 < true }, TypeError )
	
	assert.throws( function() { 0 < false }, TypeError )
	
	let $v3 = 0 < 0
	assert( $v3 is Boolean )
	assert( $v3 == false )
	
	let $v4 = 0 < 2
	assert( $v4 is Boolean )
	assert( $v4 == true )
	
	let $v5 = 0 < -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	let $v6 = 0 < 0.0
	assert( $v6 is Boolean )
	assert( $v6 == false )
	
	let $v7 = 0 < 2.0
	assert( $v7 is Boolean )
	assert( $v7 == true )
	
	let $v8 = 0 < -0.5
	assert( $v8 is Boolean )
	assert( $v8 == false )
	
	assert.throws( function() { 0 < "" }, TypeError )
	
	assert.throws( function() { 0 < "apple" }, TypeError )
	
	assert.throws( function() { 0 < "banana" }, TypeError )
	
	assert.throws( function() { 0 < repr }, TypeError )
	
	assert.throws( function() { 0 < function(){} }, TypeError )
	
	assert.throws( function() { 0 < Integer }, TypeError )
	
	assert.throws( function() { 0 < Type }, TypeError )
	
	assert.throws( function() { 0 < types }, TypeError )

$ $BURN lt_result_4.burn

lt_result_5.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2 < nothing }, TypeError )
	
	assert.throws( function() { 2 < true }, TypeError )
	
	assert.throws( function() { 2 < false }, TypeError )
	
	let $v3 = 2 < 0
	assert( $v3 is Boolean )
	assert( $v3 == false )
	
	let $v4 = 2 < 2
	assert( $v4 is Boolean )
	assert( $v4 == false )
	
	let $v5 = 2 < -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	let $v6 = 2 < 0.0
	assert( $v6 is Boolean )
	assert( $v6 == false )
	
	let $v7 = 2 < 2.0
	assert( $v7 is Boolean )
	assert( $v7 == false )
	
	let $v8 = 2 < -0.5
	assert( $v8 is Boolean )
	assert( $v8 == false )
	
	assert.throws( function() { 2 < "" }, TypeError )
	
	assert.throws( function() { 2 < "apple" }, TypeError )
	
	assert.throws( function() { 2 < "banana" }, TypeError )
	
	assert.throws( function() { 2 < repr }, TypeError )
	
	assert.throws( function() { 2 < function(){} }, TypeError )
	
	assert.throws( function() { 2 < Integer }, TypeError )
	
	assert.throws( function() { 2 < Type }, TypeError )
	
	assert.throws( function() { 2 < types }, TypeError )

$ $BURN lt_result_5.burn

lt_result_6.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -2 < nothing }, TypeError )
	
	assert.throws( function() { -2 < true }, TypeError )
	
	assert.throws( function() { -2 < false }, TypeError )
	
	let $v3 = -2 < 0
	assert( $v3 is Boolean )
	assert( $v3 == true )
	
	let $v4 = -2 < 2
	assert( $v4 is Boolean )
	assert( $v4 == true )
	
	let $v5 = -2 < -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	let $v6 = -2 < 0.0
	assert( $v6 is Boolean )
	assert( $v6 == true )
	
	let $v7 = -2 < 2.0
	assert( $v7 is Boolean )
	assert( $v7 == true )
	
	let $v8 = -2 < -0.5
	assert( $v8 is Boolean )
	assert( $v8 == true )
	
	assert.throws( function() { -2 < "" }, TypeError )
	
	assert.throws( function() { -2 < "apple" }, TypeError )
	
	assert.throws( function() { -2 < "banana" }, TypeError )
	
	assert.throws( function() { -2 < repr }, TypeError )
	
	assert.throws( function() { -2 < function(){} }, TypeError )
	
	assert.throws( function() { -2 < Integer }, TypeError )
	
	assert.throws( function() { -2 < Type }, TypeError )
	
	assert.throws( function() { -2 < types }, TypeError )

$ $BURN lt_result_6.burn

lt_result_7.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.0 < nothing }, TypeError )
	
	assert.throws( function() { 0.0 < true }, TypeError )
	
	assert.throws( function() { 0.0 < false }, TypeError )
	
	let $v3 = 0.0 < 0
	assert( $v3 is Boolean )
	assert( $v3 == false )
	
	let $v4 = 0.0 < 2
	assert( $v4 is Boolean )
	assert( $v4 == true )
	
	let $v5 = 0.0 < -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	let $v6 = 0.0 < 0.0
	assert( $v6 is Boolean )
	assert( $v6 == false )
	
	let $v7 = 0.0 < 2.0
	assert( $v7 is Boolean )
	assert( $v7 == true )
	
	let $v8 = 0.0 < -0.5
	assert( $v8 is Boolean )
	assert( $v8 == false )
	
	assert.throws( function() { 0.0 < "" }, TypeError )
	
	assert.throws( function() { 0.0 < "apple" }, TypeError )
	
	assert.throws( function() { 0.0 < "banana" }, TypeError )
	
	assert.throws( function() { 0.0 < repr }, TypeError )
	
	assert.throws( function() { 0.0 < function(){} }, TypeError )
	
	assert.throws( function() { 0.0 < Integer }, TypeError )
	
	assert.throws( function() { 0.0 < Type }, TypeError )
	
	assert.throws( function() { 0.0 < types }, TypeError )

$ $BURN lt_result_7.burn

lt_result_8.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2.0 < nothing }, TypeError )
	
	assert.throws( function() { 2.0 < true }, TypeError )
	
	assert.throws( function() { 2.0 < false }, TypeError )
	
	let $v3 = 2.0 < 0
	assert( $v3 is Boolean )
	assert( $v3 == false )
	
	let $v4 = 2.0 < 2
	assert( $v4 is Boolean )
	assert( $v4 == false )
	
	let $v5 = 2.0 < -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	let $v6 = 2.0 < 0.0
	assert( $v6 is Boolean )
	assert( $v6 == false )
	
	let $v7 = 2.0 < 2.0
	assert( $v7 is Boolean )
	assert( $v7 == false )
	
	let $v8 = 2.0 < -0.5
	assert( $v8 is Boolean )
	assert( $v8 == false )
	
	assert.throws( function() { 2.0 < "" }, TypeError )
	
	assert.throws( function() { 2.0 < "apple" }, TypeError )
	
	assert.throws( function() { 2.0 < "banana" }, TypeError )
	
	assert.throws( function() { 2.0 < repr }, TypeError )
	
	assert.throws( function() { 2.0 < function(){} }, TypeError )
	
	assert.throws( function() { 2.0 < Integer }, TypeError )
	
	assert.throws( function() { 2.0 < Type }, TypeError )
	
	assert.throws( function() { 2.0 < types }, TypeError )

$ $BURN lt_result_8.burn

lt_result_9.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -0.5 < nothing }, TypeError )
	
	assert.throws( function() { -0.5 < true }, TypeError )
	
	assert.throws( function() { -0.5 < false }, TypeError )
	
	let $v3 = -0.5 < 0
	assert( $v3 is Boolean )
	assert( $v3 == true )
	
	let $v4 = -0.5 < 2
	assert( $v4 is Boolean )
	assert( $v4 == true )
	
	let $v5 = -0.5 < -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	let $v6 = -0.5 < 0.0
	assert( $v6 is Boolean )
	assert( $v6 == true )
	
	let $v7 = -0.5 < 2.0
	assert( $v7 is Boolean )
	assert( $v7 == true )
	
	let $v8 = -0.5 < -0.5
	assert( $v8 is Boolean )
	assert( $v8 == false )
	
	assert.throws( function() { -0.5 < "" }, TypeError )
	
	assert.throws( function() { -0.5 < "apple" }, TypeError )
	
	assert.throws( function() { -0.5 < "banana" }, TypeError )
	
	assert.throws( function() { -0.5 < repr }, TypeError )
	
	assert.throws( function() { -0.5 < function(){} }, TypeError )
	
	assert.throws( function() { -0.5 < Integer }, TypeError )
	
	assert.throws( function() { -0.5 < Type }, TypeError )
	
	assert.throws( function() { -0.5 < types }, TypeError )

$ $BURN lt_result_9.burn

lt_result_10.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "" < nothing }, TypeError )
	
	assert.throws( function() { "" < true }, TypeError )
	
	assert.throws( function() { "" < false }, TypeError )
	
	assert.throws( function() { "" < 0 }, TypeError )
	
	assert.throws( function() { "" < 2 }, TypeError )
	
	assert.throws( function() { "" < -2 }, TypeError )
	
	assert.throws( function() { "" < 0.0 }, TypeError )
	
	assert.throws( function() { "" < 2.0 }, TypeError )
	
	assert.throws( function() { "" < -0.5 }, TypeError )
	
	let $v9 = "" < ""
	assert( $v9 is Boolean )
	assert( $v9 == false )
	
	let $v10 = "" < "apple"
	assert( $v10 is Boolean )
	assert( $v10 == true )
	
	let $v11 = "" < "banana"
	assert( $v11 is Boolean )
	assert( $v11 == true )
	
	assert.throws( function() { "" < repr }, TypeError )
	
	assert.throws( function() { "" < function(){} }, TypeError )
	
	assert.throws( function() { "" < Integer }, TypeError )
	
	assert.throws( function() { "" < Type }, TypeError )
	
	assert.throws( function() { "" < types }, TypeError )

$ $BURN lt_result_10.burn

lt_result_11.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "apple" < nothing }, TypeError )
	
	assert.throws( function() { "apple" < true }, TypeError )
	
	assert.throws( function() { "apple" < false }, TypeError )
	
	assert.throws( function() { "apple" < 0 }, TypeError )
	
	assert.throws( function() { "apple" < 2 }, TypeError )
	
	assert.throws( function() { "apple" < -2 }, TypeError )
	
	assert.throws( function() { "apple" < 0.0 }, TypeError )
	
	assert.throws( function() { "apple" < 2.0 }, TypeError )
	
	assert.throws( function() { "apple" < -0.5 }, TypeError )
	
	let $v9 = "apple" < ""
	assert( $v9 is Boolean )
	assert( $v9 == false )
	
	let $v10 = "apple" < "apple"
	assert( $v10 is Boolean )
	assert( $v10 == false )
	
	let $v11 = "apple" < "banana"
	assert( $v11 is Boolean )
	assert( $v11 == true )
	
	assert.throws( function() { "apple" < repr }, TypeError )
	
	assert.throws( function() { "apple" < function(){} }, TypeError )
	
	assert.throws( function() { "apple" < Integer }, TypeError )
	
	assert.throws( function() { "apple" < Type }, TypeError )
	
	assert.throws( function() { "apple" < types }, TypeError )

$ $BURN lt_result_11.burn

lt_result_12.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "banana" < nothing }, TypeError )
	
	assert.throws( function() { "banana" < true }, TypeError )
	
	assert.throws( function() { "banana" < false }, TypeError )
	
	assert.throws( function() { "banana" < 0 }, TypeError )
	
	assert.throws( function() { "banana" < 2 }, TypeError )
	
	assert.throws( function() { "banana" < -2 }, TypeError )
	
	assert.throws( function() { "banana" < 0.0 }, TypeError )
	
	assert.throws( function() { "banana" < 2.0 }, TypeError )
	
	assert.throws( function() { "banana" < -0.5 }, TypeError )
	
	let $v9 = "banana" < ""
	assert( $v9 is Boolean )
	assert( $v9 == false )
	
	let $v10 = "banana" < "apple"
	assert( $v10 is Boolean )
	assert( $v10 == false )
	
	let $v11 = "banana" < "banana"
	assert( $v11 is Boolean )
	assert( $v11 == false )
	
	assert.throws( function() { "banana" < repr }, TypeError )
	
	assert.throws( function() { "banana" < function(){} }, TypeError )
	
	assert.throws( function() { "banana" < Integer }, TypeError )
	
	assert.throws( function() { "banana" < Type }, TypeError )
	
	assert.throws( function() { "banana" < types }, TypeError )

$ $BURN lt_result_12.burn

lt_result_13.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { repr < nothing }, TypeError )
	
	assert.throws( function() { repr < true }, TypeError )
	
	assert.throws( function() { repr < false }, TypeError )
	
	assert.throws( function() { repr < 0 }, TypeError )
	
	assert.throws( function() { repr < 2 }, TypeError )
	
	assert.throws( function() { repr < -2 }, TypeError )
	
	assert.throws( function() { repr < 0.0 }, TypeError )
	
	assert.throws( function() { repr < 2.0 }, TypeError )
	
	assert.throws( function() { repr < -0.5 }, TypeError )
	
	assert.throws( function() { repr < "" }, TypeError )
	
	assert.throws( function() { repr < "apple" }, TypeError )
	
	assert.throws( function() { repr < "banana" }, TypeError )
	
	assert.throws( function() { repr < repr }, TypeError )
	
	assert.throws( function() { repr < function(){} }, TypeError )
	
	assert.throws( function() { repr < Integer }, TypeError )
	
	assert.throws( function() { repr < Type }, TypeError )
	
	assert.throws( function() { repr < types }, TypeError )

$ $BURN lt_result_13.burn

lt_result_14.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { function(){} < nothing }, TypeError )
	
	assert.throws( function() { function(){} < true }, TypeError )
	
	assert.throws( function() { function(){} < false }, TypeError )
	
	assert.throws( function() { function(){} < 0 }, TypeError )
	
	assert.throws( function() { function(){} < 2 }, TypeError )
	
	assert.throws( function() { function(){} < -2 }, TypeError )
	
	assert.throws( function() { function(){} < 0.0 }, TypeError )
	
	assert.throws( function() { function(){} < 2.0 }, TypeError )
	
	assert.throws( function() { function(){} < -0.5 }, TypeError )
	
	assert.throws( function() { function(){} < "" }, TypeError )
	
	assert.throws( function() { function(){} < "apple" }, TypeError )
	
	assert.throws( function() { function(){} < "banana" }, TypeError )
	
	assert.throws( function() { function(){} < repr }, TypeError )
	
	assert.throws( function() { function(){} < function(){} }, TypeError )
	
	assert.throws( function() { function(){} < Integer }, TypeError )
	
	assert.throws( function() { function(){} < Type }, TypeError )
	
	assert.throws( function() { function(){} < types }, TypeError )

$ $BURN lt_result_14.burn

lt_result_15.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Integer < nothing }, TypeError )
	
	assert.throws( function() { Integer < true }, TypeError )
	
	assert.throws( function() { Integer < false }, TypeError )
	
	assert.throws( function() { Integer < 0 }, TypeError )
	
	assert.throws( function() { Integer < 2 }, TypeError )
	
	assert.throws( function() { Integer < -2 }, TypeError )
	
	assert.throws( function() { Integer < 0.0 }, TypeError )
	
	assert.throws( function() { Integer < 2.0 }, TypeError )
	
	assert.throws( function() { Integer < -0.5 }, TypeError )
	
	assert.throws( function() { Integer < "" }, TypeError )
	
	assert.throws( function() { Integer < "apple" }, TypeError )
	
	assert.throws( function() { Integer < "banana" }, TypeError )
	
	assert.throws( function() { Integer < repr }, TypeError )
	
	assert.throws( function() { Integer < function(){} }, TypeError )
	
	assert.throws( function() { Integer < Integer }, TypeError )
	
	assert.throws( function() { Integer < Type }, TypeError )
	
	assert.throws( function() { Integer < types }, TypeError )

$ $BURN lt_result_15.burn

lt_result_16.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Type < nothing }, TypeError )
	
	assert.throws( function() { Type < true }, TypeError )
	
	assert.throws( function() { Type < false }, TypeError )
	
	assert.throws( function() { Type < 0 }, TypeError )
	
	assert.throws( function() { Type < 2 }, TypeError )
	
	assert.throws( function() { Type < -2 }, TypeError )
	
	assert.throws( function() { Type < 0.0 }, TypeError )
	
	assert.throws( function() { Type < 2.0 }, TypeError )
	
	assert.throws( function() { Type < -0.5 }, TypeError )
	
	assert.throws( function() { Type < "" }, TypeError )
	
	assert.throws( function() { Type < "apple" }, TypeError )
	
	assert.throws( function() { Type < "banana" }, TypeError )
	
	assert.throws( function() { Type < repr }, TypeError )
	
	assert.throws( function() { Type < function(){} }, TypeError )
	
	assert.throws( function() { Type < Integer }, TypeError )
	
	assert.throws( function() { Type < Type }, TypeError )
	
	assert.throws( function() { Type < types }, TypeError )

$ $BURN lt_result_16.burn

lt_result_17.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { types < nothing }, TypeError )
	
	assert.throws( function() { types < true }, TypeError )
	
	assert.throws( function() { types < false }, TypeError )
	
	assert.throws( function() { types < 0 }, TypeError )
	
	assert.throws( function() { types < 2 }, TypeError )
	
	assert.throws( function() { types < -2 }, TypeError )
	
	assert.throws( function() { types < 0.0 }, TypeError )
	
	assert.throws( function() { types < 2.0 }, TypeError )
	
	assert.throws( function() { types < -0.5 }, TypeError )
	
	assert.throws( function() { types < "" }, TypeError )
	
	assert.throws( function() { types < "apple" }, TypeError )
	
	assert.throws( function() { types < "banana" }, TypeError )
	
	assert.throws( function() { types < repr }, TypeError )
	
	assert.throws( function() { types < function(){} }, TypeError )
	
	assert.throws( function() { types < Integer }, TypeError )
	
	assert.throws( function() { types < Type }, TypeError )
	
	assert.throws( function() { types < types }, TypeError )

$ $BURN lt_result_17.burn
