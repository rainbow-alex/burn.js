// generated by `etc/generate_operator_test.py result or`

or_result_1.burn:
	import burn.types
	import burn.errors
	
	let $a = nothing or nothing
	assert( $a is Nothing )
	
	let $b = nothing or true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = nothing or false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = nothing or 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = nothing or 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = nothing or -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = nothing or 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = nothing or 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = nothing or -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = nothing or ""
	assert( $j is String )
	
	let $k = nothing or "apple"
	assert( $k is String )
	
	let $l = nothing or "banana"
	assert( $l is String )
	
	let $m = nothing or repr
	assert( $m is Function )
	
	let $n = nothing or function(){}
	assert( $n is Function )
	
	let $o = nothing or Something
	assert( $o is Type )
	
	let $p = nothing or Type
	assert( $p is Type )
	
	let $q = nothing or types
	assert( $q is Module )
	
	let $r = nothing or errors
	assert( $r is Module )

$ $BURN --tolerant or_result_1.burn

or_result_2.burn:
	import burn.types
	import burn.errors
	
	let $a = true or nothing
	assert( $a is Boolean )
	assert( $a == true )
	
	let $b = true or true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = true or false
	assert( $c is Boolean )
	assert( $c == true )
	
	let $d = true or 0
	assert( $d is Boolean )
	assert( $d == true )
	
	let $e = true or 2
	assert( $e is Boolean )
	assert( $e == true )
	
	let $f = true or -2
	assert( $f is Boolean )
	assert( $f == true )
	
	let $g = true or 0.0
	assert( $g is Boolean )
	assert( $g == true )
	
	let $h = true or 2.0
	assert( $h is Boolean )
	assert( $h == true )
	
	let $i = true or -0.5
	assert( $i is Boolean )
	assert( $i == true )
	
	let $j = true or ""
	assert( $j is Boolean )
	assert( $j == true )
	
	let $k = true or "apple"
	assert( $k is Boolean )
	assert( $k == true )
	
	let $l = true or "banana"
	assert( $l is Boolean )
	assert( $l == true )
	
	let $m = true or repr
	assert( $m is Boolean )
	assert( $m == true )
	
	let $n = true or function(){}
	assert( $n is Boolean )
	assert( $n == true )
	
	let $o = true or Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = true or Type
	assert( $p is Boolean )
	assert( $p == true )
	
	let $q = true or types
	assert( $q is Boolean )
	assert( $q == true )
	
	let $r = true or errors
	assert( $r is Boolean )
	assert( $r == true )

$ $BURN --tolerant or_result_2.burn

or_result_3.burn:
	import burn.types
	import burn.errors
	
	let $a = false or nothing
	assert( $a is Nothing )
	
	let $b = false or true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = false or false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = false or 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = false or 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = false or -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = false or 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = false or 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = false or -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = false or ""
	assert( $j is String )
	
	let $k = false or "apple"
	assert( $k is String )
	
	let $l = false or "banana"
	assert( $l is String )
	
	let $m = false or repr
	assert( $m is Function )
	
	let $n = false or function(){}
	assert( $n is Function )
	
	let $o = false or Something
	assert( $o is Type )
	
	let $p = false or Type
	assert( $p is Type )
	
	let $q = false or types
	assert( $q is Module )
	
	let $r = false or errors
	assert( $r is Module )

$ $BURN --tolerant or_result_3.burn

or_result_4.burn:
	import burn.types
	import burn.errors
	
	let $a = 0 or nothing
	assert( $a is Nothing )
	
	let $b = 0 or true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = 0 or false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = 0 or 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 0 or 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = 0 or -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = 0 or 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0 or 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = 0 or -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = 0 or ""
	assert( $j is String )
	
	let $k = 0 or "apple"
	assert( $k is String )
	
	let $l = 0 or "banana"
	assert( $l is String )
	
	let $m = 0 or repr
	assert( $m is Function )
	
	let $n = 0 or function(){}
	assert( $n is Function )
	
	let $o = 0 or Something
	assert( $o is Type )
	
	let $p = 0 or Type
	assert( $p is Type )
	
	let $q = 0 or types
	assert( $q is Module )
	
	let $r = 0 or errors
	assert( $r is Module )

$ $BURN --tolerant or_result_4.burn

or_result_5.burn:
	import burn.types
	import burn.errors
	
	let $a = 2 or nothing
	assert( $a is Integer )
	assert( $a == 2 )
	
	let $b = 2 or true
	assert( $b is Integer )
	assert( $b == 2 )
	
	let $c = 2 or false
	assert( $c is Integer )
	assert( $c == 2 )
	
	let $d = 2 or 0
	assert( $d is Integer )
	assert( $d == 2 )
	
	let $e = 2 or 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = 2 or -2
	assert( $f is Integer )
	assert( $f == 2 )
	
	let $g = 2 or 0.0
	assert( $g is Integer )
	assert( $g == 2 )
	
	let $h = 2 or 2.0
	assert( $h is Integer )
	assert( $h == 2 )
	
	let $i = 2 or -0.5
	assert( $i is Integer )
	assert( $i == 2 )
	
	let $j = 2 or ""
	assert( $j is Integer )
	assert( $j == 2 )
	
	let $k = 2 or "apple"
	assert( $k is Integer )
	assert( $k == 2 )
	
	let $l = 2 or "banana"
	assert( $l is Integer )
	assert( $l == 2 )
	
	let $m = 2 or repr
	assert( $m is Integer )
	assert( $m == 2 )
	
	let $n = 2 or function(){}
	assert( $n is Integer )
	assert( $n == 2 )
	
	let $o = 2 or Something
	assert( $o is Integer )
	assert( $o == 2 )
	
	let $p = 2 or Type
	assert( $p is Integer )
	assert( $p == 2 )
	
	let $q = 2 or types
	assert( $q is Integer )
	assert( $q == 2 )
	
	let $r = 2 or errors
	assert( $r is Integer )
	assert( $r == 2 )

$ $BURN --tolerant or_result_5.burn

or_result_6.burn:
	import burn.types
	import burn.errors
	
	let $a = -2 or nothing
	assert( $a is Integer )
	assert( $a == -2 )
	
	let $b = -2 or true
	assert( $b is Integer )
	assert( $b == -2 )
	
	let $c = -2 or false
	assert( $c is Integer )
	assert( $c == -2 )
	
	let $d = -2 or 0
	assert( $d is Integer )
	assert( $d == -2 )
	
	let $e = -2 or 2
	assert( $e is Integer )
	assert( $e == -2 )
	
	let $f = -2 or -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = -2 or 0.0
	assert( $g is Integer )
	assert( $g == -2 )
	
	let $h = -2 or 2.0
	assert( $h is Integer )
	assert( $h == -2 )
	
	let $i = -2 or -0.5
	assert( $i is Integer )
	assert( $i == -2 )
	
	let $j = -2 or ""
	assert( $j is Integer )
	assert( $j == -2 )
	
	let $k = -2 or "apple"
	assert( $k is Integer )
	assert( $k == -2 )
	
	let $l = -2 or "banana"
	assert( $l is Integer )
	assert( $l == -2 )
	
	let $m = -2 or repr
	assert( $m is Integer )
	assert( $m == -2 )
	
	let $n = -2 or function(){}
	assert( $n is Integer )
	assert( $n == -2 )
	
	let $o = -2 or Something
	assert( $o is Integer )
	assert( $o == -2 )
	
	let $p = -2 or Type
	assert( $p is Integer )
	assert( $p == -2 )
	
	let $q = -2 or types
	assert( $q is Integer )
	assert( $q == -2 )
	
	let $r = -2 or errors
	assert( $r is Integer )
	assert( $r == -2 )

$ $BURN --tolerant or_result_6.burn

or_result_7.burn:
	import burn.types
	import burn.errors
	
	let $a = 0.0 or nothing
	assert( $a is Nothing )
	
	let $b = 0.0 or true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = 0.0 or false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = 0.0 or 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 0.0 or 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = 0.0 or -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = 0.0 or 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0.0 or 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = 0.0 or -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = 0.0 or ""
	assert( $j is String )
	
	let $k = 0.0 or "apple"
	assert( $k is String )
	
	let $l = 0.0 or "banana"
	assert( $l is String )
	
	let $m = 0.0 or repr
	assert( $m is Function )
	
	let $n = 0.0 or function(){}
	assert( $n is Function )
	
	let $o = 0.0 or Something
	assert( $o is Type )
	
	let $p = 0.0 or Type
	assert( $p is Type )
	
	let $q = 0.0 or types
	assert( $q is Module )
	
	let $r = 0.0 or errors
	assert( $r is Module )

$ $BURN --tolerant or_result_7.burn

or_result_8.burn:
	import burn.types
	import burn.errors
	
	let $a = 2.0 or nothing
	assert( $a is Float )
	assert( ( 1.9999 < $a ) and ( $a < 2.0001 ) )
	
	let $b = 2.0 or true
	assert( $b is Float )
	assert( ( 1.9999 < $b ) and ( $b < 2.0001 ) )
	
	let $c = 2.0 or false
	assert( $c is Float )
	assert( ( 1.9999 < $c ) and ( $c < 2.0001 ) )
	
	let $d = 2.0 or 0
	assert( $d is Float )
	assert( ( 1.9999 < $d ) and ( $d < 2.0001 ) )
	
	let $e = 2.0 or 2
	assert( $e is Float )
	assert( ( 1.9999 < $e ) and ( $e < 2.0001 ) )
	
	let $f = 2.0 or -2
	assert( $f is Float )
	assert( ( 1.9999 < $f ) and ( $f < 2.0001 ) )
	
	let $g = 2.0 or 0.0
	assert( $g is Float )
	assert( ( 1.9999 < $g ) and ( $g < 2.0001 ) )
	
	let $h = 2.0 or 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = 2.0 or -0.5
	assert( $i is Float )
	assert( ( 1.9999 < $i ) and ( $i < 2.0001 ) )
	
	let $j = 2.0 or ""
	assert( $j is Float )
	assert( ( 1.9999 < $j ) and ( $j < 2.0001 ) )
	
	let $k = 2.0 or "apple"
	assert( $k is Float )
	assert( ( 1.9999 < $k ) and ( $k < 2.0001 ) )
	
	let $l = 2.0 or "banana"
	assert( $l is Float )
	assert( ( 1.9999 < $l ) and ( $l < 2.0001 ) )
	
	let $m = 2.0 or repr
	assert( $m is Float )
	assert( ( 1.9999 < $m ) and ( $m < 2.0001 ) )
	
	let $n = 2.0 or function(){}
	assert( $n is Float )
	assert( ( 1.9999 < $n ) and ( $n < 2.0001 ) )
	
	let $o = 2.0 or Something
	assert( $o is Float )
	assert( ( 1.9999 < $o ) and ( $o < 2.0001 ) )
	
	let $p = 2.0 or Type
	assert( $p is Float )
	assert( ( 1.9999 < $p ) and ( $p < 2.0001 ) )
	
	let $q = 2.0 or types
	assert( $q is Float )
	assert( ( 1.9999 < $q ) and ( $q < 2.0001 ) )
	
	let $r = 2.0 or errors
	assert( $r is Float )
	assert( ( 1.9999 < $r ) and ( $r < 2.0001 ) )

$ $BURN --tolerant or_result_8.burn

or_result_9.burn:
	import burn.types
	import burn.errors
	
	let $a = -0.5 or nothing
	assert( $a is Float )
	assert( ( -0.5001 < $a ) and ( $a < -0.4999 ) )
	
	let $b = -0.5 or true
	assert( $b is Float )
	assert( ( -0.5001 < $b ) and ( $b < -0.4999 ) )
	
	let $c = -0.5 or false
	assert( $c is Float )
	assert( ( -0.5001 < $c ) and ( $c < -0.4999 ) )
	
	let $d = -0.5 or 0
	assert( $d is Float )
	assert( ( -0.5001 < $d ) and ( $d < -0.4999 ) )
	
	let $e = -0.5 or 2
	assert( $e is Float )
	assert( ( -0.5001 < $e ) and ( $e < -0.4999 ) )
	
	let $f = -0.5 or -2
	assert( $f is Float )
	assert( ( -0.5001 < $f ) and ( $f < -0.4999 ) )
	
	let $g = -0.5 or 0.0
	assert( $g is Float )
	assert( ( -0.5001 < $g ) and ( $g < -0.4999 ) )
	
	let $h = -0.5 or 2.0
	assert( $h is Float )
	assert( ( -0.5001 < $h ) and ( $h < -0.4999 ) )
	
	let $i = -0.5 or -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = -0.5 or ""
	assert( $j is Float )
	assert( ( -0.5001 < $j ) and ( $j < -0.4999 ) )
	
	let $k = -0.5 or "apple"
	assert( $k is Float )
	assert( ( -0.5001 < $k ) and ( $k < -0.4999 ) )
	
	let $l = -0.5 or "banana"
	assert( $l is Float )
	assert( ( -0.5001 < $l ) and ( $l < -0.4999 ) )
	
	let $m = -0.5 or repr
	assert( $m is Float )
	assert( ( -0.5001 < $m ) and ( $m < -0.4999 ) )
	
	let $n = -0.5 or function(){}
	assert( $n is Float )
	assert( ( -0.5001 < $n ) and ( $n < -0.4999 ) )
	
	let $o = -0.5 or Something
	assert( $o is Float )
	assert( ( -0.5001 < $o ) and ( $o < -0.4999 ) )
	
	let $p = -0.5 or Type
	assert( $p is Float )
	assert( ( -0.5001 < $p ) and ( $p < -0.4999 ) )
	
	let $q = -0.5 or types
	assert( $q is Float )
	assert( ( -0.5001 < $q ) and ( $q < -0.4999 ) )
	
	let $r = -0.5 or errors
	assert( $r is Float )
	assert( ( -0.5001 < $r ) and ( $r < -0.4999 ) )

$ $BURN --tolerant or_result_9.burn

or_result_10.burn:
	import burn.types
	import burn.errors
	
	let $a = "" or nothing
	assert( $a is Nothing )
	
	let $b = "" or true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = "" or false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = "" or 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = "" or 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = "" or -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = "" or 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = "" or 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = "" or -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = "" or ""
	assert( $j is String )
	
	let $k = "" or "apple"
	assert( $k is String )
	
	let $l = "" or "banana"
	assert( $l is String )
	
	let $m = "" or repr
	assert( $m is Function )
	
	let $n = "" or function(){}
	assert( $n is Function )
	
	let $o = "" or Something
	assert( $o is Type )
	
	let $p = "" or Type
	assert( $p is Type )
	
	let $q = "" or types
	assert( $q is Module )
	
	let $r = "" or errors
	assert( $r is Module )

$ $BURN --tolerant or_result_10.burn

or_result_11.burn:
	import burn.types
	import burn.errors
	
	let $a = "apple" or nothing
	assert( $a is String )
	
	let $b = "apple" or true
	assert( $b is String )
	
	let $c = "apple" or false
	assert( $c is String )
	
	let $d = "apple" or 0
	assert( $d is String )
	
	let $e = "apple" or 2
	assert( $e is String )
	
	let $f = "apple" or -2
	assert( $f is String )
	
	let $g = "apple" or 0.0
	assert( $g is String )
	
	let $h = "apple" or 2.0
	assert( $h is String )
	
	let $i = "apple" or -0.5
	assert( $i is String )
	
	let $j = "apple" or ""
	assert( $j is String )
	
	let $k = "apple" or "apple"
	assert( $k is String )
	
	let $l = "apple" or "banana"
	assert( $l is String )
	
	let $m = "apple" or repr
	assert( $m is String )
	
	let $n = "apple" or function(){}
	assert( $n is String )
	
	let $o = "apple" or Something
	assert( $o is String )
	
	let $p = "apple" or Type
	assert( $p is String )
	
	let $q = "apple" or types
	assert( $q is String )
	
	let $r = "apple" or errors
	assert( $r is String )

$ $BURN --tolerant or_result_11.burn

or_result_12.burn:
	import burn.types
	import burn.errors
	
	let $a = "banana" or nothing
	assert( $a is String )
	
	let $b = "banana" or true
	assert( $b is String )
	
	let $c = "banana" or false
	assert( $c is String )
	
	let $d = "banana" or 0
	assert( $d is String )
	
	let $e = "banana" or 2
	assert( $e is String )
	
	let $f = "banana" or -2
	assert( $f is String )
	
	let $g = "banana" or 0.0
	assert( $g is String )
	
	let $h = "banana" or 2.0
	assert( $h is String )
	
	let $i = "banana" or -0.5
	assert( $i is String )
	
	let $j = "banana" or ""
	assert( $j is String )
	
	let $k = "banana" or "apple"
	assert( $k is String )
	
	let $l = "banana" or "banana"
	assert( $l is String )
	
	let $m = "banana" or repr
	assert( $m is String )
	
	let $n = "banana" or function(){}
	assert( $n is String )
	
	let $o = "banana" or Something
	assert( $o is String )
	
	let $p = "banana" or Type
	assert( $p is String )
	
	let $q = "banana" or types
	assert( $q is String )
	
	let $r = "banana" or errors
	assert( $r is String )

$ $BURN --tolerant or_result_12.burn

or_result_13.burn:
	import burn.types
	import burn.errors
	
	let $a = repr or nothing
	assert( $a is Function )
	
	let $b = repr or true
	assert( $b is Function )
	
	let $c = repr or false
	assert( $c is Function )
	
	let $d = repr or 0
	assert( $d is Function )
	
	let $e = repr or 2
	assert( $e is Function )
	
	let $f = repr or -2
	assert( $f is Function )
	
	let $g = repr or 0.0
	assert( $g is Function )
	
	let $h = repr or 2.0
	assert( $h is Function )
	
	let $i = repr or -0.5
	assert( $i is Function )
	
	let $j = repr or ""
	assert( $j is Function )
	
	let $k = repr or "apple"
	assert( $k is Function )
	
	let $l = repr or "banana"
	assert( $l is Function )
	
	let $m = repr or repr
	assert( $m is Function )
	
	let $n = repr or function(){}
	assert( $n is Function )
	
	let $o = repr or Something
	assert( $o is Function )
	
	let $p = repr or Type
	assert( $p is Function )
	
	let $q = repr or types
	assert( $q is Function )
	
	let $r = repr or errors
	assert( $r is Function )

$ $BURN --tolerant or_result_13.burn

or_result_14.burn:
	import burn.types
	import burn.errors
	
	let $a = function(){} or nothing
	assert( $a is Function )
	
	let $b = function(){} or true
	assert( $b is Function )
	
	let $c = function(){} or false
	assert( $c is Function )
	
	let $d = function(){} or 0
	assert( $d is Function )
	
	let $e = function(){} or 2
	assert( $e is Function )
	
	let $f = function(){} or -2
	assert( $f is Function )
	
	let $g = function(){} or 0.0
	assert( $g is Function )
	
	let $h = function(){} or 2.0
	assert( $h is Function )
	
	let $i = function(){} or -0.5
	assert( $i is Function )
	
	let $j = function(){} or ""
	assert( $j is Function )
	
	let $k = function(){} or "apple"
	assert( $k is Function )
	
	let $l = function(){} or "banana"
	assert( $l is Function )
	
	let $m = function(){} or repr
	assert( $m is Function )
	
	let $n = function(){} or function(){}
	assert( $n is Function )
	
	let $o = function(){} or Something
	assert( $o is Function )
	
	let $p = function(){} or Type
	assert( $p is Function )
	
	let $q = function(){} or types
	assert( $q is Function )
	
	let $r = function(){} or errors
	assert( $r is Function )

$ $BURN --tolerant or_result_14.burn

or_result_15.burn:
	import burn.types
	import burn.errors
	
	let $a = Something or nothing
	assert( $a is Type )
	
	let $b = Something or true
	assert( $b is Type )
	
	let $c = Something or false
	assert( $c is Type )
	
	let $d = Something or 0
	assert( $d is Type )
	
	let $e = Something or 2
	assert( $e is Type )
	
	let $f = Something or -2
	assert( $f is Type )
	
	let $g = Something or 0.0
	assert( $g is Type )
	
	let $h = Something or 2.0
	assert( $h is Type )
	
	let $i = Something or -0.5
	assert( $i is Type )
	
	let $j = Something or ""
	assert( $j is Type )
	
	let $k = Something or "apple"
	assert( $k is Type )
	
	let $l = Something or "banana"
	assert( $l is Type )
	
	let $m = Something or repr
	assert( $m is Type )
	
	let $n = Something or function(){}
	assert( $n is Type )
	
	let $o = Something or Something
	assert( $o is Type )
	
	let $p = Something or Type
	assert( $p is Type )
	
	let $q = Something or types
	assert( $q is Type )
	
	let $r = Something or errors
	assert( $r is Type )

$ $BURN --tolerant or_result_15.burn

or_result_16.burn:
	import burn.types
	import burn.errors
	
	let $a = Type or nothing
	assert( $a is Type )
	
	let $b = Type or true
	assert( $b is Type )
	
	let $c = Type or false
	assert( $c is Type )
	
	let $d = Type or 0
	assert( $d is Type )
	
	let $e = Type or 2
	assert( $e is Type )
	
	let $f = Type or -2
	assert( $f is Type )
	
	let $g = Type or 0.0
	assert( $g is Type )
	
	let $h = Type or 2.0
	assert( $h is Type )
	
	let $i = Type or -0.5
	assert( $i is Type )
	
	let $j = Type or ""
	assert( $j is Type )
	
	let $k = Type or "apple"
	assert( $k is Type )
	
	let $l = Type or "banana"
	assert( $l is Type )
	
	let $m = Type or repr
	assert( $m is Type )
	
	let $n = Type or function(){}
	assert( $n is Type )
	
	let $o = Type or Something
	assert( $o is Type )
	
	let $p = Type or Type
	assert( $p is Type )
	
	let $q = Type or types
	assert( $q is Type )
	
	let $r = Type or errors
	assert( $r is Type )

$ $BURN --tolerant or_result_16.burn

or_result_17.burn:
	import burn.types
	import burn.errors
	
	let $a = types or nothing
	assert( $a is Module )
	
	let $b = types or true
	assert( $b is Module )
	
	let $c = types or false
	assert( $c is Module )
	
	let $d = types or 0
	assert( $d is Module )
	
	let $e = types or 2
	assert( $e is Module )
	
	let $f = types or -2
	assert( $f is Module )
	
	let $g = types or 0.0
	assert( $g is Module )
	
	let $h = types or 2.0
	assert( $h is Module )
	
	let $i = types or -0.5
	assert( $i is Module )
	
	let $j = types or ""
	assert( $j is Module )
	
	let $k = types or "apple"
	assert( $k is Module )
	
	let $l = types or "banana"
	assert( $l is Module )
	
	let $m = types or repr
	assert( $m is Module )
	
	let $n = types or function(){}
	assert( $n is Module )
	
	let $o = types or Something
	assert( $o is Module )
	
	let $p = types or Type
	assert( $p is Module )
	
	let $q = types or types
	assert( $q is Module )
	
	let $r = types or errors
	assert( $r is Module )

$ $BURN --tolerant or_result_17.burn

or_result_18.burn:
	import burn.types
	import burn.errors
	
	let $a = errors or nothing
	assert( $a is Module )
	
	let $b = errors or true
	assert( $b is Module )
	
	let $c = errors or false
	assert( $c is Module )
	
	let $d = errors or 0
	assert( $d is Module )
	
	let $e = errors or 2
	assert( $e is Module )
	
	let $f = errors or -2
	assert( $f is Module )
	
	let $g = errors or 0.0
	assert( $g is Module )
	
	let $h = errors or 2.0
	assert( $h is Module )
	
	let $i = errors or -0.5
	assert( $i is Module )
	
	let $j = errors or ""
	assert( $j is Module )
	
	let $k = errors or "apple"
	assert( $k is Module )
	
	let $l = errors or "banana"
	assert( $l is Module )
	
	let $m = errors or repr
	assert( $m is Module )
	
	let $n = errors or function(){}
	assert( $n is Module )
	
	let $o = errors or Something
	assert( $o is Module )
	
	let $p = errors or Type
	assert( $p is Module )
	
	let $q = errors or types
	assert( $q is Module )
	
	let $r = errors or errors
	assert( $r is Module )

$ $BURN --tolerant or_result_18.burn
