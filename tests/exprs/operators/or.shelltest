// generated by `etc/generate_operator_test.py or`

or_result_1.burn:
	import burn.types
	import burn.errors
	
	let $v0 = nothing or nothing
	assert( $v0 is Nothing )
	
	let $v1 = nothing or true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = nothing or false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = nothing or 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = nothing or 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = nothing or -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = nothing or 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = nothing or 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = nothing or -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = nothing or ""
	assert( $v9 is String )
	
	let $v10 = nothing or "apple"
	assert( $v10 is String )
	
	let $v11 = nothing or "banana"
	assert( $v11 is String )
	
	let $v12 = nothing or repr
	assert( $v12 is Function )
	
	let $v13 = nothing or function(){}
	assert( $v13 is Function )
	
	let $v14 = nothing or Something
	assert( $v14 is Type )
	
	let $v15 = nothing or Type
	assert( $v15 is Type )
	
	let $v16 = nothing or types
	assert( $v16 is Module )
	
	let $v17 = nothing or errors
	assert( $v17 is Module )

$ $BURN --tolerant or_result_1.burn

or_result_2.burn:
	import burn.types
	import burn.errors
	
	let $v0 = true or nothing
	assert( $v0 is Boolean )
	assert( $v0 == true )
	
	let $v1 = true or true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = true or false
	assert( $v2 is Boolean )
	assert( $v2 == true )
	
	let $v3 = true or 0
	assert( $v3 is Boolean )
	assert( $v3 == true )
	
	let $v4 = true or 2
	assert( $v4 is Boolean )
	assert( $v4 == true )
	
	let $v5 = true or -2
	assert( $v5 is Boolean )
	assert( $v5 == true )
	
	let $v6 = true or 0.0
	assert( $v6 is Boolean )
	assert( $v6 == true )
	
	let $v7 = true or 2.0
	assert( $v7 is Boolean )
	assert( $v7 == true )
	
	let $v8 = true or -0.5
	assert( $v8 is Boolean )
	assert( $v8 == true )
	
	let $v9 = true or ""
	assert( $v9 is Boolean )
	assert( $v9 == true )
	
	let $v10 = true or "apple"
	assert( $v10 is Boolean )
	assert( $v10 == true )
	
	let $v11 = true or "banana"
	assert( $v11 is Boolean )
	assert( $v11 == true )
	
	let $v12 = true or repr
	assert( $v12 is Boolean )
	assert( $v12 == true )
	
	let $v13 = true or function(){}
	assert( $v13 is Boolean )
	assert( $v13 == true )
	
	let $v14 = true or Something
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	let $v15 = true or Type
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	let $v16 = true or types
	assert( $v16 is Boolean )
	assert( $v16 == true )
	
	let $v17 = true or errors
	assert( $v17 is Boolean )
	assert( $v17 == true )

$ $BURN --tolerant or_result_2.burn

or_result_3.burn:
	import burn.types
	import burn.errors
	
	let $v0 = false or nothing
	assert( $v0 is Nothing )
	
	let $v1 = false or true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = false or false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = false or 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = false or 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = false or -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = false or 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = false or 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = false or -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = false or ""
	assert( $v9 is String )
	
	let $v10 = false or "apple"
	assert( $v10 is String )
	
	let $v11 = false or "banana"
	assert( $v11 is String )
	
	let $v12 = false or repr
	assert( $v12 is Function )
	
	let $v13 = false or function(){}
	assert( $v13 is Function )
	
	let $v14 = false or Something
	assert( $v14 is Type )
	
	let $v15 = false or Type
	assert( $v15 is Type )
	
	let $v16 = false or types
	assert( $v16 is Module )
	
	let $v17 = false or errors
	assert( $v17 is Module )

$ $BURN --tolerant or_result_3.burn

or_result_4.burn:
	import burn.types
	import burn.errors
	
	let $v0 = 0 or nothing
	assert( $v0 is Nothing )
	
	let $v1 = 0 or true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = 0 or false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = 0 or 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 0 or 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = 0 or -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = 0 or 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0 or 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = 0 or -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = 0 or ""
	assert( $v9 is String )
	
	let $v10 = 0 or "apple"
	assert( $v10 is String )
	
	let $v11 = 0 or "banana"
	assert( $v11 is String )
	
	let $v12 = 0 or repr
	assert( $v12 is Function )
	
	let $v13 = 0 or function(){}
	assert( $v13 is Function )
	
	let $v14 = 0 or Something
	assert( $v14 is Type )
	
	let $v15 = 0 or Type
	assert( $v15 is Type )
	
	let $v16 = 0 or types
	assert( $v16 is Module )
	
	let $v17 = 0 or errors
	assert( $v17 is Module )

$ $BURN --tolerant or_result_4.burn

or_result_5.burn:
	import burn.types
	import burn.errors
	
	let $v0 = 2 or nothing
	assert( $v0 is Integer )
	assert( $v0 == 2 )
	
	let $v1 = 2 or true
	assert( $v1 is Integer )
	assert( $v1 == 2 )
	
	let $v2 = 2 or false
	assert( $v2 is Integer )
	assert( $v2 == 2 )
	
	let $v3 = 2 or 0
	assert( $v3 is Integer )
	assert( $v3 == 2 )
	
	let $v4 = 2 or 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = 2 or -2
	assert( $v5 is Integer )
	assert( $v5 == 2 )
	
	let $v6 = 2 or 0.0
	assert( $v6 is Integer )
	assert( $v6 == 2 )
	
	let $v7 = 2 or 2.0
	assert( $v7 is Integer )
	assert( $v7 == 2 )
	
	let $v8 = 2 or -0.5
	assert( $v8 is Integer )
	assert( $v8 == 2 )
	
	let $v9 = 2 or ""
	assert( $v9 is Integer )
	assert( $v9 == 2 )
	
	let $v10 = 2 or "apple"
	assert( $v10 is Integer )
	assert( $v10 == 2 )
	
	let $v11 = 2 or "banana"
	assert( $v11 is Integer )
	assert( $v11 == 2 )
	
	let $v12 = 2 or repr
	assert( $v12 is Integer )
	assert( $v12 == 2 )
	
	let $v13 = 2 or function(){}
	assert( $v13 is Integer )
	assert( $v13 == 2 )
	
	let $v14 = 2 or Something
	assert( $v14 is Integer )
	assert( $v14 == 2 )
	
	let $v15 = 2 or Type
	assert( $v15 is Integer )
	assert( $v15 == 2 )
	
	let $v16 = 2 or types
	assert( $v16 is Integer )
	assert( $v16 == 2 )
	
	let $v17 = 2 or errors
	assert( $v17 is Integer )
	assert( $v17 == 2 )

$ $BURN --tolerant or_result_5.burn

or_result_6.burn:
	import burn.types
	import burn.errors
	
	let $v0 = -2 or nothing
	assert( $v0 is Integer )
	assert( $v0 == -2 )
	
	let $v1 = -2 or true
	assert( $v1 is Integer )
	assert( $v1 == -2 )
	
	let $v2 = -2 or false
	assert( $v2 is Integer )
	assert( $v2 == -2 )
	
	let $v3 = -2 or 0
	assert( $v3 is Integer )
	assert( $v3 == -2 )
	
	let $v4 = -2 or 2
	assert( $v4 is Integer )
	assert( $v4 == -2 )
	
	let $v5 = -2 or -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = -2 or 0.0
	assert( $v6 is Integer )
	assert( $v6 == -2 )
	
	let $v7 = -2 or 2.0
	assert( $v7 is Integer )
	assert( $v7 == -2 )
	
	let $v8 = -2 or -0.5
	assert( $v8 is Integer )
	assert( $v8 == -2 )
	
	let $v9 = -2 or ""
	assert( $v9 is Integer )
	assert( $v9 == -2 )
	
	let $v10 = -2 or "apple"
	assert( $v10 is Integer )
	assert( $v10 == -2 )
	
	let $v11 = -2 or "banana"
	assert( $v11 is Integer )
	assert( $v11 == -2 )
	
	let $v12 = -2 or repr
	assert( $v12 is Integer )
	assert( $v12 == -2 )
	
	let $v13 = -2 or function(){}
	assert( $v13 is Integer )
	assert( $v13 == -2 )
	
	let $v14 = -2 or Something
	assert( $v14 is Integer )
	assert( $v14 == -2 )
	
	let $v15 = -2 or Type
	assert( $v15 is Integer )
	assert( $v15 == -2 )
	
	let $v16 = -2 or types
	assert( $v16 is Integer )
	assert( $v16 == -2 )
	
	let $v17 = -2 or errors
	assert( $v17 is Integer )
	assert( $v17 == -2 )

$ $BURN --tolerant or_result_6.burn

or_result_7.burn:
	import burn.types
	import burn.errors
	
	let $v0 = 0.0 or nothing
	assert( $v0 is Nothing )
	
	let $v1 = 0.0 or true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = 0.0 or false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = 0.0 or 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 0.0 or 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = 0.0 or -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = 0.0 or 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0.0 or 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = 0.0 or -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = 0.0 or ""
	assert( $v9 is String )
	
	let $v10 = 0.0 or "apple"
	assert( $v10 is String )
	
	let $v11 = 0.0 or "banana"
	assert( $v11 is String )
	
	let $v12 = 0.0 or repr
	assert( $v12 is Function )
	
	let $v13 = 0.0 or function(){}
	assert( $v13 is Function )
	
	let $v14 = 0.0 or Something
	assert( $v14 is Type )
	
	let $v15 = 0.0 or Type
	assert( $v15 is Type )
	
	let $v16 = 0.0 or types
	assert( $v16 is Module )
	
	let $v17 = 0.0 or errors
	assert( $v17 is Module )

$ $BURN --tolerant or_result_7.burn

or_result_8.burn:
	import burn.types
	import burn.errors
	
	let $v0 = 2.0 or nothing
	assert( $v0 is Float )
	assert( ( 1.9999 < $v0 ) and ( $v0 < 2.0001 ) )
	
	let $v1 = 2.0 or true
	assert( $v1 is Float )
	assert( ( 1.9999 < $v1 ) and ( $v1 < 2.0001 ) )
	
	let $v2 = 2.0 or false
	assert( $v2 is Float )
	assert( ( 1.9999 < $v2 ) and ( $v2 < 2.0001 ) )
	
	let $v3 = 2.0 or 0
	assert( $v3 is Float )
	assert( ( 1.9999 < $v3 ) and ( $v3 < 2.0001 ) )
	
	let $v4 = 2.0 or 2
	assert( $v4 is Float )
	assert( ( 1.9999 < $v4 ) and ( $v4 < 2.0001 ) )
	
	let $v5 = 2.0 or -2
	assert( $v5 is Float )
	assert( ( 1.9999 < $v5 ) and ( $v5 < 2.0001 ) )
	
	let $v6 = 2.0 or 0.0
	assert( $v6 is Float )
	assert( ( 1.9999 < $v6 ) and ( $v6 < 2.0001 ) )
	
	let $v7 = 2.0 or 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = 2.0 or -0.5
	assert( $v8 is Float )
	assert( ( 1.9999 < $v8 ) and ( $v8 < 2.0001 ) )
	
	let $v9 = 2.0 or ""
	assert( $v9 is Float )
	assert( ( 1.9999 < $v9 ) and ( $v9 < 2.0001 ) )
	
	let $v10 = 2.0 or "apple"
	assert( $v10 is Float )
	assert( ( 1.9999 < $v10 ) and ( $v10 < 2.0001 ) )
	
	let $v11 = 2.0 or "banana"
	assert( $v11 is Float )
	assert( ( 1.9999 < $v11 ) and ( $v11 < 2.0001 ) )
	
	let $v12 = 2.0 or repr
	assert( $v12 is Float )
	assert( ( 1.9999 < $v12 ) and ( $v12 < 2.0001 ) )
	
	let $v13 = 2.0 or function(){}
	assert( $v13 is Float )
	assert( ( 1.9999 < $v13 ) and ( $v13 < 2.0001 ) )
	
	let $v14 = 2.0 or Something
	assert( $v14 is Float )
	assert( ( 1.9999 < $v14 ) and ( $v14 < 2.0001 ) )
	
	let $v15 = 2.0 or Type
	assert( $v15 is Float )
	assert( ( 1.9999 < $v15 ) and ( $v15 < 2.0001 ) )
	
	let $v16 = 2.0 or types
	assert( $v16 is Float )
	assert( ( 1.9999 < $v16 ) and ( $v16 < 2.0001 ) )
	
	let $v17 = 2.0 or errors
	assert( $v17 is Float )
	assert( ( 1.9999 < $v17 ) and ( $v17 < 2.0001 ) )

$ $BURN --tolerant or_result_8.burn

or_result_9.burn:
	import burn.types
	import burn.errors
	
	let $v0 = -0.5 or nothing
	assert( $v0 is Float )
	assert( ( -0.5001 < $v0 ) and ( $v0 < -0.4999 ) )
	
	let $v1 = -0.5 or true
	assert( $v1 is Float )
	assert( ( -0.5001 < $v1 ) and ( $v1 < -0.4999 ) )
	
	let $v2 = -0.5 or false
	assert( $v2 is Float )
	assert( ( -0.5001 < $v2 ) and ( $v2 < -0.4999 ) )
	
	let $v3 = -0.5 or 0
	assert( $v3 is Float )
	assert( ( -0.5001 < $v3 ) and ( $v3 < -0.4999 ) )
	
	let $v4 = -0.5 or 2
	assert( $v4 is Float )
	assert( ( -0.5001 < $v4 ) and ( $v4 < -0.4999 ) )
	
	let $v5 = -0.5 or -2
	assert( $v5 is Float )
	assert( ( -0.5001 < $v5 ) and ( $v5 < -0.4999 ) )
	
	let $v6 = -0.5 or 0.0
	assert( $v6 is Float )
	assert( ( -0.5001 < $v6 ) and ( $v6 < -0.4999 ) )
	
	let $v7 = -0.5 or 2.0
	assert( $v7 is Float )
	assert( ( -0.5001 < $v7 ) and ( $v7 < -0.4999 ) )
	
	let $v8 = -0.5 or -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = -0.5 or ""
	assert( $v9 is Float )
	assert( ( -0.5001 < $v9 ) and ( $v9 < -0.4999 ) )
	
	let $v10 = -0.5 or "apple"
	assert( $v10 is Float )
	assert( ( -0.5001 < $v10 ) and ( $v10 < -0.4999 ) )
	
	let $v11 = -0.5 or "banana"
	assert( $v11 is Float )
	assert( ( -0.5001 < $v11 ) and ( $v11 < -0.4999 ) )
	
	let $v12 = -0.5 or repr
	assert( $v12 is Float )
	assert( ( -0.5001 < $v12 ) and ( $v12 < -0.4999 ) )
	
	let $v13 = -0.5 or function(){}
	assert( $v13 is Float )
	assert( ( -0.5001 < $v13 ) and ( $v13 < -0.4999 ) )
	
	let $v14 = -0.5 or Something
	assert( $v14 is Float )
	assert( ( -0.5001 < $v14 ) and ( $v14 < -0.4999 ) )
	
	let $v15 = -0.5 or Type
	assert( $v15 is Float )
	assert( ( -0.5001 < $v15 ) and ( $v15 < -0.4999 ) )
	
	let $v16 = -0.5 or types
	assert( $v16 is Float )
	assert( ( -0.5001 < $v16 ) and ( $v16 < -0.4999 ) )
	
	let $v17 = -0.5 or errors
	assert( $v17 is Float )
	assert( ( -0.5001 < $v17 ) and ( $v17 < -0.4999 ) )

$ $BURN --tolerant or_result_9.burn

or_result_10.burn:
	import burn.types
	import burn.errors
	
	let $v0 = "" or nothing
	assert( $v0 is Nothing )
	
	let $v1 = "" or true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = "" or false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = "" or 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = "" or 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = "" or -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = "" or 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = "" or 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = "" or -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = "" or ""
	assert( $v9 is String )
	
	let $v10 = "" or "apple"
	assert( $v10 is String )
	
	let $v11 = "" or "banana"
	assert( $v11 is String )
	
	let $v12 = "" or repr
	assert( $v12 is Function )
	
	let $v13 = "" or function(){}
	assert( $v13 is Function )
	
	let $v14 = "" or Something
	assert( $v14 is Type )
	
	let $v15 = "" or Type
	assert( $v15 is Type )
	
	let $v16 = "" or types
	assert( $v16 is Module )
	
	let $v17 = "" or errors
	assert( $v17 is Module )

$ $BURN --tolerant or_result_10.burn

or_result_11.burn:
	import burn.types
	import burn.errors
	
	let $v0 = "apple" or nothing
	assert( $v0 is String )
	
	let $v1 = "apple" or true
	assert( $v1 is String )
	
	let $v2 = "apple" or false
	assert( $v2 is String )
	
	let $v3 = "apple" or 0
	assert( $v3 is String )
	
	let $v4 = "apple" or 2
	assert( $v4 is String )
	
	let $v5 = "apple" or -2
	assert( $v5 is String )
	
	let $v6 = "apple" or 0.0
	assert( $v6 is String )
	
	let $v7 = "apple" or 2.0
	assert( $v7 is String )
	
	let $v8 = "apple" or -0.5
	assert( $v8 is String )
	
	let $v9 = "apple" or ""
	assert( $v9 is String )
	
	let $v10 = "apple" or "apple"
	assert( $v10 is String )
	
	let $v11 = "apple" or "banana"
	assert( $v11 is String )
	
	let $v12 = "apple" or repr
	assert( $v12 is String )
	
	let $v13 = "apple" or function(){}
	assert( $v13 is String )
	
	let $v14 = "apple" or Something
	assert( $v14 is String )
	
	let $v15 = "apple" or Type
	assert( $v15 is String )
	
	let $v16 = "apple" or types
	assert( $v16 is String )
	
	let $v17 = "apple" or errors
	assert( $v17 is String )

$ $BURN --tolerant or_result_11.burn

or_result_12.burn:
	import burn.types
	import burn.errors
	
	let $v0 = "banana" or nothing
	assert( $v0 is String )
	
	let $v1 = "banana" or true
	assert( $v1 is String )
	
	let $v2 = "banana" or false
	assert( $v2 is String )
	
	let $v3 = "banana" or 0
	assert( $v3 is String )
	
	let $v4 = "banana" or 2
	assert( $v4 is String )
	
	let $v5 = "banana" or -2
	assert( $v5 is String )
	
	let $v6 = "banana" or 0.0
	assert( $v6 is String )
	
	let $v7 = "banana" or 2.0
	assert( $v7 is String )
	
	let $v8 = "banana" or -0.5
	assert( $v8 is String )
	
	let $v9 = "banana" or ""
	assert( $v9 is String )
	
	let $v10 = "banana" or "apple"
	assert( $v10 is String )
	
	let $v11 = "banana" or "banana"
	assert( $v11 is String )
	
	let $v12 = "banana" or repr
	assert( $v12 is String )
	
	let $v13 = "banana" or function(){}
	assert( $v13 is String )
	
	let $v14 = "banana" or Something
	assert( $v14 is String )
	
	let $v15 = "banana" or Type
	assert( $v15 is String )
	
	let $v16 = "banana" or types
	assert( $v16 is String )
	
	let $v17 = "banana" or errors
	assert( $v17 is String )

$ $BURN --tolerant or_result_12.burn

or_result_13.burn:
	import burn.types
	import burn.errors
	
	let $v0 = repr or nothing
	assert( $v0 is Function )
	
	let $v1 = repr or true
	assert( $v1 is Function )
	
	let $v2 = repr or false
	assert( $v2 is Function )
	
	let $v3 = repr or 0
	assert( $v3 is Function )
	
	let $v4 = repr or 2
	assert( $v4 is Function )
	
	let $v5 = repr or -2
	assert( $v5 is Function )
	
	let $v6 = repr or 0.0
	assert( $v6 is Function )
	
	let $v7 = repr or 2.0
	assert( $v7 is Function )
	
	let $v8 = repr or -0.5
	assert( $v8 is Function )
	
	let $v9 = repr or ""
	assert( $v9 is Function )
	
	let $v10 = repr or "apple"
	assert( $v10 is Function )
	
	let $v11 = repr or "banana"
	assert( $v11 is Function )
	
	let $v12 = repr or repr
	assert( $v12 is Function )
	
	let $v13 = repr or function(){}
	assert( $v13 is Function )
	
	let $v14 = repr or Something
	assert( $v14 is Function )
	
	let $v15 = repr or Type
	assert( $v15 is Function )
	
	let $v16 = repr or types
	assert( $v16 is Function )
	
	let $v17 = repr or errors
	assert( $v17 is Function )

$ $BURN --tolerant or_result_13.burn

or_result_14.burn:
	import burn.types
	import burn.errors
	
	let $v0 = function(){} or nothing
	assert( $v0 is Function )
	
	let $v1 = function(){} or true
	assert( $v1 is Function )
	
	let $v2 = function(){} or false
	assert( $v2 is Function )
	
	let $v3 = function(){} or 0
	assert( $v3 is Function )
	
	let $v4 = function(){} or 2
	assert( $v4 is Function )
	
	let $v5 = function(){} or -2
	assert( $v5 is Function )
	
	let $v6 = function(){} or 0.0
	assert( $v6 is Function )
	
	let $v7 = function(){} or 2.0
	assert( $v7 is Function )
	
	let $v8 = function(){} or -0.5
	assert( $v8 is Function )
	
	let $v9 = function(){} or ""
	assert( $v9 is Function )
	
	let $v10 = function(){} or "apple"
	assert( $v10 is Function )
	
	let $v11 = function(){} or "banana"
	assert( $v11 is Function )
	
	let $v12 = function(){} or repr
	assert( $v12 is Function )
	
	let $v13 = function(){} or function(){}
	assert( $v13 is Function )
	
	let $v14 = function(){} or Something
	assert( $v14 is Function )
	
	let $v15 = function(){} or Type
	assert( $v15 is Function )
	
	let $v16 = function(){} or types
	assert( $v16 is Function )
	
	let $v17 = function(){} or errors
	assert( $v17 is Function )

$ $BURN --tolerant or_result_14.burn

or_result_15.burn:
	import burn.types
	import burn.errors
	
	let $v0 = Something or nothing
	assert( $v0 is Type )
	
	let $v1 = Something or true
	assert( $v1 is Type )
	
	let $v2 = Something or false
	assert( $v2 is Type )
	
	let $v3 = Something or 0
	assert( $v3 is Type )
	
	let $v4 = Something or 2
	assert( $v4 is Type )
	
	let $v5 = Something or -2
	assert( $v5 is Type )
	
	let $v6 = Something or 0.0
	assert( $v6 is Type )
	
	let $v7 = Something or 2.0
	assert( $v7 is Type )
	
	let $v8 = Something or -0.5
	assert( $v8 is Type )
	
	let $v9 = Something or ""
	assert( $v9 is Type )
	
	let $v10 = Something or "apple"
	assert( $v10 is Type )
	
	let $v11 = Something or "banana"
	assert( $v11 is Type )
	
	let $v12 = Something or repr
	assert( $v12 is Type )
	
	let $v13 = Something or function(){}
	assert( $v13 is Type )
	
	let $v14 = Something or Something
	assert( $v14 is Type )
	
	let $v15 = Something or Type
	assert( $v15 is Type )
	
	let $v16 = Something or types
	assert( $v16 is Type )
	
	let $v17 = Something or errors
	assert( $v17 is Type )

$ $BURN --tolerant or_result_15.burn

or_result_16.burn:
	import burn.types
	import burn.errors
	
	let $v0 = Type or nothing
	assert( $v0 is Type )
	
	let $v1 = Type or true
	assert( $v1 is Type )
	
	let $v2 = Type or false
	assert( $v2 is Type )
	
	let $v3 = Type or 0
	assert( $v3 is Type )
	
	let $v4 = Type or 2
	assert( $v4 is Type )
	
	let $v5 = Type or -2
	assert( $v5 is Type )
	
	let $v6 = Type or 0.0
	assert( $v6 is Type )
	
	let $v7 = Type or 2.0
	assert( $v7 is Type )
	
	let $v8 = Type or -0.5
	assert( $v8 is Type )
	
	let $v9 = Type or ""
	assert( $v9 is Type )
	
	let $v10 = Type or "apple"
	assert( $v10 is Type )
	
	let $v11 = Type or "banana"
	assert( $v11 is Type )
	
	let $v12 = Type or repr
	assert( $v12 is Type )
	
	let $v13 = Type or function(){}
	assert( $v13 is Type )
	
	let $v14 = Type or Something
	assert( $v14 is Type )
	
	let $v15 = Type or Type
	assert( $v15 is Type )
	
	let $v16 = Type or types
	assert( $v16 is Type )
	
	let $v17 = Type or errors
	assert( $v17 is Type )

$ $BURN --tolerant or_result_16.burn

or_result_17.burn:
	import burn.types
	import burn.errors
	
	let $v0 = types or nothing
	assert( $v0 is Module )
	
	let $v1 = types or true
	assert( $v1 is Module )
	
	let $v2 = types or false
	assert( $v2 is Module )
	
	let $v3 = types or 0
	assert( $v3 is Module )
	
	let $v4 = types or 2
	assert( $v4 is Module )
	
	let $v5 = types or -2
	assert( $v5 is Module )
	
	let $v6 = types or 0.0
	assert( $v6 is Module )
	
	let $v7 = types or 2.0
	assert( $v7 is Module )
	
	let $v8 = types or -0.5
	assert( $v8 is Module )
	
	let $v9 = types or ""
	assert( $v9 is Module )
	
	let $v10 = types or "apple"
	assert( $v10 is Module )
	
	let $v11 = types or "banana"
	assert( $v11 is Module )
	
	let $v12 = types or repr
	assert( $v12 is Module )
	
	let $v13 = types or function(){}
	assert( $v13 is Module )
	
	let $v14 = types or Something
	assert( $v14 is Module )
	
	let $v15 = types or Type
	assert( $v15 is Module )
	
	let $v16 = types or types
	assert( $v16 is Module )
	
	let $v17 = types or errors
	assert( $v17 is Module )

$ $BURN --tolerant or_result_17.burn

or_result_18.burn:
	import burn.types
	import burn.errors
	
	let $v0 = errors or nothing
	assert( $v0 is Module )
	
	let $v1 = errors or true
	assert( $v1 is Module )
	
	let $v2 = errors or false
	assert( $v2 is Module )
	
	let $v3 = errors or 0
	assert( $v3 is Module )
	
	let $v4 = errors or 2
	assert( $v4 is Module )
	
	let $v5 = errors or -2
	assert( $v5 is Module )
	
	let $v6 = errors or 0.0
	assert( $v6 is Module )
	
	let $v7 = errors or 2.0
	assert( $v7 is Module )
	
	let $v8 = errors or -0.5
	assert( $v8 is Module )
	
	let $v9 = errors or ""
	assert( $v9 is Module )
	
	let $v10 = errors or "apple"
	assert( $v10 is Module )
	
	let $v11 = errors or "banana"
	assert( $v11 is Module )
	
	let $v12 = errors or repr
	assert( $v12 is Module )
	
	let $v13 = errors or function(){}
	assert( $v13 is Module )
	
	let $v14 = errors or Something
	assert( $v14 is Module )
	
	let $v15 = errors or Type
	assert( $v15 is Module )
	
	let $v16 = errors or types
	assert( $v16 is Module )
	
	let $v17 = errors or errors
	assert( $v17 is Module )

$ $BURN --tolerant or_result_18.burn
