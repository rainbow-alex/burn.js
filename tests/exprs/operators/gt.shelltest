// generated by `etc/generate_operator_test.py result gt`

gt_result_1.burn:
	import burn.types
	import burn.errors
	
	try { nothing > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_1.burn

gt_result_2.burn:
	import burn.types
	import burn.errors
	
	try { true > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_2.burn

gt_result_3.burn:
	import burn.types
	import burn.errors
	
	try { false > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_3.burn

gt_result_4.burn:
	import burn.types
	import burn.errors
	
	try { 0 > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 0 > 0
	assert( $d is Boolean )
	assert( $d == false )
	
	let $e = 0 > 2
	assert( $e is Boolean )
	assert( $e == false )
	
	let $f = 0 > -2
	assert( $f is Boolean )
	assert( $f == true )
	
	let $g = 0 > 0.0
	assert( $g is Boolean )
	assert( $g == false )
	
	let $h = 0 > 2.0
	assert( $h is Boolean )
	assert( $h == false )
	
	let $i = 0 > -0.5
	assert( $i is Boolean )
	assert( $i == true )
	
	try { 0 > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_4.burn

gt_result_5.burn:
	import burn.types
	import burn.errors
	
	try { 2 > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 2 > 0
	assert( $d is Boolean )
	assert( $d == true )
	
	let $e = 2 > 2
	assert( $e is Boolean )
	assert( $e == false )
	
	let $f = 2 > -2
	assert( $f is Boolean )
	assert( $f == true )
	
	let $g = 2 > 0.0
	assert( $g is Boolean )
	assert( $g == true )
	
	let $h = 2 > 2.0
	assert( $h is Boolean )
	assert( $h == false )
	
	let $i = 2 > -0.5
	assert( $i is Boolean )
	assert( $i == true )
	
	try { 2 > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_5.burn

gt_result_6.burn:
	import burn.types
	import burn.errors
	
	try { -2 > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = -2 > 0
	assert( $d is Boolean )
	assert( $d == false )
	
	let $e = -2 > 2
	assert( $e is Boolean )
	assert( $e == false )
	
	let $f = -2 > -2
	assert( $f is Boolean )
	assert( $f == false )
	
	let $g = -2 > 0.0
	assert( $g is Boolean )
	assert( $g == false )
	
	let $h = -2 > 2.0
	assert( $h is Boolean )
	assert( $h == false )
	
	let $i = -2 > -0.5
	assert( $i is Boolean )
	assert( $i == false )
	
	try { -2 > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_6.burn

gt_result_7.burn:
	import burn.types
	import burn.errors
	
	try { 0.0 > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 0.0 > 0
	assert( $d is Boolean )
	assert( $d == false )
	
	let $e = 0.0 > 2
	assert( $e is Boolean )
	assert( $e == false )
	
	let $f = 0.0 > -2
	assert( $f is Boolean )
	assert( $f == true )
	
	let $g = 0.0 > 0.0
	assert( $g is Boolean )
	assert( $g == false )
	
	let $h = 0.0 > 2.0
	assert( $h is Boolean )
	assert( $h == false )
	
	let $i = 0.0 > -0.5
	assert( $i is Boolean )
	assert( $i == true )
	
	try { 0.0 > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_7.burn

gt_result_8.burn:
	import burn.types
	import burn.errors
	
	try { 2.0 > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 2.0 > 0
	assert( $d is Boolean )
	assert( $d == true )
	
	let $e = 2.0 > 2
	assert( $e is Boolean )
	assert( $e == false )
	
	let $f = 2.0 > -2
	assert( $f is Boolean )
	assert( $f == true )
	
	let $g = 2.0 > 0.0
	assert( $g is Boolean )
	assert( $g == true )
	
	let $h = 2.0 > 2.0
	assert( $h is Boolean )
	assert( $h == false )
	
	let $i = 2.0 > -0.5
	assert( $i is Boolean )
	assert( $i == true )
	
	try { 2.0 > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_8.burn

gt_result_9.burn:
	import burn.types
	import burn.errors
	
	try { -0.5 > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = -0.5 > 0
	assert( $d is Boolean )
	assert( $d == false )
	
	let $e = -0.5 > 2
	assert( $e is Boolean )
	assert( $e == false )
	
	let $f = -0.5 > -2
	assert( $f is Boolean )
	assert( $f == true )
	
	let $g = -0.5 > 0.0
	assert( $g is Boolean )
	assert( $g == false )
	
	let $h = -0.5 > 2.0
	assert( $h is Boolean )
	assert( $h == false )
	
	let $i = -0.5 > -0.5
	assert( $i is Boolean )
	assert( $i == false )
	
	try { -0.5 > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_9.burn

gt_result_10.burn:
	import burn.types
	import burn.errors
	
	try { "" > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $j = "" > ""
	assert( $j is Boolean )
	assert( $j == false )
	
	let $k = "" > "apple"
	assert( $k is Boolean )
	assert( $k == false )
	
	let $l = "" > "banana"
	assert( $l is Boolean )
	assert( $l == false )
	
	try { "" > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_10.burn

gt_result_11.burn:
	import burn.types
	import burn.errors
	
	try { "apple" > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $j = "apple" > ""
	assert( $j is Boolean )
	assert( $j == true )
	
	let $k = "apple" > "apple"
	assert( $k is Boolean )
	assert( $k == false )
	
	let $l = "apple" > "banana"
	assert( $l is Boolean )
	assert( $l == false )
	
	try { "apple" > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_11.burn

gt_result_12.burn:
	import burn.types
	import burn.errors
	
	try { "banana" > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $j = "banana" > ""
	assert( $j is Boolean )
	assert( $j == true )
	
	let $k = "banana" > "apple"
	assert( $k is Boolean )
	assert( $k == true )
	
	let $l = "banana" > "banana"
	assert( $l is Boolean )
	assert( $l == false )
	
	try { "banana" > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_12.burn

gt_result_13.burn:
	import burn.types
	import burn.errors
	
	try { repr > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_13.burn

gt_result_14.burn:
	import burn.types
	import burn.errors
	
	try { function(){} > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_14.burn

gt_result_15.burn:
	import burn.types
	import burn.errors
	
	try { Something > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_15.burn

gt_result_16.burn:
	import burn.types
	import burn.errors
	
	try { Type > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_16.burn

gt_result_17.burn:
	import burn.types
	import burn.errors
	
	try { types > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_17.burn

gt_result_18.burn:
	import burn.types
	import burn.errors
	
	try { errors > nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors > errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant gt_result_18.burn
