// generated by `etc/generate_operator_test.py result is`

is_result_1.burn:
	import burn.types
	import burn.errors
	
	try { nothing is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = nothing is Something
	assert( $o is Boolean )
	assert( $o == false )
	
	let $p = nothing is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { nothing is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_1.burn

is_result_2.burn:
	import burn.types
	import burn.errors
	
	try { true is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = true is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = true is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { true is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_2.burn

is_result_3.burn:
	import burn.types
	import burn.errors
	
	try { false is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = false is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = false is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { false is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_3.burn

is_result_4.burn:
	import burn.types
	import burn.errors
	
	try { 0 is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = 0 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 0 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { 0 is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_4.burn

is_result_5.burn:
	import burn.types
	import burn.errors
	
	try { 2 is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = 2 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 2 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { 2 is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_5.burn

is_result_6.burn:
	import burn.types
	import burn.errors
	
	try { -2 is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = -2 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = -2 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { -2 is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_6.burn

is_result_7.burn:
	import burn.types
	import burn.errors
	
	try { 0.0 is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = 0.0 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 0.0 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { 0.0 is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_7.burn

is_result_8.burn:
	import burn.types
	import burn.errors
	
	try { 2.0 is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = 2.0 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 2.0 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { 2.0 is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_8.burn

is_result_9.burn:
	import burn.types
	import burn.errors
	
	try { -0.5 is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = -0.5 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = -0.5 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { -0.5 is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_9.burn

is_result_10.burn:
	import burn.types
	import burn.errors
	
	try { "" is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = "" is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = "" is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { "" is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_10.burn

is_result_11.burn:
	import burn.types
	import burn.errors
	
	try { "apple" is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = "apple" is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = "apple" is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { "apple" is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_11.burn

is_result_12.burn:
	import burn.types
	import burn.errors
	
	try { "banana" is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = "banana" is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = "banana" is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { "banana" is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_12.burn

is_result_13.burn:
	import burn.types
	import burn.errors
	
	try { repr is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = repr is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = repr is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { repr is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_13.burn

is_result_14.burn:
	import burn.types
	import burn.errors
	
	try { function(){} is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = function(){} is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = function(){} is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { function(){} is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_14.burn

is_result_15.burn:
	import burn.types
	import burn.errors
	
	try { Something is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = Something is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = Something is Type
	assert( $p is Boolean )
	assert( $p == true )
	
	try { Something is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_15.burn

is_result_16.burn:
	import burn.types
	import burn.errors
	
	try { Type is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = Type is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = Type is Type
	assert( $p is Boolean )
	assert( $p == true )
	
	try { Type is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_16.burn

is_result_17.burn:
	import burn.types
	import burn.errors
	
	try { types is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = types is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = types is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { types is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_17.burn

is_result_18.burn:
	import burn.types
	import burn.errors
	
	try { errors is nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $o = errors is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = errors is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	try { errors is types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors is errors }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant is_result_18.burn
