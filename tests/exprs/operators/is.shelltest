// generated by `etc/generate_operator_test.py result is`

is_result_1.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { nothing is nothing }, TypeError )
	
	assert.throws( function() { nothing is true }, TypeError )
	
	assert.throws( function() { nothing is false }, TypeError )
	
	assert.throws( function() { nothing is 0 }, TypeError )
	
	assert.throws( function() { nothing is 2 }, TypeError )
	
	assert.throws( function() { nothing is -2 }, TypeError )
	
	assert.throws( function() { nothing is 0.0 }, TypeError )
	
	assert.throws( function() { nothing is 2.0 }, TypeError )
	
	assert.throws( function() { nothing is -0.5 }, TypeError )
	
	assert.throws( function() { nothing is "" }, TypeError )
	
	assert.throws( function() { nothing is "apple" }, TypeError )
	
	assert.throws( function() { nothing is "banana" }, TypeError )
	
	assert.throws( function() { nothing is repr }, TypeError )
	
	assert.throws( function() { nothing is function(){} }, TypeError )
	
	let $o = nothing is Something
	assert( $o is Boolean )
	assert( $o == false )
	
	let $p = nothing is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { nothing is types }, TypeError )
	
	assert.throws( function() { nothing is errors }, TypeError )

$ $BURN --tolerant is_result_1.burn

is_result_2.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { true is nothing }, TypeError )
	
	assert.throws( function() { true is true }, TypeError )
	
	assert.throws( function() { true is false }, TypeError )
	
	assert.throws( function() { true is 0 }, TypeError )
	
	assert.throws( function() { true is 2 }, TypeError )
	
	assert.throws( function() { true is -2 }, TypeError )
	
	assert.throws( function() { true is 0.0 }, TypeError )
	
	assert.throws( function() { true is 2.0 }, TypeError )
	
	assert.throws( function() { true is -0.5 }, TypeError )
	
	assert.throws( function() { true is "" }, TypeError )
	
	assert.throws( function() { true is "apple" }, TypeError )
	
	assert.throws( function() { true is "banana" }, TypeError )
	
	assert.throws( function() { true is repr }, TypeError )
	
	assert.throws( function() { true is function(){} }, TypeError )
	
	let $o = true is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = true is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { true is types }, TypeError )
	
	assert.throws( function() { true is errors }, TypeError )

$ $BURN --tolerant is_result_2.burn

is_result_3.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { false is nothing }, TypeError )
	
	assert.throws( function() { false is true }, TypeError )
	
	assert.throws( function() { false is false }, TypeError )
	
	assert.throws( function() { false is 0 }, TypeError )
	
	assert.throws( function() { false is 2 }, TypeError )
	
	assert.throws( function() { false is -2 }, TypeError )
	
	assert.throws( function() { false is 0.0 }, TypeError )
	
	assert.throws( function() { false is 2.0 }, TypeError )
	
	assert.throws( function() { false is -0.5 }, TypeError )
	
	assert.throws( function() { false is "" }, TypeError )
	
	assert.throws( function() { false is "apple" }, TypeError )
	
	assert.throws( function() { false is "banana" }, TypeError )
	
	assert.throws( function() { false is repr }, TypeError )
	
	assert.throws( function() { false is function(){} }, TypeError )
	
	let $o = false is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = false is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { false is types }, TypeError )
	
	assert.throws( function() { false is errors }, TypeError )

$ $BURN --tolerant is_result_3.burn

is_result_4.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0 is nothing }, TypeError )
	
	assert.throws( function() { 0 is true }, TypeError )
	
	assert.throws( function() { 0 is false }, TypeError )
	
	assert.throws( function() { 0 is 0 }, TypeError )
	
	assert.throws( function() { 0 is 2 }, TypeError )
	
	assert.throws( function() { 0 is -2 }, TypeError )
	
	assert.throws( function() { 0 is 0.0 }, TypeError )
	
	assert.throws( function() { 0 is 2.0 }, TypeError )
	
	assert.throws( function() { 0 is -0.5 }, TypeError )
	
	assert.throws( function() { 0 is "" }, TypeError )
	
	assert.throws( function() { 0 is "apple" }, TypeError )
	
	assert.throws( function() { 0 is "banana" }, TypeError )
	
	assert.throws( function() { 0 is repr }, TypeError )
	
	assert.throws( function() { 0 is function(){} }, TypeError )
	
	let $o = 0 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 0 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { 0 is types }, TypeError )
	
	assert.throws( function() { 0 is errors }, TypeError )

$ $BURN --tolerant is_result_4.burn

is_result_5.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2 is nothing }, TypeError )
	
	assert.throws( function() { 2 is true }, TypeError )
	
	assert.throws( function() { 2 is false }, TypeError )
	
	assert.throws( function() { 2 is 0 }, TypeError )
	
	assert.throws( function() { 2 is 2 }, TypeError )
	
	assert.throws( function() { 2 is -2 }, TypeError )
	
	assert.throws( function() { 2 is 0.0 }, TypeError )
	
	assert.throws( function() { 2 is 2.0 }, TypeError )
	
	assert.throws( function() { 2 is -0.5 }, TypeError )
	
	assert.throws( function() { 2 is "" }, TypeError )
	
	assert.throws( function() { 2 is "apple" }, TypeError )
	
	assert.throws( function() { 2 is "banana" }, TypeError )
	
	assert.throws( function() { 2 is repr }, TypeError )
	
	assert.throws( function() { 2 is function(){} }, TypeError )
	
	let $o = 2 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 2 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { 2 is types }, TypeError )
	
	assert.throws( function() { 2 is errors }, TypeError )

$ $BURN --tolerant is_result_5.burn

is_result_6.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -2 is nothing }, TypeError )
	
	assert.throws( function() { -2 is true }, TypeError )
	
	assert.throws( function() { -2 is false }, TypeError )
	
	assert.throws( function() { -2 is 0 }, TypeError )
	
	assert.throws( function() { -2 is 2 }, TypeError )
	
	assert.throws( function() { -2 is -2 }, TypeError )
	
	assert.throws( function() { -2 is 0.0 }, TypeError )
	
	assert.throws( function() { -2 is 2.0 }, TypeError )
	
	assert.throws( function() { -2 is -0.5 }, TypeError )
	
	assert.throws( function() { -2 is "" }, TypeError )
	
	assert.throws( function() { -2 is "apple" }, TypeError )
	
	assert.throws( function() { -2 is "banana" }, TypeError )
	
	assert.throws( function() { -2 is repr }, TypeError )
	
	assert.throws( function() { -2 is function(){} }, TypeError )
	
	let $o = -2 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = -2 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { -2 is types }, TypeError )
	
	assert.throws( function() { -2 is errors }, TypeError )

$ $BURN --tolerant is_result_6.burn

is_result_7.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.0 is nothing }, TypeError )
	
	assert.throws( function() { 0.0 is true }, TypeError )
	
	assert.throws( function() { 0.0 is false }, TypeError )
	
	assert.throws( function() { 0.0 is 0 }, TypeError )
	
	assert.throws( function() { 0.0 is 2 }, TypeError )
	
	assert.throws( function() { 0.0 is -2 }, TypeError )
	
	assert.throws( function() { 0.0 is 0.0 }, TypeError )
	
	assert.throws( function() { 0.0 is 2.0 }, TypeError )
	
	assert.throws( function() { 0.0 is -0.5 }, TypeError )
	
	assert.throws( function() { 0.0 is "" }, TypeError )
	
	assert.throws( function() { 0.0 is "apple" }, TypeError )
	
	assert.throws( function() { 0.0 is "banana" }, TypeError )
	
	assert.throws( function() { 0.0 is repr }, TypeError )
	
	assert.throws( function() { 0.0 is function(){} }, TypeError )
	
	let $o = 0.0 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 0.0 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { 0.0 is types }, TypeError )
	
	assert.throws( function() { 0.0 is errors }, TypeError )

$ $BURN --tolerant is_result_7.burn

is_result_8.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2.0 is nothing }, TypeError )
	
	assert.throws( function() { 2.0 is true }, TypeError )
	
	assert.throws( function() { 2.0 is false }, TypeError )
	
	assert.throws( function() { 2.0 is 0 }, TypeError )
	
	assert.throws( function() { 2.0 is 2 }, TypeError )
	
	assert.throws( function() { 2.0 is -2 }, TypeError )
	
	assert.throws( function() { 2.0 is 0.0 }, TypeError )
	
	assert.throws( function() { 2.0 is 2.0 }, TypeError )
	
	assert.throws( function() { 2.0 is -0.5 }, TypeError )
	
	assert.throws( function() { 2.0 is "" }, TypeError )
	
	assert.throws( function() { 2.0 is "apple" }, TypeError )
	
	assert.throws( function() { 2.0 is "banana" }, TypeError )
	
	assert.throws( function() { 2.0 is repr }, TypeError )
	
	assert.throws( function() { 2.0 is function(){} }, TypeError )
	
	let $o = 2.0 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = 2.0 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { 2.0 is types }, TypeError )
	
	assert.throws( function() { 2.0 is errors }, TypeError )

$ $BURN --tolerant is_result_8.burn

is_result_9.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -0.5 is nothing }, TypeError )
	
	assert.throws( function() { -0.5 is true }, TypeError )
	
	assert.throws( function() { -0.5 is false }, TypeError )
	
	assert.throws( function() { -0.5 is 0 }, TypeError )
	
	assert.throws( function() { -0.5 is 2 }, TypeError )
	
	assert.throws( function() { -0.5 is -2 }, TypeError )
	
	assert.throws( function() { -0.5 is 0.0 }, TypeError )
	
	assert.throws( function() { -0.5 is 2.0 }, TypeError )
	
	assert.throws( function() { -0.5 is -0.5 }, TypeError )
	
	assert.throws( function() { -0.5 is "" }, TypeError )
	
	assert.throws( function() { -0.5 is "apple" }, TypeError )
	
	assert.throws( function() { -0.5 is "banana" }, TypeError )
	
	assert.throws( function() { -0.5 is repr }, TypeError )
	
	assert.throws( function() { -0.5 is function(){} }, TypeError )
	
	let $o = -0.5 is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = -0.5 is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { -0.5 is types }, TypeError )
	
	assert.throws( function() { -0.5 is errors }, TypeError )

$ $BURN --tolerant is_result_9.burn

is_result_10.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "" is nothing }, TypeError )
	
	assert.throws( function() { "" is true }, TypeError )
	
	assert.throws( function() { "" is false }, TypeError )
	
	assert.throws( function() { "" is 0 }, TypeError )
	
	assert.throws( function() { "" is 2 }, TypeError )
	
	assert.throws( function() { "" is -2 }, TypeError )
	
	assert.throws( function() { "" is 0.0 }, TypeError )
	
	assert.throws( function() { "" is 2.0 }, TypeError )
	
	assert.throws( function() { "" is -0.5 }, TypeError )
	
	assert.throws( function() { "" is "" }, TypeError )
	
	assert.throws( function() { "" is "apple" }, TypeError )
	
	assert.throws( function() { "" is "banana" }, TypeError )
	
	assert.throws( function() { "" is repr }, TypeError )
	
	assert.throws( function() { "" is function(){} }, TypeError )
	
	let $o = "" is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = "" is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { "" is types }, TypeError )
	
	assert.throws( function() { "" is errors }, TypeError )

$ $BURN --tolerant is_result_10.burn

is_result_11.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "apple" is nothing }, TypeError )
	
	assert.throws( function() { "apple" is true }, TypeError )
	
	assert.throws( function() { "apple" is false }, TypeError )
	
	assert.throws( function() { "apple" is 0 }, TypeError )
	
	assert.throws( function() { "apple" is 2 }, TypeError )
	
	assert.throws( function() { "apple" is -2 }, TypeError )
	
	assert.throws( function() { "apple" is 0.0 }, TypeError )
	
	assert.throws( function() { "apple" is 2.0 }, TypeError )
	
	assert.throws( function() { "apple" is -0.5 }, TypeError )
	
	assert.throws( function() { "apple" is "" }, TypeError )
	
	assert.throws( function() { "apple" is "apple" }, TypeError )
	
	assert.throws( function() { "apple" is "banana" }, TypeError )
	
	assert.throws( function() { "apple" is repr }, TypeError )
	
	assert.throws( function() { "apple" is function(){} }, TypeError )
	
	let $o = "apple" is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = "apple" is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { "apple" is types }, TypeError )
	
	assert.throws( function() { "apple" is errors }, TypeError )

$ $BURN --tolerant is_result_11.burn

is_result_12.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "banana" is nothing }, TypeError )
	
	assert.throws( function() { "banana" is true }, TypeError )
	
	assert.throws( function() { "banana" is false }, TypeError )
	
	assert.throws( function() { "banana" is 0 }, TypeError )
	
	assert.throws( function() { "banana" is 2 }, TypeError )
	
	assert.throws( function() { "banana" is -2 }, TypeError )
	
	assert.throws( function() { "banana" is 0.0 }, TypeError )
	
	assert.throws( function() { "banana" is 2.0 }, TypeError )
	
	assert.throws( function() { "banana" is -0.5 }, TypeError )
	
	assert.throws( function() { "banana" is "" }, TypeError )
	
	assert.throws( function() { "banana" is "apple" }, TypeError )
	
	assert.throws( function() { "banana" is "banana" }, TypeError )
	
	assert.throws( function() { "banana" is repr }, TypeError )
	
	assert.throws( function() { "banana" is function(){} }, TypeError )
	
	let $o = "banana" is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = "banana" is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { "banana" is types }, TypeError )
	
	assert.throws( function() { "banana" is errors }, TypeError )

$ $BURN --tolerant is_result_12.burn

is_result_13.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { repr is nothing }, TypeError )
	
	assert.throws( function() { repr is true }, TypeError )
	
	assert.throws( function() { repr is false }, TypeError )
	
	assert.throws( function() { repr is 0 }, TypeError )
	
	assert.throws( function() { repr is 2 }, TypeError )
	
	assert.throws( function() { repr is -2 }, TypeError )
	
	assert.throws( function() { repr is 0.0 }, TypeError )
	
	assert.throws( function() { repr is 2.0 }, TypeError )
	
	assert.throws( function() { repr is -0.5 }, TypeError )
	
	assert.throws( function() { repr is "" }, TypeError )
	
	assert.throws( function() { repr is "apple" }, TypeError )
	
	assert.throws( function() { repr is "banana" }, TypeError )
	
	assert.throws( function() { repr is repr }, TypeError )
	
	assert.throws( function() { repr is function(){} }, TypeError )
	
	let $o = repr is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = repr is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { repr is types }, TypeError )
	
	assert.throws( function() { repr is errors }, TypeError )

$ $BURN --tolerant is_result_13.burn

is_result_14.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { function(){} is nothing }, TypeError )
	
	assert.throws( function() { function(){} is true }, TypeError )
	
	assert.throws( function() { function(){} is false }, TypeError )
	
	assert.throws( function() { function(){} is 0 }, TypeError )
	
	assert.throws( function() { function(){} is 2 }, TypeError )
	
	assert.throws( function() { function(){} is -2 }, TypeError )
	
	assert.throws( function() { function(){} is 0.0 }, TypeError )
	
	assert.throws( function() { function(){} is 2.0 }, TypeError )
	
	assert.throws( function() { function(){} is -0.5 }, TypeError )
	
	assert.throws( function() { function(){} is "" }, TypeError )
	
	assert.throws( function() { function(){} is "apple" }, TypeError )
	
	assert.throws( function() { function(){} is "banana" }, TypeError )
	
	assert.throws( function() { function(){} is repr }, TypeError )
	
	assert.throws( function() { function(){} is function(){} }, TypeError )
	
	let $o = function(){} is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = function(){} is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { function(){} is types }, TypeError )
	
	assert.throws( function() { function(){} is errors }, TypeError )

$ $BURN --tolerant is_result_14.burn

is_result_15.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Something is nothing }, TypeError )
	
	assert.throws( function() { Something is true }, TypeError )
	
	assert.throws( function() { Something is false }, TypeError )
	
	assert.throws( function() { Something is 0 }, TypeError )
	
	assert.throws( function() { Something is 2 }, TypeError )
	
	assert.throws( function() { Something is -2 }, TypeError )
	
	assert.throws( function() { Something is 0.0 }, TypeError )
	
	assert.throws( function() { Something is 2.0 }, TypeError )
	
	assert.throws( function() { Something is -0.5 }, TypeError )
	
	assert.throws( function() { Something is "" }, TypeError )
	
	assert.throws( function() { Something is "apple" }, TypeError )
	
	assert.throws( function() { Something is "banana" }, TypeError )
	
	assert.throws( function() { Something is repr }, TypeError )
	
	assert.throws( function() { Something is function(){} }, TypeError )
	
	let $o = Something is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = Something is Type
	assert( $p is Boolean )
	assert( $p == true )
	
	assert.throws( function() { Something is types }, TypeError )
	
	assert.throws( function() { Something is errors }, TypeError )

$ $BURN --tolerant is_result_15.burn

is_result_16.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Type is nothing }, TypeError )
	
	assert.throws( function() { Type is true }, TypeError )
	
	assert.throws( function() { Type is false }, TypeError )
	
	assert.throws( function() { Type is 0 }, TypeError )
	
	assert.throws( function() { Type is 2 }, TypeError )
	
	assert.throws( function() { Type is -2 }, TypeError )
	
	assert.throws( function() { Type is 0.0 }, TypeError )
	
	assert.throws( function() { Type is 2.0 }, TypeError )
	
	assert.throws( function() { Type is -0.5 }, TypeError )
	
	assert.throws( function() { Type is "" }, TypeError )
	
	assert.throws( function() { Type is "apple" }, TypeError )
	
	assert.throws( function() { Type is "banana" }, TypeError )
	
	assert.throws( function() { Type is repr }, TypeError )
	
	assert.throws( function() { Type is function(){} }, TypeError )
	
	let $o = Type is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = Type is Type
	assert( $p is Boolean )
	assert( $p == true )
	
	assert.throws( function() { Type is types }, TypeError )
	
	assert.throws( function() { Type is errors }, TypeError )

$ $BURN --tolerant is_result_16.burn

is_result_17.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { types is nothing }, TypeError )
	
	assert.throws( function() { types is true }, TypeError )
	
	assert.throws( function() { types is false }, TypeError )
	
	assert.throws( function() { types is 0 }, TypeError )
	
	assert.throws( function() { types is 2 }, TypeError )
	
	assert.throws( function() { types is -2 }, TypeError )
	
	assert.throws( function() { types is 0.0 }, TypeError )
	
	assert.throws( function() { types is 2.0 }, TypeError )
	
	assert.throws( function() { types is -0.5 }, TypeError )
	
	assert.throws( function() { types is "" }, TypeError )
	
	assert.throws( function() { types is "apple" }, TypeError )
	
	assert.throws( function() { types is "banana" }, TypeError )
	
	assert.throws( function() { types is repr }, TypeError )
	
	assert.throws( function() { types is function(){} }, TypeError )
	
	let $o = types is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = types is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { types is types }, TypeError )
	
	assert.throws( function() { types is errors }, TypeError )

$ $BURN --tolerant is_result_17.burn

is_result_18.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { errors is nothing }, TypeError )
	
	assert.throws( function() { errors is true }, TypeError )
	
	assert.throws( function() { errors is false }, TypeError )
	
	assert.throws( function() { errors is 0 }, TypeError )
	
	assert.throws( function() { errors is 2 }, TypeError )
	
	assert.throws( function() { errors is -2 }, TypeError )
	
	assert.throws( function() { errors is 0.0 }, TypeError )
	
	assert.throws( function() { errors is 2.0 }, TypeError )
	
	assert.throws( function() { errors is -0.5 }, TypeError )
	
	assert.throws( function() { errors is "" }, TypeError )
	
	assert.throws( function() { errors is "apple" }, TypeError )
	
	assert.throws( function() { errors is "banana" }, TypeError )
	
	assert.throws( function() { errors is repr }, TypeError )
	
	assert.throws( function() { errors is function(){} }, TypeError )
	
	let $o = errors is Something
	assert( $o is Boolean )
	assert( $o == true )
	
	let $p = errors is Type
	assert( $p is Boolean )
	assert( $p == false )
	
	assert.throws( function() { errors is types }, TypeError )
	
	assert.throws( function() { errors is errors }, TypeError )

$ $BURN --tolerant is_result_18.burn
