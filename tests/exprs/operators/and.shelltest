// generated by `etc/generate_operator_test.py result and`

and_result_1.burn:
	import burn.types
	import burn.errors
	
	let $a = nothing and nothing
	assert( $a is Nothing )
	
	let $b = nothing and true
	assert( $b is Nothing )
	
	let $c = nothing and false
	assert( $c is Nothing )
	
	let $d = nothing and 0
	assert( $d is Nothing )
	
	let $e = nothing and 2
	assert( $e is Nothing )
	
	let $f = nothing and -2
	assert( $f is Nothing )
	
	let $g = nothing and 0.0
	assert( $g is Nothing )
	
	let $h = nothing and 2.0
	assert( $h is Nothing )
	
	let $i = nothing and -0.5
	assert( $i is Nothing )
	
	let $j = nothing and ""
	assert( $j is Nothing )
	
	let $k = nothing and "apple"
	assert( $k is Nothing )
	
	let $l = nothing and "banana"
	assert( $l is Nothing )
	
	let $m = nothing and repr
	assert( $m is Nothing )
	
	let $n = nothing and function(){}
	assert( $n is Nothing )
	
	let $o = nothing and Something
	assert( $o is Nothing )
	
	let $p = nothing and Type
	assert( $p is Nothing )
	
	let $q = nothing and types
	assert( $q is Nothing )
	
	let $r = nothing and errors
	assert( $r is Nothing )

$ burn --tolerant and_result_1.burn

and_result_2.burn:
	import burn.types
	import burn.errors
	
	let $a = true and nothing
	assert( $a is Nothing )
	
	let $b = true and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = true and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = true and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = true and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = true and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = true and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = true and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = true and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = true and ""
	assert( $j is String )
	
	let $k = true and "apple"
	assert( $k is String )
	
	let $l = true and "banana"
	assert( $l is String )
	
	let $m = true and repr
	assert( $m is Function )
	
	let $n = true and function(){}
	assert( $n is Function )
	
	let $o = true and Something
	assert( $o is Type )
	
	let $p = true and Type
	assert( $p is Type )
	
	let $q = true and types
	assert( $q is Module )
	
	let $r = true and errors
	assert( $r is Module )

$ burn --tolerant and_result_2.burn

and_result_3.burn:
	import burn.types
	import burn.errors
	
	let $a = false and nothing
	assert( $a is Boolean )
	assert( $a == false )
	
	let $b = false and true
	assert( $b is Boolean )
	assert( $b == false )
	
	let $c = false and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = false and 0
	assert( $d is Boolean )
	assert( $d == false )
	
	let $e = false and 2
	assert( $e is Boolean )
	assert( $e == false )
	
	let $f = false and -2
	assert( $f is Boolean )
	assert( $f == false )
	
	let $g = false and 0.0
	assert( $g is Boolean )
	assert( $g == false )
	
	let $h = false and 2.0
	assert( $h is Boolean )
	assert( $h == false )
	
	let $i = false and -0.5
	assert( $i is Boolean )
	assert( $i == false )
	
	let $j = false and ""
	assert( $j is Boolean )
	assert( $j == false )
	
	let $k = false and "apple"
	assert( $k is Boolean )
	assert( $k == false )
	
	let $l = false and "banana"
	assert( $l is Boolean )
	assert( $l == false )
	
	let $m = false and repr
	assert( $m is Boolean )
	assert( $m == false )
	
	let $n = false and function(){}
	assert( $n is Boolean )
	assert( $n == false )
	
	let $o = false and Something
	assert( $o is Boolean )
	assert( $o == false )
	
	let $p = false and Type
	assert( $p is Boolean )
	assert( $p == false )
	
	let $q = false and types
	assert( $q is Boolean )
	assert( $q == false )
	
	let $r = false and errors
	assert( $r is Boolean )
	assert( $r == false )

$ burn --tolerant and_result_3.burn

and_result_4.burn:
	import burn.types
	import burn.errors
	
	let $a = 0 and nothing
	assert( $a is Integer )
	assert( $a == 0 )
	
	let $b = 0 and true
	assert( $b is Integer )
	assert( $b == 0 )
	
	let $c = 0 and false
	assert( $c is Integer )
	assert( $c == 0 )
	
	let $d = 0 and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 0 and 2
	assert( $e is Integer )
	assert( $e == 0 )
	
	let $f = 0 and -2
	assert( $f is Integer )
	assert( $f == 0 )
	
	let $g = 0 and 0.0
	assert( $g is Integer )
	assert( $g == 0 )
	
	let $h = 0 and 2.0
	assert( $h is Integer )
	assert( $h == 0 )
	
	let $i = 0 and -0.5
	assert( $i is Integer )
	assert( $i == 0 )
	
	let $j = 0 and ""
	assert( $j is Integer )
	assert( $j == 0 )
	
	let $k = 0 and "apple"
	assert( $k is Integer )
	assert( $k == 0 )
	
	let $l = 0 and "banana"
	assert( $l is Integer )
	assert( $l == 0 )
	
	let $m = 0 and repr
	assert( $m is Integer )
	assert( $m == 0 )
	
	let $n = 0 and function(){}
	assert( $n is Integer )
	assert( $n == 0 )
	
	let $o = 0 and Something
	assert( $o is Integer )
	assert( $o == 0 )
	
	let $p = 0 and Type
	assert( $p is Integer )
	assert( $p == 0 )
	
	let $q = 0 and types
	assert( $q is Integer )
	assert( $q == 0 )
	
	let $r = 0 and errors
	assert( $r is Integer )
	assert( $r == 0 )

$ burn --tolerant and_result_4.burn

and_result_5.burn:
	import burn.types
	import burn.errors
	
	let $a = 2 and nothing
	assert( $a is Nothing )
	
	let $b = 2 and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = 2 and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = 2 and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 2 and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = 2 and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = 2 and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 2 and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = 2 and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = 2 and ""
	assert( $j is String )
	
	let $k = 2 and "apple"
	assert( $k is String )
	
	let $l = 2 and "banana"
	assert( $l is String )
	
	let $m = 2 and repr
	assert( $m is Function )
	
	let $n = 2 and function(){}
	assert( $n is Function )
	
	let $o = 2 and Something
	assert( $o is Type )
	
	let $p = 2 and Type
	assert( $p is Type )
	
	let $q = 2 and types
	assert( $q is Module )
	
	let $r = 2 and errors
	assert( $r is Module )

$ burn --tolerant and_result_5.burn

and_result_6.burn:
	import burn.types
	import burn.errors
	
	let $a = -2 and nothing
	assert( $a is Nothing )
	
	let $b = -2 and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = -2 and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = -2 and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = -2 and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = -2 and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = -2 and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = -2 and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = -2 and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = -2 and ""
	assert( $j is String )
	
	let $k = -2 and "apple"
	assert( $k is String )
	
	let $l = -2 and "banana"
	assert( $l is String )
	
	let $m = -2 and repr
	assert( $m is Function )
	
	let $n = -2 and function(){}
	assert( $n is Function )
	
	let $o = -2 and Something
	assert( $o is Type )
	
	let $p = -2 and Type
	assert( $p is Type )
	
	let $q = -2 and types
	assert( $q is Module )
	
	let $r = -2 and errors
	assert( $r is Module )

$ burn --tolerant and_result_6.burn

and_result_7.burn:
	import burn.types
	import burn.errors
	
	let $a = 0.0 and nothing
	assert( $a is Float )
	assert( ( -0.0001 < $a ) and ( $a < 0.0001 ) )
	
	let $b = 0.0 and true
	assert( $b is Float )
	assert( ( -0.0001 < $b ) and ( $b < 0.0001 ) )
	
	let $c = 0.0 and false
	assert( $c is Float )
	assert( ( -0.0001 < $c ) and ( $c < 0.0001 ) )
	
	let $d = 0.0 and 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = 0.0 and 2
	assert( $e is Float )
	assert( ( -0.0001 < $e ) and ( $e < 0.0001 ) )
	
	let $f = 0.0 and -2
	assert( $f is Float )
	assert( ( -0.0001 < $f ) and ( $f < 0.0001 ) )
	
	let $g = 0.0 and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0.0 and 2.0
	assert( $h is Float )
	assert( ( -0.0001 < $h ) and ( $h < 0.0001 ) )
	
	let $i = 0.0 and -0.5
	assert( $i is Float )
	assert( ( -0.0001 < $i ) and ( $i < 0.0001 ) )
	
	let $j = 0.0 and ""
	assert( $j is Float )
	assert( ( -0.0001 < $j ) and ( $j < 0.0001 ) )
	
	let $k = 0.0 and "apple"
	assert( $k is Float )
	assert( ( -0.0001 < $k ) and ( $k < 0.0001 ) )
	
	let $l = 0.0 and "banana"
	assert( $l is Float )
	assert( ( -0.0001 < $l ) and ( $l < 0.0001 ) )
	
	let $m = 0.0 and repr
	assert( $m is Float )
	assert( ( -0.0001 < $m ) and ( $m < 0.0001 ) )
	
	let $n = 0.0 and function(){}
	assert( $n is Float )
	assert( ( -0.0001 < $n ) and ( $n < 0.0001 ) )
	
	let $o = 0.0 and Something
	assert( $o is Float )
	assert( ( -0.0001 < $o ) and ( $o < 0.0001 ) )
	
	let $p = 0.0 and Type
	assert( $p is Float )
	assert( ( -0.0001 < $p ) and ( $p < 0.0001 ) )
	
	let $q = 0.0 and types
	assert( $q is Float )
	assert( ( -0.0001 < $q ) and ( $q < 0.0001 ) )
	
	let $r = 0.0 and errors
	assert( $r is Float )
	assert( ( -0.0001 < $r ) and ( $r < 0.0001 ) )

$ burn --tolerant and_result_7.burn

and_result_8.burn:
	import burn.types
	import burn.errors
	
	let $a = 2.0 and nothing
	assert( $a is Nothing )
	
	let $b = 2.0 and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = 2.0 and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = 2.0 and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 2.0 and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = 2.0 and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = 2.0 and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 2.0 and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = 2.0 and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = 2.0 and ""
	assert( $j is String )
	
	let $k = 2.0 and "apple"
	assert( $k is String )
	
	let $l = 2.0 and "banana"
	assert( $l is String )
	
	let $m = 2.0 and repr
	assert( $m is Function )
	
	let $n = 2.0 and function(){}
	assert( $n is Function )
	
	let $o = 2.0 and Something
	assert( $o is Type )
	
	let $p = 2.0 and Type
	assert( $p is Type )
	
	let $q = 2.0 and types
	assert( $q is Module )
	
	let $r = 2.0 and errors
	assert( $r is Module )

$ burn --tolerant and_result_8.burn

and_result_9.burn:
	import burn.types
	import burn.errors
	
	let $a = -0.5 and nothing
	assert( $a is Nothing )
	
	let $b = -0.5 and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = -0.5 and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = -0.5 and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = -0.5 and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = -0.5 and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = -0.5 and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = -0.5 and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = -0.5 and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = -0.5 and ""
	assert( $j is String )
	
	let $k = -0.5 and "apple"
	assert( $k is String )
	
	let $l = -0.5 and "banana"
	assert( $l is String )
	
	let $m = -0.5 and repr
	assert( $m is Function )
	
	let $n = -0.5 and function(){}
	assert( $n is Function )
	
	let $o = -0.5 and Something
	assert( $o is Type )
	
	let $p = -0.5 and Type
	assert( $p is Type )
	
	let $q = -0.5 and types
	assert( $q is Module )
	
	let $r = -0.5 and errors
	assert( $r is Module )

$ burn --tolerant and_result_9.burn

and_result_10.burn:
	import burn.types
	import burn.errors
	
	let $a = "" and nothing
	assert( $a is String )
	
	let $b = "" and true
	assert( $b is String )
	
	let $c = "" and false
	assert( $c is String )
	
	let $d = "" and 0
	assert( $d is String )
	
	let $e = "" and 2
	assert( $e is String )
	
	let $f = "" and -2
	assert( $f is String )
	
	let $g = "" and 0.0
	assert( $g is String )
	
	let $h = "" and 2.0
	assert( $h is String )
	
	let $i = "" and -0.5
	assert( $i is String )
	
	let $j = "" and ""
	assert( $j is String )
	
	let $k = "" and "apple"
	assert( $k is String )
	
	let $l = "" and "banana"
	assert( $l is String )
	
	let $m = "" and repr
	assert( $m is String )
	
	let $n = "" and function(){}
	assert( $n is String )
	
	let $o = "" and Something
	assert( $o is String )
	
	let $p = "" and Type
	assert( $p is String )
	
	let $q = "" and types
	assert( $q is String )
	
	let $r = "" and errors
	assert( $r is String )

$ burn --tolerant and_result_10.burn

and_result_11.burn:
	import burn.types
	import burn.errors
	
	let $a = "apple" and nothing
	assert( $a is Nothing )
	
	let $b = "apple" and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = "apple" and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = "apple" and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = "apple" and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = "apple" and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = "apple" and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = "apple" and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = "apple" and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = "apple" and ""
	assert( $j is String )
	
	let $k = "apple" and "apple"
	assert( $k is String )
	
	let $l = "apple" and "banana"
	assert( $l is String )
	
	let $m = "apple" and repr
	assert( $m is Function )
	
	let $n = "apple" and function(){}
	assert( $n is Function )
	
	let $o = "apple" and Something
	assert( $o is Type )
	
	let $p = "apple" and Type
	assert( $p is Type )
	
	let $q = "apple" and types
	assert( $q is Module )
	
	let $r = "apple" and errors
	assert( $r is Module )

$ burn --tolerant and_result_11.burn

and_result_12.burn:
	import burn.types
	import burn.errors
	
	let $a = "banana" and nothing
	assert( $a is Nothing )
	
	let $b = "banana" and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = "banana" and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = "banana" and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = "banana" and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = "banana" and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = "banana" and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = "banana" and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = "banana" and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = "banana" and ""
	assert( $j is String )
	
	let $k = "banana" and "apple"
	assert( $k is String )
	
	let $l = "banana" and "banana"
	assert( $l is String )
	
	let $m = "banana" and repr
	assert( $m is Function )
	
	let $n = "banana" and function(){}
	assert( $n is Function )
	
	let $o = "banana" and Something
	assert( $o is Type )
	
	let $p = "banana" and Type
	assert( $p is Type )
	
	let $q = "banana" and types
	assert( $q is Module )
	
	let $r = "banana" and errors
	assert( $r is Module )

$ burn --tolerant and_result_12.burn

and_result_13.burn:
	import burn.types
	import burn.errors
	
	let $a = repr and nothing
	assert( $a is Nothing )
	
	let $b = repr and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = repr and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = repr and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = repr and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = repr and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = repr and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = repr and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = repr and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = repr and ""
	assert( $j is String )
	
	let $k = repr and "apple"
	assert( $k is String )
	
	let $l = repr and "banana"
	assert( $l is String )
	
	let $m = repr and repr
	assert( $m is Function )
	
	let $n = repr and function(){}
	assert( $n is Function )
	
	let $o = repr and Something
	assert( $o is Type )
	
	let $p = repr and Type
	assert( $p is Type )
	
	let $q = repr and types
	assert( $q is Module )
	
	let $r = repr and errors
	assert( $r is Module )

$ burn --tolerant and_result_13.burn

and_result_14.burn:
	import burn.types
	import burn.errors
	
	let $a = function(){} and nothing
	assert( $a is Nothing )
	
	let $b = function(){} and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = function(){} and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = function(){} and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = function(){} and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = function(){} and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = function(){} and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = function(){} and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = function(){} and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = function(){} and ""
	assert( $j is String )
	
	let $k = function(){} and "apple"
	assert( $k is String )
	
	let $l = function(){} and "banana"
	assert( $l is String )
	
	let $m = function(){} and repr
	assert( $m is Function )
	
	let $n = function(){} and function(){}
	assert( $n is Function )
	
	let $o = function(){} and Something
	assert( $o is Type )
	
	let $p = function(){} and Type
	assert( $p is Type )
	
	let $q = function(){} and types
	assert( $q is Module )
	
	let $r = function(){} and errors
	assert( $r is Module )

$ burn --tolerant and_result_14.burn

and_result_15.burn:
	import burn.types
	import burn.errors
	
	let $a = Something and nothing
	assert( $a is Nothing )
	
	let $b = Something and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = Something and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = Something and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = Something and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = Something and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = Something and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = Something and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = Something and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = Something and ""
	assert( $j is String )
	
	let $k = Something and "apple"
	assert( $k is String )
	
	let $l = Something and "banana"
	assert( $l is String )
	
	let $m = Something and repr
	assert( $m is Function )
	
	let $n = Something and function(){}
	assert( $n is Function )
	
	let $o = Something and Something
	assert( $o is Type )
	
	let $p = Something and Type
	assert( $p is Type )
	
	let $q = Something and types
	assert( $q is Module )
	
	let $r = Something and errors
	assert( $r is Module )

$ burn --tolerant and_result_15.burn

and_result_16.burn:
	import burn.types
	import burn.errors
	
	let $a = Type and nothing
	assert( $a is Nothing )
	
	let $b = Type and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = Type and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = Type and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = Type and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = Type and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = Type and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = Type and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = Type and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = Type and ""
	assert( $j is String )
	
	let $k = Type and "apple"
	assert( $k is String )
	
	let $l = Type and "banana"
	assert( $l is String )
	
	let $m = Type and repr
	assert( $m is Function )
	
	let $n = Type and function(){}
	assert( $n is Function )
	
	let $o = Type and Something
	assert( $o is Type )
	
	let $p = Type and Type
	assert( $p is Type )
	
	let $q = Type and types
	assert( $q is Module )
	
	let $r = Type and errors
	assert( $r is Module )

$ burn --tolerant and_result_16.burn

and_result_17.burn:
	import burn.types
	import burn.errors
	
	let $a = types and nothing
	assert( $a is Nothing )
	
	let $b = types and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = types and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = types and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = types and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = types and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = types and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = types and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = types and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = types and ""
	assert( $j is String )
	
	let $k = types and "apple"
	assert( $k is String )
	
	let $l = types and "banana"
	assert( $l is String )
	
	let $m = types and repr
	assert( $m is Function )
	
	let $n = types and function(){}
	assert( $n is Function )
	
	let $o = types and Something
	assert( $o is Type )
	
	let $p = types and Type
	assert( $p is Type )
	
	let $q = types and types
	assert( $q is Module )
	
	let $r = types and errors
	assert( $r is Module )

$ burn --tolerant and_result_17.burn

and_result_18.burn:
	import burn.types
	import burn.errors
	
	let $a = errors and nothing
	assert( $a is Nothing )
	
	let $b = errors and true
	assert( $b is Boolean )
	assert( $b == true )
	
	let $c = errors and false
	assert( $c is Boolean )
	assert( $c == false )
	
	let $d = errors and 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = errors and 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = errors and -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = errors and 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = errors and 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = errors and -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	let $j = errors and ""
	assert( $j is String )
	
	let $k = errors and "apple"
	assert( $k is String )
	
	let $l = errors and "banana"
	assert( $l is String )
	
	let $m = errors and repr
	assert( $m is Function )
	
	let $n = errors and function(){}
	assert( $n is Function )
	
	let $o = errors and Something
	assert( $o is Type )
	
	let $p = errors and Type
	assert( $p is Type )
	
	let $q = errors and types
	assert( $q is Module )
	
	let $r = errors and errors
	assert( $r is Module )

$ burn --tolerant and_result_18.burn
