// generated by `etc/generate_operator_test.py result mul`

mul_result_1.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { nothing * nothing }, TypeError )
	
	assert.throws( function() { nothing * true }, TypeError )
	
	assert.throws( function() { nothing * false }, TypeError )
	
	assert.throws( function() { nothing * 0 }, TypeError )
	
	assert.throws( function() { nothing * 2 }, TypeError )
	
	assert.throws( function() { nothing * -2 }, TypeError )
	
	assert.throws( function() { nothing * 0.0 }, TypeError )
	
	assert.throws( function() { nothing * 2.0 }, TypeError )
	
	assert.throws( function() { nothing * -0.5 }, TypeError )
	
	assert.throws( function() { nothing * "" }, TypeError )
	
	assert.throws( function() { nothing * "apple" }, TypeError )
	
	assert.throws( function() { nothing * "banana" }, TypeError )
	
	assert.throws( function() { nothing * repr }, TypeError )
	
	assert.throws( function() { nothing * function(){} }, TypeError )
	
	assert.throws( function() { nothing * Something }, TypeError )
	
	assert.throws( function() { nothing * Type }, TypeError )
	
	assert.throws( function() { nothing * types }, TypeError )
	
	assert.throws( function() { nothing * errors }, TypeError )
	
	assert.throws( function() { nothing * 3 }, TypeError )
	
	assert.throws( function() { nothing * 8 }, TypeError )
	
	assert.throws( function() { nothing * 0.3 }, TypeError )
	
	assert.throws( function() { nothing * 0.33333333333 }, TypeError )
	
	assert.throws( function() { nothing * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_1.burn

mul_result_2.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { true * nothing }, TypeError )
	
	assert.throws( function() { true * true }, TypeError )
	
	assert.throws( function() { true * false }, TypeError )
	
	assert.throws( function() { true * 0 }, TypeError )
	
	assert.throws( function() { true * 2 }, TypeError )
	
	assert.throws( function() { true * -2 }, TypeError )
	
	assert.throws( function() { true * 0.0 }, TypeError )
	
	assert.throws( function() { true * 2.0 }, TypeError )
	
	assert.throws( function() { true * -0.5 }, TypeError )
	
	assert.throws( function() { true * "" }, TypeError )
	
	assert.throws( function() { true * "apple" }, TypeError )
	
	assert.throws( function() { true * "banana" }, TypeError )
	
	assert.throws( function() { true * repr }, TypeError )
	
	assert.throws( function() { true * function(){} }, TypeError )
	
	assert.throws( function() { true * Something }, TypeError )
	
	assert.throws( function() { true * Type }, TypeError )
	
	assert.throws( function() { true * types }, TypeError )
	
	assert.throws( function() { true * errors }, TypeError )
	
	assert.throws( function() { true * 3 }, TypeError )
	
	assert.throws( function() { true * 8 }, TypeError )
	
	assert.throws( function() { true * 0.3 }, TypeError )
	
	assert.throws( function() { true * 0.33333333333 }, TypeError )
	
	assert.throws( function() { true * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_2.burn

mul_result_3.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { false * nothing }, TypeError )
	
	assert.throws( function() { false * true }, TypeError )
	
	assert.throws( function() { false * false }, TypeError )
	
	assert.throws( function() { false * 0 }, TypeError )
	
	assert.throws( function() { false * 2 }, TypeError )
	
	assert.throws( function() { false * -2 }, TypeError )
	
	assert.throws( function() { false * 0.0 }, TypeError )
	
	assert.throws( function() { false * 2.0 }, TypeError )
	
	assert.throws( function() { false * -0.5 }, TypeError )
	
	assert.throws( function() { false * "" }, TypeError )
	
	assert.throws( function() { false * "apple" }, TypeError )
	
	assert.throws( function() { false * "banana" }, TypeError )
	
	assert.throws( function() { false * repr }, TypeError )
	
	assert.throws( function() { false * function(){} }, TypeError )
	
	assert.throws( function() { false * Something }, TypeError )
	
	assert.throws( function() { false * Type }, TypeError )
	
	assert.throws( function() { false * types }, TypeError )
	
	assert.throws( function() { false * errors }, TypeError )
	
	assert.throws( function() { false * 3 }, TypeError )
	
	assert.throws( function() { false * 8 }, TypeError )
	
	assert.throws( function() { false * 0.3 }, TypeError )
	
	assert.throws( function() { false * 0.33333333333 }, TypeError )
	
	assert.throws( function() { false * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_3.burn

mul_result_4.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0 * nothing }, TypeError )
	
	assert.throws( function() { 0 * true }, TypeError )
	
	assert.throws( function() { 0 * false }, TypeError )
	
	let $d = 0 * 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 0 * 2
	assert( $e is Integer )
	assert( $e == 0 )
	
	let $f = 0 * -2
	assert( $f is Integer )
	assert( $f == 0 )
	
	let $g = 0 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0 * 2.0
	assert( $h is Float )
	assert( ( -0.0001 < $h ) and ( $h < 0.0001 ) )
	
	let $i = 0 * -0.5
	assert( $i is Float )
	assert( ( -0.0001 < $i ) and ( $i < 0.0001 ) )
	
	assert.throws( function() { 0 * "" }, TypeError )
	
	assert.throws( function() { 0 * "apple" }, TypeError )
	
	assert.throws( function() { 0 * "banana" }, TypeError )
	
	assert.throws( function() { 0 * repr }, TypeError )
	
	assert.throws( function() { 0 * function(){} }, TypeError )
	
	assert.throws( function() { 0 * Something }, TypeError )
	
	assert.throws( function() { 0 * Type }, TypeError )
	
	assert.throws( function() { 0 * types }, TypeError )
	
	assert.throws( function() { 0 * errors }, TypeError )
	
	let $s = 0 * 3
	assert( $s is Integer )
	assert( $s == 0 )
	
	let $t = 0 * 8
	assert( $t is Integer )
	assert( $t == 0 )
	
	let $u = 0 * 0.3
	assert( $u is Float )
	assert( ( -0.0001 < $u ) and ( $u < 0.0001 ) )
	
	let $v = 0 * 0.33333333333
	assert( $v is Float )
	assert( ( -0.0001 < $v ) and ( $v < 0.0001 ) )
	
	let $w = 0 * 0.7
	assert( $w is Float )
	assert( ( -0.0001 < $w ) and ( $w < 0.0001 ) )

$ $BURN --tolerant mul_result_4.burn

mul_result_5.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2 * nothing }, TypeError )
	
	assert.throws( function() { 2 * true }, TypeError )
	
	assert.throws( function() { 2 * false }, TypeError )
	
	let $d = 2 * 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 2 * 2
	assert( $e is Integer )
	assert( $e == 4 )
	
	let $f = 2 * -2
	assert( $f is Integer )
	assert( $f == -4 )
	
	let $g = 2 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 2 * 2.0
	assert( $h is Float )
	assert( ( 3.9999 < $h ) and ( $h < 4.0001 ) )
	
	let $i = 2 * -0.5
	assert( $i is Float )
	assert( ( -1.0001 < $i ) and ( $i < -0.9999 ) )
	
	assert.throws( function() { 2 * "" }, TypeError )
	
	assert.throws( function() { 2 * "apple" }, TypeError )
	
	assert.throws( function() { 2 * "banana" }, TypeError )
	
	assert.throws( function() { 2 * repr }, TypeError )
	
	assert.throws( function() { 2 * function(){} }, TypeError )
	
	assert.throws( function() { 2 * Something }, TypeError )
	
	assert.throws( function() { 2 * Type }, TypeError )
	
	assert.throws( function() { 2 * types }, TypeError )
	
	assert.throws( function() { 2 * errors }, TypeError )
	
	let $s = 2 * 3
	assert( $s is Integer )
	assert( $s == 6 )
	
	let $t = 2 * 8
	assert( $t is Integer )
	assert( $t == 16 )
	
	let $u = 2 * 0.3
	assert( $u is Float )
	assert( ( 0.5999 < $u ) and ( $u < 0.6001 ) )
	
	let $v = 2 * 0.33333333333
	assert( $v is Float )
	assert( ( 0.6666 < $v ) and ( $v < 0.6668 ) )
	
	let $w = 2 * 0.7
	assert( $w is Float )
	assert( ( 1.3999 < $w ) and ( $w < 1.4001 ) )

$ $BURN --tolerant mul_result_5.burn

mul_result_6.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -2 * nothing }, TypeError )
	
	assert.throws( function() { -2 * true }, TypeError )
	
	assert.throws( function() { -2 * false }, TypeError )
	
	let $d = -2 * 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = -2 * 2
	assert( $e is Integer )
	assert( $e == -4 )
	
	let $f = -2 * -2
	assert( $f is Integer )
	assert( $f == 4 )
	
	let $g = -2 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = -2 * 2.0
	assert( $h is Float )
	assert( ( -4.0001 < $h ) and ( $h < -3.9999 ) )
	
	let $i = -2 * -0.5
	assert( $i is Float )
	assert( ( 0.9999 < $i ) and ( $i < 1.0001 ) )
	
	assert.throws( function() { -2 * "" }, TypeError )
	
	assert.throws( function() { -2 * "apple" }, TypeError )
	
	assert.throws( function() { -2 * "banana" }, TypeError )
	
	assert.throws( function() { -2 * repr }, TypeError )
	
	assert.throws( function() { -2 * function(){} }, TypeError )
	
	assert.throws( function() { -2 * Something }, TypeError )
	
	assert.throws( function() { -2 * Type }, TypeError )
	
	assert.throws( function() { -2 * types }, TypeError )
	
	assert.throws( function() { -2 * errors }, TypeError )
	
	let $s = -2 * 3
	assert( $s is Integer )
	assert( $s == -6 )
	
	let $t = -2 * 8
	assert( $t is Integer )
	assert( $t == -16 )
	
	let $u = -2 * 0.3
	assert( $u is Float )
	assert( ( -0.6001 < $u ) and ( $u < -0.5999 ) )
	
	let $v = -2 * 0.33333333333
	assert( $v is Float )
	assert( ( -0.6668 < $v ) and ( $v < -0.6666 ) )
	
	let $w = -2 * 0.7
	assert( $w is Float )
	assert( ( -1.4001 < $w ) and ( $w < -1.3999 ) )

$ $BURN --tolerant mul_result_6.burn

mul_result_7.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.0 * nothing }, TypeError )
	
	assert.throws( function() { 0.0 * true }, TypeError )
	
	assert.throws( function() { 0.0 * false }, TypeError )
	
	let $d = 0.0 * 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = 0.0 * 2
	assert( $e is Float )
	assert( ( -0.0001 < $e ) and ( $e < 0.0001 ) )
	
	let $f = 0.0 * -2
	assert( $f is Float )
	assert( ( -0.0001 < $f ) and ( $f < 0.0001 ) )
	
	let $g = 0.0 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0.0 * 2.0
	assert( $h is Float )
	assert( ( -0.0001 < $h ) and ( $h < 0.0001 ) )
	
	let $i = 0.0 * -0.5
	assert( $i is Float )
	assert( ( -0.0001 < $i ) and ( $i < 0.0001 ) )
	
	assert.throws( function() { 0.0 * "" }, TypeError )
	
	assert.throws( function() { 0.0 * "apple" }, TypeError )
	
	assert.throws( function() { 0.0 * "banana" }, TypeError )
	
	assert.throws( function() { 0.0 * repr }, TypeError )
	
	assert.throws( function() { 0.0 * function(){} }, TypeError )
	
	assert.throws( function() { 0.0 * Something }, TypeError )
	
	assert.throws( function() { 0.0 * Type }, TypeError )
	
	assert.throws( function() { 0.0 * types }, TypeError )
	
	assert.throws( function() { 0.0 * errors }, TypeError )
	
	let $s = 0.0 * 3
	assert( $s is Float )
	assert( ( -0.0001 < $s ) and ( $s < 0.0001 ) )
	
	let $t = 0.0 * 8
	assert( $t is Float )
	assert( ( -0.0001 < $t ) and ( $t < 0.0001 ) )
	
	let $u = 0.0 * 0.3
	assert( $u is Float )
	assert( ( -0.0001 < $u ) and ( $u < 0.0001 ) )
	
	let $v = 0.0 * 0.33333333333
	assert( $v is Float )
	assert( ( -0.0001 < $v ) and ( $v < 0.0001 ) )
	
	let $w = 0.0 * 0.7
	assert( $w is Float )
	assert( ( -0.0001 < $w ) and ( $w < 0.0001 ) )

$ $BURN --tolerant mul_result_7.burn

mul_result_8.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2.0 * nothing }, TypeError )
	
	assert.throws( function() { 2.0 * true }, TypeError )
	
	assert.throws( function() { 2.0 * false }, TypeError )
	
	let $d = 2.0 * 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = 2.0 * 2
	assert( $e is Float )
	assert( ( 3.9999 < $e ) and ( $e < 4.0001 ) )
	
	let $f = 2.0 * -2
	assert( $f is Float )
	assert( ( -4.0001 < $f ) and ( $f < -3.9999 ) )
	
	let $g = 2.0 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 2.0 * 2.0
	assert( $h is Float )
	assert( ( 3.9999 < $h ) and ( $h < 4.0001 ) )
	
	let $i = 2.0 * -0.5
	assert( $i is Float )
	assert( ( -1.0001 < $i ) and ( $i < -0.9999 ) )
	
	assert.throws( function() { 2.0 * "" }, TypeError )
	
	assert.throws( function() { 2.0 * "apple" }, TypeError )
	
	assert.throws( function() { 2.0 * "banana" }, TypeError )
	
	assert.throws( function() { 2.0 * repr }, TypeError )
	
	assert.throws( function() { 2.0 * function(){} }, TypeError )
	
	assert.throws( function() { 2.0 * Something }, TypeError )
	
	assert.throws( function() { 2.0 * Type }, TypeError )
	
	assert.throws( function() { 2.0 * types }, TypeError )
	
	assert.throws( function() { 2.0 * errors }, TypeError )
	
	let $s = 2.0 * 3
	assert( $s is Float )
	assert( ( 5.9999 < $s ) and ( $s < 6.0001 ) )
	
	let $t = 2.0 * 8
	assert( $t is Float )
	assert( ( 15.9999 < $t ) and ( $t < 16.0001 ) )
	
	let $u = 2.0 * 0.3
	assert( $u is Float )
	assert( ( 0.5999 < $u ) and ( $u < 0.6001 ) )
	
	let $v = 2.0 * 0.33333333333
	assert( $v is Float )
	assert( ( 0.6666 < $v ) and ( $v < 0.6668 ) )
	
	let $w = 2.0 * 0.7
	assert( $w is Float )
	assert( ( 1.3999 < $w ) and ( $w < 1.4001 ) )

$ $BURN --tolerant mul_result_8.burn

mul_result_9.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -0.5 * nothing }, TypeError )
	
	assert.throws( function() { -0.5 * true }, TypeError )
	
	assert.throws( function() { -0.5 * false }, TypeError )
	
	let $d = -0.5 * 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = -0.5 * 2
	assert( $e is Float )
	assert( ( -1.0001 < $e ) and ( $e < -0.9999 ) )
	
	let $f = -0.5 * -2
	assert( $f is Float )
	assert( ( 0.9999 < $f ) and ( $f < 1.0001 ) )
	
	let $g = -0.5 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = -0.5 * 2.0
	assert( $h is Float )
	assert( ( -1.0001 < $h ) and ( $h < -0.9999 ) )
	
	let $i = -0.5 * -0.5
	assert( $i is Float )
	assert( ( 0.2499 < $i ) and ( $i < 0.2501 ) )
	
	assert.throws( function() { -0.5 * "" }, TypeError )
	
	assert.throws( function() { -0.5 * "apple" }, TypeError )
	
	assert.throws( function() { -0.5 * "banana" }, TypeError )
	
	assert.throws( function() { -0.5 * repr }, TypeError )
	
	assert.throws( function() { -0.5 * function(){} }, TypeError )
	
	assert.throws( function() { -0.5 * Something }, TypeError )
	
	assert.throws( function() { -0.5 * Type }, TypeError )
	
	assert.throws( function() { -0.5 * types }, TypeError )
	
	assert.throws( function() { -0.5 * errors }, TypeError )
	
	let $s = -0.5 * 3
	assert( $s is Float )
	assert( ( -1.5001 < $s ) and ( $s < -1.4999 ) )
	
	let $t = -0.5 * 8
	assert( $t is Float )
	assert( ( -4.0001 < $t ) and ( $t < -3.9999 ) )
	
	let $u = -0.5 * 0.3
	assert( $u is Float )
	assert( ( -0.1501 < $u ) and ( $u < -0.1499 ) )
	
	let $v = -0.5 * 0.33333333333
	assert( $v is Float )
	assert( ( -0.1668 < $v ) and ( $v < -0.1666 ) )
	
	let $w = -0.5 * 0.7
	assert( $w is Float )
	assert( ( -0.3501 < $w ) and ( $w < -0.3499 ) )

$ $BURN --tolerant mul_result_9.burn

mul_result_10.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "" * nothing }, TypeError )
	
	assert.throws( function() { "" * true }, TypeError )
	
	assert.throws( function() { "" * false }, TypeError )
	
	assert.throws( function() { "" * 0 }, TypeError )
	
	assert.throws( function() { "" * 2 }, TypeError )
	
	assert.throws( function() { "" * -2 }, TypeError )
	
	assert.throws( function() { "" * 0.0 }, TypeError )
	
	assert.throws( function() { "" * 2.0 }, TypeError )
	
	assert.throws( function() { "" * -0.5 }, TypeError )
	
	assert.throws( function() { "" * "" }, TypeError )
	
	assert.throws( function() { "" * "apple" }, TypeError )
	
	assert.throws( function() { "" * "banana" }, TypeError )
	
	assert.throws( function() { "" * repr }, TypeError )
	
	assert.throws( function() { "" * function(){} }, TypeError )
	
	assert.throws( function() { "" * Something }, TypeError )
	
	assert.throws( function() { "" * Type }, TypeError )
	
	assert.throws( function() { "" * types }, TypeError )
	
	assert.throws( function() { "" * errors }, TypeError )
	
	assert.throws( function() { "" * 3 }, TypeError )
	
	assert.throws( function() { "" * 8 }, TypeError )
	
	assert.throws( function() { "" * 0.3 }, TypeError )
	
	assert.throws( function() { "" * 0.33333333333 }, TypeError )
	
	assert.throws( function() { "" * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_10.burn

mul_result_11.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "apple" * nothing }, TypeError )
	
	assert.throws( function() { "apple" * true }, TypeError )
	
	assert.throws( function() { "apple" * false }, TypeError )
	
	assert.throws( function() { "apple" * 0 }, TypeError )
	
	assert.throws( function() { "apple" * 2 }, TypeError )
	
	assert.throws( function() { "apple" * -2 }, TypeError )
	
	assert.throws( function() { "apple" * 0.0 }, TypeError )
	
	assert.throws( function() { "apple" * 2.0 }, TypeError )
	
	assert.throws( function() { "apple" * -0.5 }, TypeError )
	
	assert.throws( function() { "apple" * "" }, TypeError )
	
	assert.throws( function() { "apple" * "apple" }, TypeError )
	
	assert.throws( function() { "apple" * "banana" }, TypeError )
	
	assert.throws( function() { "apple" * repr }, TypeError )
	
	assert.throws( function() { "apple" * function(){} }, TypeError )
	
	assert.throws( function() { "apple" * Something }, TypeError )
	
	assert.throws( function() { "apple" * Type }, TypeError )
	
	assert.throws( function() { "apple" * types }, TypeError )
	
	assert.throws( function() { "apple" * errors }, TypeError )
	
	assert.throws( function() { "apple" * 3 }, TypeError )
	
	assert.throws( function() { "apple" * 8 }, TypeError )
	
	assert.throws( function() { "apple" * 0.3 }, TypeError )
	
	assert.throws( function() { "apple" * 0.33333333333 }, TypeError )
	
	assert.throws( function() { "apple" * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_11.burn

mul_result_12.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "banana" * nothing }, TypeError )
	
	assert.throws( function() { "banana" * true }, TypeError )
	
	assert.throws( function() { "banana" * false }, TypeError )
	
	assert.throws( function() { "banana" * 0 }, TypeError )
	
	assert.throws( function() { "banana" * 2 }, TypeError )
	
	assert.throws( function() { "banana" * -2 }, TypeError )
	
	assert.throws( function() { "banana" * 0.0 }, TypeError )
	
	assert.throws( function() { "banana" * 2.0 }, TypeError )
	
	assert.throws( function() { "banana" * -0.5 }, TypeError )
	
	assert.throws( function() { "banana" * "" }, TypeError )
	
	assert.throws( function() { "banana" * "apple" }, TypeError )
	
	assert.throws( function() { "banana" * "banana" }, TypeError )
	
	assert.throws( function() { "banana" * repr }, TypeError )
	
	assert.throws( function() { "banana" * function(){} }, TypeError )
	
	assert.throws( function() { "banana" * Something }, TypeError )
	
	assert.throws( function() { "banana" * Type }, TypeError )
	
	assert.throws( function() { "banana" * types }, TypeError )
	
	assert.throws( function() { "banana" * errors }, TypeError )
	
	assert.throws( function() { "banana" * 3 }, TypeError )
	
	assert.throws( function() { "banana" * 8 }, TypeError )
	
	assert.throws( function() { "banana" * 0.3 }, TypeError )
	
	assert.throws( function() { "banana" * 0.33333333333 }, TypeError )
	
	assert.throws( function() { "banana" * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_12.burn

mul_result_13.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { repr * nothing }, TypeError )
	
	assert.throws( function() { repr * true }, TypeError )
	
	assert.throws( function() { repr * false }, TypeError )
	
	assert.throws( function() { repr * 0 }, TypeError )
	
	assert.throws( function() { repr * 2 }, TypeError )
	
	assert.throws( function() { repr * -2 }, TypeError )
	
	assert.throws( function() { repr * 0.0 }, TypeError )
	
	assert.throws( function() { repr * 2.0 }, TypeError )
	
	assert.throws( function() { repr * -0.5 }, TypeError )
	
	assert.throws( function() { repr * "" }, TypeError )
	
	assert.throws( function() { repr * "apple" }, TypeError )
	
	assert.throws( function() { repr * "banana" }, TypeError )
	
	assert.throws( function() { repr * repr }, TypeError )
	
	assert.throws( function() { repr * function(){} }, TypeError )
	
	assert.throws( function() { repr * Something }, TypeError )
	
	assert.throws( function() { repr * Type }, TypeError )
	
	assert.throws( function() { repr * types }, TypeError )
	
	assert.throws( function() { repr * errors }, TypeError )
	
	assert.throws( function() { repr * 3 }, TypeError )
	
	assert.throws( function() { repr * 8 }, TypeError )
	
	assert.throws( function() { repr * 0.3 }, TypeError )
	
	assert.throws( function() { repr * 0.33333333333 }, TypeError )
	
	assert.throws( function() { repr * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_13.burn

mul_result_14.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { function(){} * nothing }, TypeError )
	
	assert.throws( function() { function(){} * true }, TypeError )
	
	assert.throws( function() { function(){} * false }, TypeError )
	
	assert.throws( function() { function(){} * 0 }, TypeError )
	
	assert.throws( function() { function(){} * 2 }, TypeError )
	
	assert.throws( function() { function(){} * -2 }, TypeError )
	
	assert.throws( function() { function(){} * 0.0 }, TypeError )
	
	assert.throws( function() { function(){} * 2.0 }, TypeError )
	
	assert.throws( function() { function(){} * -0.5 }, TypeError )
	
	assert.throws( function() { function(){} * "" }, TypeError )
	
	assert.throws( function() { function(){} * "apple" }, TypeError )
	
	assert.throws( function() { function(){} * "banana" }, TypeError )
	
	assert.throws( function() { function(){} * repr }, TypeError )
	
	assert.throws( function() { function(){} * function(){} }, TypeError )
	
	assert.throws( function() { function(){} * Something }, TypeError )
	
	assert.throws( function() { function(){} * Type }, TypeError )
	
	assert.throws( function() { function(){} * types }, TypeError )
	
	assert.throws( function() { function(){} * errors }, TypeError )
	
	assert.throws( function() { function(){} * 3 }, TypeError )
	
	assert.throws( function() { function(){} * 8 }, TypeError )
	
	assert.throws( function() { function(){} * 0.3 }, TypeError )
	
	assert.throws( function() { function(){} * 0.33333333333 }, TypeError )
	
	assert.throws( function() { function(){} * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_14.burn

mul_result_15.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Something * nothing }, TypeError )
	
	assert.throws( function() { Something * true }, TypeError )
	
	assert.throws( function() { Something * false }, TypeError )
	
	assert.throws( function() { Something * 0 }, TypeError )
	
	assert.throws( function() { Something * 2 }, TypeError )
	
	assert.throws( function() { Something * -2 }, TypeError )
	
	assert.throws( function() { Something * 0.0 }, TypeError )
	
	assert.throws( function() { Something * 2.0 }, TypeError )
	
	assert.throws( function() { Something * -0.5 }, TypeError )
	
	assert.throws( function() { Something * "" }, TypeError )
	
	assert.throws( function() { Something * "apple" }, TypeError )
	
	assert.throws( function() { Something * "banana" }, TypeError )
	
	assert.throws( function() { Something * repr }, TypeError )
	
	assert.throws( function() { Something * function(){} }, TypeError )
	
	assert.throws( function() { Something * Something }, TypeError )
	
	assert.throws( function() { Something * Type }, TypeError )
	
	assert.throws( function() { Something * types }, TypeError )
	
	assert.throws( function() { Something * errors }, TypeError )
	
	assert.throws( function() { Something * 3 }, TypeError )
	
	assert.throws( function() { Something * 8 }, TypeError )
	
	assert.throws( function() { Something * 0.3 }, TypeError )
	
	assert.throws( function() { Something * 0.33333333333 }, TypeError )
	
	assert.throws( function() { Something * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_15.burn

mul_result_16.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Type * nothing }, TypeError )
	
	assert.throws( function() { Type * true }, TypeError )
	
	assert.throws( function() { Type * false }, TypeError )
	
	assert.throws( function() { Type * 0 }, TypeError )
	
	assert.throws( function() { Type * 2 }, TypeError )
	
	assert.throws( function() { Type * -2 }, TypeError )
	
	assert.throws( function() { Type * 0.0 }, TypeError )
	
	assert.throws( function() { Type * 2.0 }, TypeError )
	
	assert.throws( function() { Type * -0.5 }, TypeError )
	
	assert.throws( function() { Type * "" }, TypeError )
	
	assert.throws( function() { Type * "apple" }, TypeError )
	
	assert.throws( function() { Type * "banana" }, TypeError )
	
	assert.throws( function() { Type * repr }, TypeError )
	
	assert.throws( function() { Type * function(){} }, TypeError )
	
	assert.throws( function() { Type * Something }, TypeError )
	
	assert.throws( function() { Type * Type }, TypeError )
	
	assert.throws( function() { Type * types }, TypeError )
	
	assert.throws( function() { Type * errors }, TypeError )
	
	assert.throws( function() { Type * 3 }, TypeError )
	
	assert.throws( function() { Type * 8 }, TypeError )
	
	assert.throws( function() { Type * 0.3 }, TypeError )
	
	assert.throws( function() { Type * 0.33333333333 }, TypeError )
	
	assert.throws( function() { Type * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_16.burn

mul_result_17.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { types * nothing }, TypeError )
	
	assert.throws( function() { types * true }, TypeError )
	
	assert.throws( function() { types * false }, TypeError )
	
	assert.throws( function() { types * 0 }, TypeError )
	
	assert.throws( function() { types * 2 }, TypeError )
	
	assert.throws( function() { types * -2 }, TypeError )
	
	assert.throws( function() { types * 0.0 }, TypeError )
	
	assert.throws( function() { types * 2.0 }, TypeError )
	
	assert.throws( function() { types * -0.5 }, TypeError )
	
	assert.throws( function() { types * "" }, TypeError )
	
	assert.throws( function() { types * "apple" }, TypeError )
	
	assert.throws( function() { types * "banana" }, TypeError )
	
	assert.throws( function() { types * repr }, TypeError )
	
	assert.throws( function() { types * function(){} }, TypeError )
	
	assert.throws( function() { types * Something }, TypeError )
	
	assert.throws( function() { types * Type }, TypeError )
	
	assert.throws( function() { types * types }, TypeError )
	
	assert.throws( function() { types * errors }, TypeError )
	
	assert.throws( function() { types * 3 }, TypeError )
	
	assert.throws( function() { types * 8 }, TypeError )
	
	assert.throws( function() { types * 0.3 }, TypeError )
	
	assert.throws( function() { types * 0.33333333333 }, TypeError )
	
	assert.throws( function() { types * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_17.burn

mul_result_18.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { errors * nothing }, TypeError )
	
	assert.throws( function() { errors * true }, TypeError )
	
	assert.throws( function() { errors * false }, TypeError )
	
	assert.throws( function() { errors * 0 }, TypeError )
	
	assert.throws( function() { errors * 2 }, TypeError )
	
	assert.throws( function() { errors * -2 }, TypeError )
	
	assert.throws( function() { errors * 0.0 }, TypeError )
	
	assert.throws( function() { errors * 2.0 }, TypeError )
	
	assert.throws( function() { errors * -0.5 }, TypeError )
	
	assert.throws( function() { errors * "" }, TypeError )
	
	assert.throws( function() { errors * "apple" }, TypeError )
	
	assert.throws( function() { errors * "banana" }, TypeError )
	
	assert.throws( function() { errors * repr }, TypeError )
	
	assert.throws( function() { errors * function(){} }, TypeError )
	
	assert.throws( function() { errors * Something }, TypeError )
	
	assert.throws( function() { errors * Type }, TypeError )
	
	assert.throws( function() { errors * types }, TypeError )
	
	assert.throws( function() { errors * errors }, TypeError )
	
	assert.throws( function() { errors * 3 }, TypeError )
	
	assert.throws( function() { errors * 8 }, TypeError )
	
	assert.throws( function() { errors * 0.3 }, TypeError )
	
	assert.throws( function() { errors * 0.33333333333 }, TypeError )
	
	assert.throws( function() { errors * 0.7 }, TypeError )

$ $BURN --tolerant mul_result_18.burn

mul_result_19.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 3 * nothing }, TypeError )
	
	assert.throws( function() { 3 * true }, TypeError )
	
	assert.throws( function() { 3 * false }, TypeError )
	
	let $d = 3 * 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 3 * 2
	assert( $e is Integer )
	assert( $e == 6 )
	
	let $f = 3 * -2
	assert( $f is Integer )
	assert( $f == -6 )
	
	let $g = 3 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 3 * 2.0
	assert( $h is Float )
	assert( ( 5.9999 < $h ) and ( $h < 6.0001 ) )
	
	let $i = 3 * -0.5
	assert( $i is Float )
	assert( ( -1.5001 < $i ) and ( $i < -1.4999 ) )
	
	assert.throws( function() { 3 * "" }, TypeError )
	
	assert.throws( function() { 3 * "apple" }, TypeError )
	
	assert.throws( function() { 3 * "banana" }, TypeError )
	
	assert.throws( function() { 3 * repr }, TypeError )
	
	assert.throws( function() { 3 * function(){} }, TypeError )
	
	assert.throws( function() { 3 * Something }, TypeError )
	
	assert.throws( function() { 3 * Type }, TypeError )
	
	assert.throws( function() { 3 * types }, TypeError )
	
	assert.throws( function() { 3 * errors }, TypeError )
	
	let $s = 3 * 3
	assert( $s is Integer )
	assert( $s == 9 )
	
	let $t = 3 * 8
	assert( $t is Integer )
	assert( $t == 24 )
	
	let $u = 3 * 0.3
	assert( $u is Float )
	assert( ( 0.8999 < $u ) and ( $u < 0.9001 ) )
	
	let $v = 3 * 0.33333333333
	assert( $v is Float )
	assert( ( 0.9999 < $v ) and ( $v < 1.0001 ) )
	
	let $w = 3 * 0.7
	assert( $w is Float )
	assert( ( 2.0999 < $w ) and ( $w < 2.1001 ) )

$ $BURN --tolerant mul_result_19.burn

mul_result_20.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 8 * nothing }, TypeError )
	
	assert.throws( function() { 8 * true }, TypeError )
	
	assert.throws( function() { 8 * false }, TypeError )
	
	let $d = 8 * 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 8 * 2
	assert( $e is Integer )
	assert( $e == 16 )
	
	let $f = 8 * -2
	assert( $f is Integer )
	assert( $f == -16 )
	
	let $g = 8 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 8 * 2.0
	assert( $h is Float )
	assert( ( 15.9999 < $h ) and ( $h < 16.0001 ) )
	
	let $i = 8 * -0.5
	assert( $i is Float )
	assert( ( -4.0001 < $i ) and ( $i < -3.9999 ) )
	
	assert.throws( function() { 8 * "" }, TypeError )
	
	assert.throws( function() { 8 * "apple" }, TypeError )
	
	assert.throws( function() { 8 * "banana" }, TypeError )
	
	assert.throws( function() { 8 * repr }, TypeError )
	
	assert.throws( function() { 8 * function(){} }, TypeError )
	
	assert.throws( function() { 8 * Something }, TypeError )
	
	assert.throws( function() { 8 * Type }, TypeError )
	
	assert.throws( function() { 8 * types }, TypeError )
	
	assert.throws( function() { 8 * errors }, TypeError )
	
	let $s = 8 * 3
	assert( $s is Integer )
	assert( $s == 24 )
	
	let $t = 8 * 8
	assert( $t is Integer )
	assert( $t == 64 )
	
	let $u = 8 * 0.3
	assert( $u is Float )
	assert( ( 2.3999 < $u ) and ( $u < 2.4001 ) )
	
	let $v = 8 * 0.33333333333
	assert( $v is Float )
	assert( ( 2.6666 < $v ) and ( $v < 2.6668 ) )
	
	let $w = 8 * 0.7
	assert( $w is Float )
	assert( ( 5.5999 < $w ) and ( $w < 5.6001 ) )

$ $BURN --tolerant mul_result_20.burn

mul_result_21.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.3 * nothing }, TypeError )
	
	assert.throws( function() { 0.3 * true }, TypeError )
	
	assert.throws( function() { 0.3 * false }, TypeError )
	
	let $d = 0.3 * 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = 0.3 * 2
	assert( $e is Float )
	assert( ( 0.5999 < $e ) and ( $e < 0.6001 ) )
	
	let $f = 0.3 * -2
	assert( $f is Float )
	assert( ( -0.6001 < $f ) and ( $f < -0.5999 ) )
	
	let $g = 0.3 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0.3 * 2.0
	assert( $h is Float )
	assert( ( 0.5999 < $h ) and ( $h < 0.6001 ) )
	
	let $i = 0.3 * -0.5
	assert( $i is Float )
	assert( ( -0.1501 < $i ) and ( $i < -0.1499 ) )
	
	assert.throws( function() { 0.3 * "" }, TypeError )
	
	assert.throws( function() { 0.3 * "apple" }, TypeError )
	
	assert.throws( function() { 0.3 * "banana" }, TypeError )
	
	assert.throws( function() { 0.3 * repr }, TypeError )
	
	assert.throws( function() { 0.3 * function(){} }, TypeError )
	
	assert.throws( function() { 0.3 * Something }, TypeError )
	
	assert.throws( function() { 0.3 * Type }, TypeError )
	
	assert.throws( function() { 0.3 * types }, TypeError )
	
	assert.throws( function() { 0.3 * errors }, TypeError )
	
	let $s = 0.3 * 3
	assert( $s is Float )
	assert( ( 0.8999 < $s ) and ( $s < 0.9001 ) )
	
	let $t = 0.3 * 8
	assert( $t is Float )
	assert( ( 2.3999 < $t ) and ( $t < 2.4001 ) )
	
	let $u = 0.3 * 0.3
	assert( $u is Float )
	assert( ( 0.0899 < $u ) and ( $u < 0.0901 ) )
	
	let $v = 0.3 * 0.33333333333
	assert( $v is Float )
	assert( ( 0.0999 < $v ) and ( $v < 0.1001 ) )
	
	let $w = 0.3 * 0.7
	assert( $w is Float )
	assert( ( 0.2099 < $w ) and ( $w < 0.2101 ) )

$ $BURN --tolerant mul_result_21.burn

mul_result_22.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.33333333333 * nothing }, TypeError )
	
	assert.throws( function() { 0.33333333333 * true }, TypeError )
	
	assert.throws( function() { 0.33333333333 * false }, TypeError )
	
	let $d = 0.33333333333 * 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = 0.33333333333 * 2
	assert( $e is Float )
	assert( ( 0.6666 < $e ) and ( $e < 0.6668 ) )
	
	let $f = 0.33333333333 * -2
	assert( $f is Float )
	assert( ( -0.6668 < $f ) and ( $f < -0.6666 ) )
	
	let $g = 0.33333333333 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0.33333333333 * 2.0
	assert( $h is Float )
	assert( ( 0.6666 < $h ) and ( $h < 0.6668 ) )
	
	let $i = 0.33333333333 * -0.5
	assert( $i is Float )
	assert( ( -0.1668 < $i ) and ( $i < -0.1666 ) )
	
	assert.throws( function() { 0.33333333333 * "" }, TypeError )
	
	assert.throws( function() { 0.33333333333 * "apple" }, TypeError )
	
	assert.throws( function() { 0.33333333333 * "banana" }, TypeError )
	
	assert.throws( function() { 0.33333333333 * repr }, TypeError )
	
	assert.throws( function() { 0.33333333333 * function(){} }, TypeError )
	
	assert.throws( function() { 0.33333333333 * Something }, TypeError )
	
	assert.throws( function() { 0.33333333333 * Type }, TypeError )
	
	assert.throws( function() { 0.33333333333 * types }, TypeError )
	
	assert.throws( function() { 0.33333333333 * errors }, TypeError )
	
	let $s = 0.33333333333 * 3
	assert( $s is Float )
	assert( ( 0.9999 < $s ) and ( $s < 1.0001 ) )
	
	let $t = 0.33333333333 * 8
	assert( $t is Float )
	assert( ( 2.6666 < $t ) and ( $t < 2.6668 ) )
	
	let $u = 0.33333333333 * 0.3
	assert( $u is Float )
	assert( ( 0.0999 < $u ) and ( $u < 0.1001 ) )
	
	let $v = 0.33333333333 * 0.33333333333
	assert( $v is Float )
	assert( ( 0.1110 < $v ) and ( $v < 0.1112 ) )
	
	let $w = 0.33333333333 * 0.7
	assert( $w is Float )
	assert( ( 0.2332 < $w ) and ( $w < 0.2334 ) )

$ $BURN --tolerant mul_result_22.burn

mul_result_23.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.7 * nothing }, TypeError )
	
	assert.throws( function() { 0.7 * true }, TypeError )
	
	assert.throws( function() { 0.7 * false }, TypeError )
	
	let $d = 0.7 * 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = 0.7 * 2
	assert( $e is Float )
	assert( ( 1.3999 < $e ) and ( $e < 1.4001 ) )
	
	let $f = 0.7 * -2
	assert( $f is Float )
	assert( ( -1.4001 < $f ) and ( $f < -1.3999 ) )
	
	let $g = 0.7 * 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0.7 * 2.0
	assert( $h is Float )
	assert( ( 1.3999 < $h ) and ( $h < 1.4001 ) )
	
	let $i = 0.7 * -0.5
	assert( $i is Float )
	assert( ( -0.3501 < $i ) and ( $i < -0.3499 ) )
	
	assert.throws( function() { 0.7 * "" }, TypeError )
	
	assert.throws( function() { 0.7 * "apple" }, TypeError )
	
	assert.throws( function() { 0.7 * "banana" }, TypeError )
	
	assert.throws( function() { 0.7 * repr }, TypeError )
	
	assert.throws( function() { 0.7 * function(){} }, TypeError )
	
	assert.throws( function() { 0.7 * Something }, TypeError )
	
	assert.throws( function() { 0.7 * Type }, TypeError )
	
	assert.throws( function() { 0.7 * types }, TypeError )
	
	assert.throws( function() { 0.7 * errors }, TypeError )
	
	let $s = 0.7 * 3
	assert( $s is Float )
	assert( ( 2.0999 < $s ) and ( $s < 2.1001 ) )
	
	let $t = 0.7 * 8
	assert( $t is Float )
	assert( ( 5.5999 < $t ) and ( $t < 5.6001 ) )
	
	let $u = 0.7 * 0.3
	assert( $u is Float )
	assert( ( 0.2099 < $u ) and ( $u < 0.2101 ) )
	
	let $v = 0.7 * 0.33333333333
	assert( $v is Float )
	assert( ( 0.2332 < $v ) and ( $v < 0.2334 ) )
	
	let $w = 0.7 * 0.7
	assert( $w is Float )
	assert( ( 0.4899 < $w ) and ( $w < 0.4901 ) )

$ $BURN --tolerant mul_result_23.burn
