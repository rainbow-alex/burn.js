// generated by `etc/generate_operator_test.py result add`

add_result_1.burn:
	import burn.types
	import burn.errors
	
	try { nothing + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { nothing + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_1.burn

add_result_2.burn:
	import burn.types
	import burn.errors
	
	try { true + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { true + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_2.burn

add_result_3.burn:
	import burn.types
	import burn.errors
	
	try { false + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { false + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_3.burn

add_result_4.burn:
	import burn.types
	import burn.errors
	
	try { 0 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 0 + 0
	assert( $d is Integer )
	assert( $d == 0 )
	
	let $e = 0 + 2
	assert( $e is Integer )
	assert( $e == 2 )
	
	let $f = 0 + -2
	assert( $f is Integer )
	assert( $f == -2 )
	
	let $g = 0 + 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0 + 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = 0 + -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	try { 0 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 0 + 3
	assert( $s is Integer )
	assert( $s == 3 )
	
	let $t = 0 + 8
	assert( $t is Integer )
	assert( $t == 8 )
	
	let $u = 0 + 0.3
	assert( $u is Float )
	assert( ( 0.2999 < $u ) and ( $u < 0.3001 ) )
	
	let $v = 0 + 0.33333333333
	assert( $v is Float )
	assert( ( 0.3332 < $v ) and ( $v < 0.3334 ) )
	
	let $w = 0 + 0.7
	assert( $w is Float )
	assert( ( 0.6999 < $w ) and ( $w < 0.7001 ) )

$ burn --tolerant add_result_4.burn

add_result_5.burn:
	import burn.types
	import burn.errors
	
	try { 2 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 2 + 0
	assert( $d is Integer )
	assert( $d == 2 )
	
	let $e = 2 + 2
	assert( $e is Integer )
	assert( $e == 4 )
	
	let $f = 2 + -2
	assert( $f is Integer )
	assert( $f == 0 )
	
	let $g = 2 + 0.0
	assert( $g is Float )
	assert( ( 1.9999 < $g ) and ( $g < 2.0001 ) )
	
	let $h = 2 + 2.0
	assert( $h is Float )
	assert( ( 3.9999 < $h ) and ( $h < 4.0001 ) )
	
	let $i = 2 + -0.5
	assert( $i is Float )
	assert( ( 1.4999 < $i ) and ( $i < 1.5001 ) )
	
	try { 2 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 2 + 3
	assert( $s is Integer )
	assert( $s == 5 )
	
	let $t = 2 + 8
	assert( $t is Integer )
	assert( $t == 10 )
	
	let $u = 2 + 0.3
	assert( $u is Float )
	assert( ( 2.2999 < $u ) and ( $u < 2.3001 ) )
	
	let $v = 2 + 0.33333333333
	assert( $v is Float )
	assert( ( 2.3332 < $v ) and ( $v < 2.3334 ) )
	
	let $w = 2 + 0.7
	assert( $w is Float )
	assert( ( 2.6999 < $w ) and ( $w < 2.7001 ) )

$ burn --tolerant add_result_5.burn

add_result_6.burn:
	import burn.types
	import burn.errors
	
	try { -2 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = -2 + 0
	assert( $d is Integer )
	assert( $d == -2 )
	
	let $e = -2 + 2
	assert( $e is Integer )
	assert( $e == 0 )
	
	let $f = -2 + -2
	assert( $f is Integer )
	assert( $f == -4 )
	
	let $g = -2 + 0.0
	assert( $g is Float )
	assert( ( -2.0001 < $g ) and ( $g < -1.9999 ) )
	
	let $h = -2 + 2.0
	assert( $h is Float )
	assert( ( -0.0001 < $h ) and ( $h < 0.0001 ) )
	
	let $i = -2 + -0.5
	assert( $i is Float )
	assert( ( -2.5001 < $i ) and ( $i < -2.4999 ) )
	
	try { -2 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -2 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = -2 + 3
	assert( $s is Integer )
	assert( $s == 1 )
	
	let $t = -2 + 8
	assert( $t is Integer )
	assert( $t == 6 )
	
	let $u = -2 + 0.3
	assert( $u is Float )
	assert( ( -1.7001 < $u ) and ( $u < -1.6999 ) )
	
	let $v = -2 + 0.33333333333
	assert( $v is Float )
	assert( ( -1.6668 < $v ) and ( $v < -1.6666 ) )
	
	let $w = -2 + 0.7
	assert( $w is Float )
	assert( ( -1.3001 < $w ) and ( $w < -1.2999 ) )

$ burn --tolerant add_result_6.burn

add_result_7.burn:
	import burn.types
	import burn.errors
	
	try { 0.0 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 0.0 + 0
	assert( $d is Float )
	assert( ( -0.0001 < $d ) and ( $d < 0.0001 ) )
	
	let $e = 0.0 + 2
	assert( $e is Float )
	assert( ( 1.9999 < $e ) and ( $e < 2.0001 ) )
	
	let $f = 0.0 + -2
	assert( $f is Float )
	assert( ( -2.0001 < $f ) and ( $f < -1.9999 ) )
	
	let $g = 0.0 + 0.0
	assert( $g is Float )
	assert( ( -0.0001 < $g ) and ( $g < 0.0001 ) )
	
	let $h = 0.0 + 2.0
	assert( $h is Float )
	assert( ( 1.9999 < $h ) and ( $h < 2.0001 ) )
	
	let $i = 0.0 + -0.5
	assert( $i is Float )
	assert( ( -0.5001 < $i ) and ( $i < -0.4999 ) )
	
	try { 0.0 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.0 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 0.0 + 3
	assert( $s is Float )
	assert( ( 2.9999 < $s ) and ( $s < 3.0001 ) )
	
	let $t = 0.0 + 8
	assert( $t is Float )
	assert( ( 7.9999 < $t ) and ( $t < 8.0001 ) )
	
	let $u = 0.0 + 0.3
	assert( $u is Float )
	assert( ( 0.2999 < $u ) and ( $u < 0.3001 ) )
	
	let $v = 0.0 + 0.33333333333
	assert( $v is Float )
	assert( ( 0.3332 < $v ) and ( $v < 0.3334 ) )
	
	let $w = 0.0 + 0.7
	assert( $w is Float )
	assert( ( 0.6999 < $w ) and ( $w < 0.7001 ) )

$ burn --tolerant add_result_7.burn

add_result_8.burn:
	import burn.types
	import burn.errors
	
	try { 2.0 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 2.0 + 0
	assert( $d is Float )
	assert( ( 1.9999 < $d ) and ( $d < 2.0001 ) )
	
	let $e = 2.0 + 2
	assert( $e is Float )
	assert( ( 3.9999 < $e ) and ( $e < 4.0001 ) )
	
	let $f = 2.0 + -2
	assert( $f is Float )
	assert( ( -0.0001 < $f ) and ( $f < 0.0001 ) )
	
	let $g = 2.0 + 0.0
	assert( $g is Float )
	assert( ( 1.9999 < $g ) and ( $g < 2.0001 ) )
	
	let $h = 2.0 + 2.0
	assert( $h is Float )
	assert( ( 3.9999 < $h ) and ( $h < 4.0001 ) )
	
	let $i = 2.0 + -0.5
	assert( $i is Float )
	assert( ( 1.4999 < $i ) and ( $i < 1.5001 ) )
	
	try { 2.0 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 2.0 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 2.0 + 3
	assert( $s is Float )
	assert( ( 4.9999 < $s ) and ( $s < 5.0001 ) )
	
	let $t = 2.0 + 8
	assert( $t is Float )
	assert( ( 9.9999 < $t ) and ( $t < 10.0001 ) )
	
	let $u = 2.0 + 0.3
	assert( $u is Float )
	assert( ( 2.2999 < $u ) and ( $u < 2.3001 ) )
	
	let $v = 2.0 + 0.33333333333
	assert( $v is Float )
	assert( ( 2.3332 < $v ) and ( $v < 2.3334 ) )
	
	let $w = 2.0 + 0.7
	assert( $w is Float )
	assert( ( 2.6999 < $w ) and ( $w < 2.7001 ) )

$ burn --tolerant add_result_8.burn

add_result_9.burn:
	import burn.types
	import burn.errors
	
	try { -0.5 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = -0.5 + 0
	assert( $d is Float )
	assert( ( -0.5001 < $d ) and ( $d < -0.4999 ) )
	
	let $e = -0.5 + 2
	assert( $e is Float )
	assert( ( 1.4999 < $e ) and ( $e < 1.5001 ) )
	
	let $f = -0.5 + -2
	assert( $f is Float )
	assert( ( -2.5001 < $f ) and ( $f < -2.4999 ) )
	
	let $g = -0.5 + 0.0
	assert( $g is Float )
	assert( ( -0.5001 < $g ) and ( $g < -0.4999 ) )
	
	let $h = -0.5 + 2.0
	assert( $h is Float )
	assert( ( 1.4999 < $h ) and ( $h < 1.5001 ) )
	
	let $i = -0.5 + -0.5
	assert( $i is Float )
	assert( ( -1.0001 < $i ) and ( $i < -0.9999 ) )
	
	try { -0.5 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { -0.5 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = -0.5 + 3
	assert( $s is Float )
	assert( ( 2.4999 < $s ) and ( $s < 2.5001 ) )
	
	let $t = -0.5 + 8
	assert( $t is Float )
	assert( ( 7.4999 < $t ) and ( $t < 7.5001 ) )
	
	let $u = -0.5 + 0.3
	assert( $u is Float )
	assert( ( -0.2001 < $u ) and ( $u < -0.1999 ) )
	
	let $v = -0.5 + 0.33333333333
	assert( $v is Float )
	assert( ( -0.1668 < $v ) and ( $v < -0.1666 ) )
	
	let $w = -0.5 + 0.7
	assert( $w is Float )
	assert( ( 0.1999 < $w ) and ( $w < 0.2001 ) )

$ burn --tolerant add_result_9.burn

add_result_10.burn:
	import burn.types
	import burn.errors
	
	try { "" + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "" + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_10.burn

add_result_11.burn:
	import burn.types
	import burn.errors
	
	try { "apple" + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "apple" + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_11.burn

add_result_12.burn:
	import burn.types
	import burn.errors
	
	try { "banana" + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { "banana" + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_12.burn

add_result_13.burn:
	import burn.types
	import burn.errors
	
	try { repr + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { repr + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_13.burn

add_result_14.burn:
	import burn.types
	import burn.errors
	
	try { function(){} + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { function(){} + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_14.burn

add_result_15.burn:
	import burn.types
	import burn.errors
	
	try { Something + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Something + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_15.burn

add_result_16.burn:
	import burn.types
	import burn.errors
	
	try { Type + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { Type + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_16.burn

add_result_17.burn:
	import burn.types
	import burn.errors
	
	try { types + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { types + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_17.burn

add_result_18.burn:
	import burn.types
	import burn.errors
	
	try { errors + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + -2 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 0.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 2.0 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + -0.5 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 8 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 0.3 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 0.33333333333 }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { errors + 0.7 }
	catch TypeError $e {}
	else { assert( false ) }

$ burn --tolerant add_result_18.burn

add_result_19.burn:
	import burn.types
	import burn.errors
	
	try { 3 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 3 + 0
	assert( $d is Integer )
	assert( $d == 3 )
	
	let $e = 3 + 2
	assert( $e is Integer )
	assert( $e == 5 )
	
	let $f = 3 + -2
	assert( $f is Integer )
	assert( $f == 1 )
	
	let $g = 3 + 0.0
	assert( $g is Float )
	assert( ( 2.9999 < $g ) and ( $g < 3.0001 ) )
	
	let $h = 3 + 2.0
	assert( $h is Float )
	assert( ( 4.9999 < $h ) and ( $h < 5.0001 ) )
	
	let $i = 3 + -0.5
	assert( $i is Float )
	assert( ( 2.4999 < $i ) and ( $i < 2.5001 ) )
	
	try { 3 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 3 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 3 + 3
	assert( $s is Integer )
	assert( $s == 6 )
	
	let $t = 3 + 8
	assert( $t is Integer )
	assert( $t == 11 )
	
	let $u = 3 + 0.3
	assert( $u is Float )
	assert( ( 3.2999 < $u ) and ( $u < 3.3001 ) )
	
	let $v = 3 + 0.33333333333
	assert( $v is Float )
	assert( ( 3.3332 < $v ) and ( $v < 3.3334 ) )
	
	let $w = 3 + 0.7
	assert( $w is Float )
	assert( ( 3.6999 < $w ) and ( $w < 3.7001 ) )

$ burn --tolerant add_result_19.burn

add_result_20.burn:
	import burn.types
	import burn.errors
	
	try { 8 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 8 + 0
	assert( $d is Integer )
	assert( $d == 8 )
	
	let $e = 8 + 2
	assert( $e is Integer )
	assert( $e == 10 )
	
	let $f = 8 + -2
	assert( $f is Integer )
	assert( $f == 6 )
	
	let $g = 8 + 0.0
	assert( $g is Float )
	assert( ( 7.9999 < $g ) and ( $g < 8.0001 ) )
	
	let $h = 8 + 2.0
	assert( $h is Float )
	assert( ( 9.9999 < $h ) and ( $h < 10.0001 ) )
	
	let $i = 8 + -0.5
	assert( $i is Float )
	assert( ( 7.4999 < $i ) and ( $i < 7.5001 ) )
	
	try { 8 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 8 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 8 + 3
	assert( $s is Integer )
	assert( $s == 11 )
	
	let $t = 8 + 8
	assert( $t is Integer )
	assert( $t == 16 )
	
	let $u = 8 + 0.3
	assert( $u is Float )
	assert( ( 8.2999 < $u ) and ( $u < 8.3001 ) )
	
	let $v = 8 + 0.33333333333
	assert( $v is Float )
	assert( ( 8.3332 < $v ) and ( $v < 8.3334 ) )
	
	let $w = 8 + 0.7
	assert( $w is Float )
	assert( ( 8.6999 < $w ) and ( $w < 8.7001 ) )

$ burn --tolerant add_result_20.burn

add_result_21.burn:
	import burn.types
	import burn.errors
	
	try { 0.3 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 0.3 + 0
	assert( $d is Float )
	assert( ( 0.2999 < $d ) and ( $d < 0.3001 ) )
	
	let $e = 0.3 + 2
	assert( $e is Float )
	assert( ( 2.2999 < $e ) and ( $e < 2.3001 ) )
	
	let $f = 0.3 + -2
	assert( $f is Float )
	assert( ( -1.7001 < $f ) and ( $f < -1.6999 ) )
	
	let $g = 0.3 + 0.0
	assert( $g is Float )
	assert( ( 0.2999 < $g ) and ( $g < 0.3001 ) )
	
	let $h = 0.3 + 2.0
	assert( $h is Float )
	assert( ( 2.2999 < $h ) and ( $h < 2.3001 ) )
	
	let $i = 0.3 + -0.5
	assert( $i is Float )
	assert( ( -0.2001 < $i ) and ( $i < -0.1999 ) )
	
	try { 0.3 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.3 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 0.3 + 3
	assert( $s is Float )
	assert( ( 3.2999 < $s ) and ( $s < 3.3001 ) )
	
	let $t = 0.3 + 8
	assert( $t is Float )
	assert( ( 8.2999 < $t ) and ( $t < 8.3001 ) )
	
	let $u = 0.3 + 0.3
	assert( $u is Float )
	assert( ( 0.5999 < $u ) and ( $u < 0.6001 ) )
	
	let $v = 0.3 + 0.33333333333
	assert( $v is Float )
	assert( ( 0.6332 < $v ) and ( $v < 0.6334 ) )
	
	let $w = 0.3 + 0.7
	assert( $w is Float )
	assert( ( 0.9999 < $w ) and ( $w < 1.0001 ) )

$ burn --tolerant add_result_21.burn

add_result_22.burn:
	import burn.types
	import burn.errors
	
	try { 0.33333333333 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 0.33333333333 + 0
	assert( $d is Float )
	assert( ( 0.3332 < $d ) and ( $d < 0.3334 ) )
	
	let $e = 0.33333333333 + 2
	assert( $e is Float )
	assert( ( 2.3332 < $e ) and ( $e < 2.3334 ) )
	
	let $f = 0.33333333333 + -2
	assert( $f is Float )
	assert( ( -1.6668 < $f ) and ( $f < -1.6666 ) )
	
	let $g = 0.33333333333 + 0.0
	assert( $g is Float )
	assert( ( 0.3332 < $g ) and ( $g < 0.3334 ) )
	
	let $h = 0.33333333333 + 2.0
	assert( $h is Float )
	assert( ( 2.3332 < $h ) and ( $h < 2.3334 ) )
	
	let $i = 0.33333333333 + -0.5
	assert( $i is Float )
	assert( ( -0.1668 < $i ) and ( $i < -0.1666 ) )
	
	try { 0.33333333333 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.33333333333 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 0.33333333333 + 3
	assert( $s is Float )
	assert( ( 3.3332 < $s ) and ( $s < 3.3334 ) )
	
	let $t = 0.33333333333 + 8
	assert( $t is Float )
	assert( ( 8.3332 < $t ) and ( $t < 8.3334 ) )
	
	let $u = 0.33333333333 + 0.3
	assert( $u is Float )
	assert( ( 0.6332 < $u ) and ( $u < 0.6334 ) )
	
	let $v = 0.33333333333 + 0.33333333333
	assert( $v is Float )
	assert( ( 0.6666 < $v ) and ( $v < 0.6668 ) )
	
	let $w = 0.33333333333 + 0.7
	assert( $w is Float )
	assert( ( 1.0332 < $w ) and ( $w < 1.0334 ) )

$ burn --tolerant add_result_22.burn

add_result_23.burn:
	import burn.types
	import burn.errors
	
	try { 0.7 + nothing }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + true }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + false }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $d = 0.7 + 0
	assert( $d is Float )
	assert( ( 0.6999 < $d ) and ( $d < 0.7001 ) )
	
	let $e = 0.7 + 2
	assert( $e is Float )
	assert( ( 2.6999 < $e ) and ( $e < 2.7001 ) )
	
	let $f = 0.7 + -2
	assert( $f is Float )
	assert( ( -1.3001 < $f ) and ( $f < -1.2999 ) )
	
	let $g = 0.7 + 0.0
	assert( $g is Float )
	assert( ( 0.6999 < $g ) and ( $g < 0.7001 ) )
	
	let $h = 0.7 + 2.0
	assert( $h is Float )
	assert( ( 2.6999 < $h ) and ( $h < 2.7001 ) )
	
	let $i = 0.7 + -0.5
	assert( $i is Float )
	assert( ( 0.1999 < $i ) and ( $i < 0.2001 ) )
	
	try { 0.7 + "" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + "apple" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + "banana" }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + repr }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + function(){} }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + Something }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + Type }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + types }
	catch TypeError $e {}
	else { assert( false ) }
	
	try { 0.7 + errors }
	catch TypeError $e {}
	else { assert( false ) }
	
	let $s = 0.7 + 3
	assert( $s is Float )
	assert( ( 3.6999 < $s ) and ( $s < 3.7001 ) )
	
	let $t = 0.7 + 8
	assert( $t is Float )
	assert( ( 8.6999 < $t ) and ( $t < 8.7001 ) )
	
	let $u = 0.7 + 0.3
	assert( $u is Float )
	assert( ( 0.9999 < $u ) and ( $u < 1.0001 ) )
	
	let $v = 0.7 + 0.33333333333
	assert( $v is Float )
	assert( ( 1.0332 < $v ) and ( $v < 1.0334 ) )
	
	let $w = 0.7 + 0.7
	assert( $w is Float )
	assert( ( 1.3999 < $w ) and ( $w < 1.4001 ) )

$ burn --tolerant add_result_23.burn
