// generated by `etc/generate_operator_test.py add`

add_result_1.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { nothing + nothing }, TypeError )
	
	assert.throws( function() { nothing + true }, TypeError )
	
	assert.throws( function() { nothing + false }, TypeError )
	
	assert.throws( function() { nothing + 0 }, TypeError )
	
	assert.throws( function() { nothing + 2 }, TypeError )
	
	assert.throws( function() { nothing + -2 }, TypeError )
	
	assert.throws( function() { nothing + 0.0 }, TypeError )
	
	assert.throws( function() { nothing + 2.0 }, TypeError )
	
	assert.throws( function() { nothing + -0.5 }, TypeError )
	
	assert.throws( function() { nothing + "" }, TypeError )
	
	assert.throws( function() { nothing + "apple" }, TypeError )
	
	assert.throws( function() { nothing + "banana" }, TypeError )
	
	assert.throws( function() { nothing + repr }, TypeError )
	
	assert.throws( function() { nothing + function(){} }, TypeError )
	
	assert.throws( function() { nothing + Integer }, TypeError )
	
	assert.throws( function() { nothing + Type }, TypeError )
	
	assert.throws( function() { nothing + types }, TypeError )
	
	assert.throws( function() { nothing + 3 }, TypeError )
	
	assert.throws( function() { nothing + 8 }, TypeError )
	
	assert.throws( function() { nothing + 0.3 }, TypeError )
	
	assert.throws( function() { nothing + 0.33333333333 }, TypeError )
	
	assert.throws( function() { nothing + 0.7 }, TypeError )

$ $BURN --tolerant add_result_1.burn

add_result_2.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { true + nothing }, TypeError )
	
	assert.throws( function() { true + true }, TypeError )
	
	assert.throws( function() { true + false }, TypeError )
	
	assert.throws( function() { true + 0 }, TypeError )
	
	assert.throws( function() { true + 2 }, TypeError )
	
	assert.throws( function() { true + -2 }, TypeError )
	
	assert.throws( function() { true + 0.0 }, TypeError )
	
	assert.throws( function() { true + 2.0 }, TypeError )
	
	assert.throws( function() { true + -0.5 }, TypeError )
	
	assert.throws( function() { true + "" }, TypeError )
	
	assert.throws( function() { true + "apple" }, TypeError )
	
	assert.throws( function() { true + "banana" }, TypeError )
	
	assert.throws( function() { true + repr }, TypeError )
	
	assert.throws( function() { true + function(){} }, TypeError )
	
	assert.throws( function() { true + Integer }, TypeError )
	
	assert.throws( function() { true + Type }, TypeError )
	
	assert.throws( function() { true + types }, TypeError )
	
	assert.throws( function() { true + 3 }, TypeError )
	
	assert.throws( function() { true + 8 }, TypeError )
	
	assert.throws( function() { true + 0.3 }, TypeError )
	
	assert.throws( function() { true + 0.33333333333 }, TypeError )
	
	assert.throws( function() { true + 0.7 }, TypeError )

$ $BURN --tolerant add_result_2.burn

add_result_3.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { false + nothing }, TypeError )
	
	assert.throws( function() { false + true }, TypeError )
	
	assert.throws( function() { false + false }, TypeError )
	
	assert.throws( function() { false + 0 }, TypeError )
	
	assert.throws( function() { false + 2 }, TypeError )
	
	assert.throws( function() { false + -2 }, TypeError )
	
	assert.throws( function() { false + 0.0 }, TypeError )
	
	assert.throws( function() { false + 2.0 }, TypeError )
	
	assert.throws( function() { false + -0.5 }, TypeError )
	
	assert.throws( function() { false + "" }, TypeError )
	
	assert.throws( function() { false + "apple" }, TypeError )
	
	assert.throws( function() { false + "banana" }, TypeError )
	
	assert.throws( function() { false + repr }, TypeError )
	
	assert.throws( function() { false + function(){} }, TypeError )
	
	assert.throws( function() { false + Integer }, TypeError )
	
	assert.throws( function() { false + Type }, TypeError )
	
	assert.throws( function() { false + types }, TypeError )
	
	assert.throws( function() { false + 3 }, TypeError )
	
	assert.throws( function() { false + 8 }, TypeError )
	
	assert.throws( function() { false + 0.3 }, TypeError )
	
	assert.throws( function() { false + 0.33333333333 }, TypeError )
	
	assert.throws( function() { false + 0.7 }, TypeError )

$ $BURN --tolerant add_result_3.burn

add_result_4.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0 + nothing }, TypeError )
	
	assert.throws( function() { 0 + true }, TypeError )
	
	assert.throws( function() { 0 + false }, TypeError )
	
	let $v3 = 0 + 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 0 + 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = 0 + -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = 0 + 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0 + 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = 0 + -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	assert.throws( function() { 0 + "" }, TypeError )
	
	assert.throws( function() { 0 + "apple" }, TypeError )
	
	assert.throws( function() { 0 + "banana" }, TypeError )
	
	assert.throws( function() { 0 + repr }, TypeError )
	
	assert.throws( function() { 0 + function(){} }, TypeError )
	
	assert.throws( function() { 0 + Integer }, TypeError )
	
	assert.throws( function() { 0 + Type }, TypeError )
	
	assert.throws( function() { 0 + types }, TypeError )
	
	let $v17 = 0 + 3
	assert( $v17 is Integer )
	assert( $v17 == 3 )
	
	let $v18 = 0 + 8
	assert( $v18 is Integer )
	assert( $v18 == 8 )
	
	let $v19 = 0 + 0.3
	assert( $v19 is Float )
	assert( ( 0.2999 < $v19 ) and ( $v19 < 0.3001 ) )
	
	let $v20 = 0 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 0.3332 < $v20 ) and ( $v20 < 0.3334 ) )
	
	let $v21 = 0 + 0.7
	assert( $v21 is Float )
	assert( ( 0.6999 < $v21 ) and ( $v21 < 0.7001 ) )

$ $BURN --tolerant add_result_4.burn

add_result_5.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2 + nothing }, TypeError )
	
	assert.throws( function() { 2 + true }, TypeError )
	
	assert.throws( function() { 2 + false }, TypeError )
	
	let $v3 = 2 + 0
	assert( $v3 is Integer )
	assert( $v3 == 2 )
	
	let $v4 = 2 + 2
	assert( $v4 is Integer )
	assert( $v4 == 4 )
	
	let $v5 = 2 + -2
	assert( $v5 is Integer )
	assert( $v5 == 0 )
	
	let $v6 = 2 + 0.0
	assert( $v6 is Float )
	assert( ( 1.9999 < $v6 ) and ( $v6 < 2.0001 ) )
	
	let $v7 = 2 + 2.0
	assert( $v7 is Float )
	assert( ( 3.9999 < $v7 ) and ( $v7 < 4.0001 ) )
	
	let $v8 = 2 + -0.5
	assert( $v8 is Float )
	assert( ( 1.4999 < $v8 ) and ( $v8 < 1.5001 ) )
	
	assert.throws( function() { 2 + "" }, TypeError )
	
	assert.throws( function() { 2 + "apple" }, TypeError )
	
	assert.throws( function() { 2 + "banana" }, TypeError )
	
	assert.throws( function() { 2 + repr }, TypeError )
	
	assert.throws( function() { 2 + function(){} }, TypeError )
	
	assert.throws( function() { 2 + Integer }, TypeError )
	
	assert.throws( function() { 2 + Type }, TypeError )
	
	assert.throws( function() { 2 + types }, TypeError )
	
	let $v17 = 2 + 3
	assert( $v17 is Integer )
	assert( $v17 == 5 )
	
	let $v18 = 2 + 8
	assert( $v18 is Integer )
	assert( $v18 == 10 )
	
	let $v19 = 2 + 0.3
	assert( $v19 is Float )
	assert( ( 2.2999 < $v19 ) and ( $v19 < 2.3001 ) )
	
	let $v20 = 2 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 2.3332 < $v20 ) and ( $v20 < 2.3334 ) )
	
	let $v21 = 2 + 0.7
	assert( $v21 is Float )
	assert( ( 2.6999 < $v21 ) and ( $v21 < 2.7001 ) )

$ $BURN --tolerant add_result_5.burn

add_result_6.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -2 + nothing }, TypeError )
	
	assert.throws( function() { -2 + true }, TypeError )
	
	assert.throws( function() { -2 + false }, TypeError )
	
	let $v3 = -2 + 0
	assert( $v3 is Integer )
	assert( $v3 == -2 )
	
	let $v4 = -2 + 2
	assert( $v4 is Integer )
	assert( $v4 == 0 )
	
	let $v5 = -2 + -2
	assert( $v5 is Integer )
	assert( $v5 == -4 )
	
	let $v6 = -2 + 0.0
	assert( $v6 is Float )
	assert( ( -2.0001 < $v6 ) and ( $v6 < -1.9999 ) )
	
	let $v7 = -2 + 2.0
	assert( $v7 is Float )
	assert( ( -0.0001 < $v7 ) and ( $v7 < 0.0001 ) )
	
	let $v8 = -2 + -0.5
	assert( $v8 is Float )
	assert( ( -2.5001 < $v8 ) and ( $v8 < -2.4999 ) )
	
	assert.throws( function() { -2 + "" }, TypeError )
	
	assert.throws( function() { -2 + "apple" }, TypeError )
	
	assert.throws( function() { -2 + "banana" }, TypeError )
	
	assert.throws( function() { -2 + repr }, TypeError )
	
	assert.throws( function() { -2 + function(){} }, TypeError )
	
	assert.throws( function() { -2 + Integer }, TypeError )
	
	assert.throws( function() { -2 + Type }, TypeError )
	
	assert.throws( function() { -2 + types }, TypeError )
	
	let $v17 = -2 + 3
	assert( $v17 is Integer )
	assert( $v17 == 1 )
	
	let $v18 = -2 + 8
	assert( $v18 is Integer )
	assert( $v18 == 6 )
	
	let $v19 = -2 + 0.3
	assert( $v19 is Float )
	assert( ( -1.7001 < $v19 ) and ( $v19 < -1.6999 ) )
	
	let $v20 = -2 + 0.33333333333
	assert( $v20 is Float )
	assert( ( -1.6668 < $v20 ) and ( $v20 < -1.6666 ) )
	
	let $v21 = -2 + 0.7
	assert( $v21 is Float )
	assert( ( -1.3001 < $v21 ) and ( $v21 < -1.2999 ) )

$ $BURN --tolerant add_result_6.burn

add_result_7.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.0 + nothing }, TypeError )
	
	assert.throws( function() { 0.0 + true }, TypeError )
	
	assert.throws( function() { 0.0 + false }, TypeError )
	
	let $v3 = 0.0 + 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = 0.0 + 2
	assert( $v4 is Float )
	assert( ( 1.9999 < $v4 ) and ( $v4 < 2.0001 ) )
	
	let $v5 = 0.0 + -2
	assert( $v5 is Float )
	assert( ( -2.0001 < $v5 ) and ( $v5 < -1.9999 ) )
	
	let $v6 = 0.0 + 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0.0 + 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = 0.0 + -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	assert.throws( function() { 0.0 + "" }, TypeError )
	
	assert.throws( function() { 0.0 + "apple" }, TypeError )
	
	assert.throws( function() { 0.0 + "banana" }, TypeError )
	
	assert.throws( function() { 0.0 + repr }, TypeError )
	
	assert.throws( function() { 0.0 + function(){} }, TypeError )
	
	assert.throws( function() { 0.0 + Integer }, TypeError )
	
	assert.throws( function() { 0.0 + Type }, TypeError )
	
	assert.throws( function() { 0.0 + types }, TypeError )
	
	let $v17 = 0.0 + 3
	assert( $v17 is Float )
	assert( ( 2.9999 < $v17 ) and ( $v17 < 3.0001 ) )
	
	let $v18 = 0.0 + 8
	assert( $v18 is Float )
	assert( ( 7.9999 < $v18 ) and ( $v18 < 8.0001 ) )
	
	let $v19 = 0.0 + 0.3
	assert( $v19 is Float )
	assert( ( 0.2999 < $v19 ) and ( $v19 < 0.3001 ) )
	
	let $v20 = 0.0 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 0.3332 < $v20 ) and ( $v20 < 0.3334 ) )
	
	let $v21 = 0.0 + 0.7
	assert( $v21 is Float )
	assert( ( 0.6999 < $v21 ) and ( $v21 < 0.7001 ) )

$ $BURN --tolerant add_result_7.burn

add_result_8.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 2.0 + nothing }, TypeError )
	
	assert.throws( function() { 2.0 + true }, TypeError )
	
	assert.throws( function() { 2.0 + false }, TypeError )
	
	let $v3 = 2.0 + 0
	assert( $v3 is Float )
	assert( ( 1.9999 < $v3 ) and ( $v3 < 2.0001 ) )
	
	let $v4 = 2.0 + 2
	assert( $v4 is Float )
	assert( ( 3.9999 < $v4 ) and ( $v4 < 4.0001 ) )
	
	let $v5 = 2.0 + -2
	assert( $v5 is Float )
	assert( ( -0.0001 < $v5 ) and ( $v5 < 0.0001 ) )
	
	let $v6 = 2.0 + 0.0
	assert( $v6 is Float )
	assert( ( 1.9999 < $v6 ) and ( $v6 < 2.0001 ) )
	
	let $v7 = 2.0 + 2.0
	assert( $v7 is Float )
	assert( ( 3.9999 < $v7 ) and ( $v7 < 4.0001 ) )
	
	let $v8 = 2.0 + -0.5
	assert( $v8 is Float )
	assert( ( 1.4999 < $v8 ) and ( $v8 < 1.5001 ) )
	
	assert.throws( function() { 2.0 + "" }, TypeError )
	
	assert.throws( function() { 2.0 + "apple" }, TypeError )
	
	assert.throws( function() { 2.0 + "banana" }, TypeError )
	
	assert.throws( function() { 2.0 + repr }, TypeError )
	
	assert.throws( function() { 2.0 + function(){} }, TypeError )
	
	assert.throws( function() { 2.0 + Integer }, TypeError )
	
	assert.throws( function() { 2.0 + Type }, TypeError )
	
	assert.throws( function() { 2.0 + types }, TypeError )
	
	let $v17 = 2.0 + 3
	assert( $v17 is Float )
	assert( ( 4.9999 < $v17 ) and ( $v17 < 5.0001 ) )
	
	let $v18 = 2.0 + 8
	assert( $v18 is Float )
	assert( ( 9.9999 < $v18 ) and ( $v18 < 10.0001 ) )
	
	let $v19 = 2.0 + 0.3
	assert( $v19 is Float )
	assert( ( 2.2999 < $v19 ) and ( $v19 < 2.3001 ) )
	
	let $v20 = 2.0 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 2.3332 < $v20 ) and ( $v20 < 2.3334 ) )
	
	let $v21 = 2.0 + 0.7
	assert( $v21 is Float )
	assert( ( 2.6999 < $v21 ) and ( $v21 < 2.7001 ) )

$ $BURN --tolerant add_result_8.burn

add_result_9.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { -0.5 + nothing }, TypeError )
	
	assert.throws( function() { -0.5 + true }, TypeError )
	
	assert.throws( function() { -0.5 + false }, TypeError )
	
	let $v3 = -0.5 + 0
	assert( $v3 is Float )
	assert( ( -0.5001 < $v3 ) and ( $v3 < -0.4999 ) )
	
	let $v4 = -0.5 + 2
	assert( $v4 is Float )
	assert( ( 1.4999 < $v4 ) and ( $v4 < 1.5001 ) )
	
	let $v5 = -0.5 + -2
	assert( $v5 is Float )
	assert( ( -2.5001 < $v5 ) and ( $v5 < -2.4999 ) )
	
	let $v6 = -0.5 + 0.0
	assert( $v6 is Float )
	assert( ( -0.5001 < $v6 ) and ( $v6 < -0.4999 ) )
	
	let $v7 = -0.5 + 2.0
	assert( $v7 is Float )
	assert( ( 1.4999 < $v7 ) and ( $v7 < 1.5001 ) )
	
	let $v8 = -0.5 + -0.5
	assert( $v8 is Float )
	assert( ( -1.0001 < $v8 ) and ( $v8 < -0.9999 ) )
	
	assert.throws( function() { -0.5 + "" }, TypeError )
	
	assert.throws( function() { -0.5 + "apple" }, TypeError )
	
	assert.throws( function() { -0.5 + "banana" }, TypeError )
	
	assert.throws( function() { -0.5 + repr }, TypeError )
	
	assert.throws( function() { -0.5 + function(){} }, TypeError )
	
	assert.throws( function() { -0.5 + Integer }, TypeError )
	
	assert.throws( function() { -0.5 + Type }, TypeError )
	
	assert.throws( function() { -0.5 + types }, TypeError )
	
	let $v17 = -0.5 + 3
	assert( $v17 is Float )
	assert( ( 2.4999 < $v17 ) and ( $v17 < 2.5001 ) )
	
	let $v18 = -0.5 + 8
	assert( $v18 is Float )
	assert( ( 7.4999 < $v18 ) and ( $v18 < 7.5001 ) )
	
	let $v19 = -0.5 + 0.3
	assert( $v19 is Float )
	assert( ( -0.2001 < $v19 ) and ( $v19 < -0.1999 ) )
	
	let $v20 = -0.5 + 0.33333333333
	assert( $v20 is Float )
	assert( ( -0.1668 < $v20 ) and ( $v20 < -0.1666 ) )
	
	let $v21 = -0.5 + 0.7
	assert( $v21 is Float )
	assert( ( 0.1999 < $v21 ) and ( $v21 < 0.2001 ) )

$ $BURN --tolerant add_result_9.burn

add_result_10.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "" + nothing }, TypeError )
	
	assert.throws( function() { "" + true }, TypeError )
	
	assert.throws( function() { "" + false }, TypeError )
	
	assert.throws( function() { "" + 0 }, TypeError )
	
	assert.throws( function() { "" + 2 }, TypeError )
	
	assert.throws( function() { "" + -2 }, TypeError )
	
	assert.throws( function() { "" + 0.0 }, TypeError )
	
	assert.throws( function() { "" + 2.0 }, TypeError )
	
	assert.throws( function() { "" + -0.5 }, TypeError )
	
	assert.throws( function() { "" + "" }, TypeError )
	
	assert.throws( function() { "" + "apple" }, TypeError )
	
	assert.throws( function() { "" + "banana" }, TypeError )
	
	assert.throws( function() { "" + repr }, TypeError )
	
	assert.throws( function() { "" + function(){} }, TypeError )
	
	assert.throws( function() { "" + Integer }, TypeError )
	
	assert.throws( function() { "" + Type }, TypeError )
	
	assert.throws( function() { "" + types }, TypeError )
	
	assert.throws( function() { "" + 3 }, TypeError )
	
	assert.throws( function() { "" + 8 }, TypeError )
	
	assert.throws( function() { "" + 0.3 }, TypeError )
	
	assert.throws( function() { "" + 0.33333333333 }, TypeError )
	
	assert.throws( function() { "" + 0.7 }, TypeError )

$ $BURN --tolerant add_result_10.burn

add_result_11.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "apple" + nothing }, TypeError )
	
	assert.throws( function() { "apple" + true }, TypeError )
	
	assert.throws( function() { "apple" + false }, TypeError )
	
	assert.throws( function() { "apple" + 0 }, TypeError )
	
	assert.throws( function() { "apple" + 2 }, TypeError )
	
	assert.throws( function() { "apple" + -2 }, TypeError )
	
	assert.throws( function() { "apple" + 0.0 }, TypeError )
	
	assert.throws( function() { "apple" + 2.0 }, TypeError )
	
	assert.throws( function() { "apple" + -0.5 }, TypeError )
	
	assert.throws( function() { "apple" + "" }, TypeError )
	
	assert.throws( function() { "apple" + "apple" }, TypeError )
	
	assert.throws( function() { "apple" + "banana" }, TypeError )
	
	assert.throws( function() { "apple" + repr }, TypeError )
	
	assert.throws( function() { "apple" + function(){} }, TypeError )
	
	assert.throws( function() { "apple" + Integer }, TypeError )
	
	assert.throws( function() { "apple" + Type }, TypeError )
	
	assert.throws( function() { "apple" + types }, TypeError )
	
	assert.throws( function() { "apple" + 3 }, TypeError )
	
	assert.throws( function() { "apple" + 8 }, TypeError )
	
	assert.throws( function() { "apple" + 0.3 }, TypeError )
	
	assert.throws( function() { "apple" + 0.33333333333 }, TypeError )
	
	assert.throws( function() { "apple" + 0.7 }, TypeError )

$ $BURN --tolerant add_result_11.burn

add_result_12.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { "banana" + nothing }, TypeError )
	
	assert.throws( function() { "banana" + true }, TypeError )
	
	assert.throws( function() { "banana" + false }, TypeError )
	
	assert.throws( function() { "banana" + 0 }, TypeError )
	
	assert.throws( function() { "banana" + 2 }, TypeError )
	
	assert.throws( function() { "banana" + -2 }, TypeError )
	
	assert.throws( function() { "banana" + 0.0 }, TypeError )
	
	assert.throws( function() { "banana" + 2.0 }, TypeError )
	
	assert.throws( function() { "banana" + -0.5 }, TypeError )
	
	assert.throws( function() { "banana" + "" }, TypeError )
	
	assert.throws( function() { "banana" + "apple" }, TypeError )
	
	assert.throws( function() { "banana" + "banana" }, TypeError )
	
	assert.throws( function() { "banana" + repr }, TypeError )
	
	assert.throws( function() { "banana" + function(){} }, TypeError )
	
	assert.throws( function() { "banana" + Integer }, TypeError )
	
	assert.throws( function() { "banana" + Type }, TypeError )
	
	assert.throws( function() { "banana" + types }, TypeError )
	
	assert.throws( function() { "banana" + 3 }, TypeError )
	
	assert.throws( function() { "banana" + 8 }, TypeError )
	
	assert.throws( function() { "banana" + 0.3 }, TypeError )
	
	assert.throws( function() { "banana" + 0.33333333333 }, TypeError )
	
	assert.throws( function() { "banana" + 0.7 }, TypeError )

$ $BURN --tolerant add_result_12.burn

add_result_13.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { repr + nothing }, TypeError )
	
	assert.throws( function() { repr + true }, TypeError )
	
	assert.throws( function() { repr + false }, TypeError )
	
	assert.throws( function() { repr + 0 }, TypeError )
	
	assert.throws( function() { repr + 2 }, TypeError )
	
	assert.throws( function() { repr + -2 }, TypeError )
	
	assert.throws( function() { repr + 0.0 }, TypeError )
	
	assert.throws( function() { repr + 2.0 }, TypeError )
	
	assert.throws( function() { repr + -0.5 }, TypeError )
	
	assert.throws( function() { repr + "" }, TypeError )
	
	assert.throws( function() { repr + "apple" }, TypeError )
	
	assert.throws( function() { repr + "banana" }, TypeError )
	
	assert.throws( function() { repr + repr }, TypeError )
	
	assert.throws( function() { repr + function(){} }, TypeError )
	
	assert.throws( function() { repr + Integer }, TypeError )
	
	assert.throws( function() { repr + Type }, TypeError )
	
	assert.throws( function() { repr + types }, TypeError )
	
	assert.throws( function() { repr + 3 }, TypeError )
	
	assert.throws( function() { repr + 8 }, TypeError )
	
	assert.throws( function() { repr + 0.3 }, TypeError )
	
	assert.throws( function() { repr + 0.33333333333 }, TypeError )
	
	assert.throws( function() { repr + 0.7 }, TypeError )

$ $BURN --tolerant add_result_13.burn

add_result_14.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { function(){} + nothing }, TypeError )
	
	assert.throws( function() { function(){} + true }, TypeError )
	
	assert.throws( function() { function(){} + false }, TypeError )
	
	assert.throws( function() { function(){} + 0 }, TypeError )
	
	assert.throws( function() { function(){} + 2 }, TypeError )
	
	assert.throws( function() { function(){} + -2 }, TypeError )
	
	assert.throws( function() { function(){} + 0.0 }, TypeError )
	
	assert.throws( function() { function(){} + 2.0 }, TypeError )
	
	assert.throws( function() { function(){} + -0.5 }, TypeError )
	
	assert.throws( function() { function(){} + "" }, TypeError )
	
	assert.throws( function() { function(){} + "apple" }, TypeError )
	
	assert.throws( function() { function(){} + "banana" }, TypeError )
	
	assert.throws( function() { function(){} + repr }, TypeError )
	
	assert.throws( function() { function(){} + function(){} }, TypeError )
	
	assert.throws( function() { function(){} + Integer }, TypeError )
	
	assert.throws( function() { function(){} + Type }, TypeError )
	
	assert.throws( function() { function(){} + types }, TypeError )
	
	assert.throws( function() { function(){} + 3 }, TypeError )
	
	assert.throws( function() { function(){} + 8 }, TypeError )
	
	assert.throws( function() { function(){} + 0.3 }, TypeError )
	
	assert.throws( function() { function(){} + 0.33333333333 }, TypeError )
	
	assert.throws( function() { function(){} + 0.7 }, TypeError )

$ $BURN --tolerant add_result_14.burn

add_result_15.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Integer + nothing }, TypeError )
	
	assert.throws( function() { Integer + true }, TypeError )
	
	assert.throws( function() { Integer + false }, TypeError )
	
	assert.throws( function() { Integer + 0 }, TypeError )
	
	assert.throws( function() { Integer + 2 }, TypeError )
	
	assert.throws( function() { Integer + -2 }, TypeError )
	
	assert.throws( function() { Integer + 0.0 }, TypeError )
	
	assert.throws( function() { Integer + 2.0 }, TypeError )
	
	assert.throws( function() { Integer + -0.5 }, TypeError )
	
	assert.throws( function() { Integer + "" }, TypeError )
	
	assert.throws( function() { Integer + "apple" }, TypeError )
	
	assert.throws( function() { Integer + "banana" }, TypeError )
	
	assert.throws( function() { Integer + repr }, TypeError )
	
	assert.throws( function() { Integer + function(){} }, TypeError )
	
	let $v14 = Integer + Integer
	assert( $v14 is Type )
	assert( nothing is not $v14 )
	assert( 5 is $v14 )
	assert( Integer is not $v14 )
	
	let $v15 = Integer + Type
	assert( $v15 is Type )
	assert( nothing is not $v15 )
	assert( 5 is not $v15 )
	assert( Integer is not $v15 )
	
	assert.throws( function() { Integer + types }, TypeError )
	
	assert.throws( function() { Integer + 3 }, TypeError )
	
	assert.throws( function() { Integer + 8 }, TypeError )
	
	assert.throws( function() { Integer + 0.3 }, TypeError )
	
	assert.throws( function() { Integer + 0.33333333333 }, TypeError )
	
	assert.throws( function() { Integer + 0.7 }, TypeError )

$ $BURN --tolerant add_result_15.burn

add_result_16.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { Type + nothing }, TypeError )
	
	assert.throws( function() { Type + true }, TypeError )
	
	assert.throws( function() { Type + false }, TypeError )
	
	assert.throws( function() { Type + 0 }, TypeError )
	
	assert.throws( function() { Type + 2 }, TypeError )
	
	assert.throws( function() { Type + -2 }, TypeError )
	
	assert.throws( function() { Type + 0.0 }, TypeError )
	
	assert.throws( function() { Type + 2.0 }, TypeError )
	
	assert.throws( function() { Type + -0.5 }, TypeError )
	
	assert.throws( function() { Type + "" }, TypeError )
	
	assert.throws( function() { Type + "apple" }, TypeError )
	
	assert.throws( function() { Type + "banana" }, TypeError )
	
	assert.throws( function() { Type + repr }, TypeError )
	
	assert.throws( function() { Type + function(){} }, TypeError )
	
	let $v14 = Type + Integer
	assert( $v14 is Type )
	assert( nothing is not $v14 )
	assert( 5 is not $v14 )
	assert( Integer is not $v14 )
	
	let $v15 = Type + Type
	assert( $v15 is Type )
	assert( nothing is not $v15 )
	assert( 5 is not $v15 )
	assert( Integer is $v15 )
	
	assert.throws( function() { Type + types }, TypeError )
	
	assert.throws( function() { Type + 3 }, TypeError )
	
	assert.throws( function() { Type + 8 }, TypeError )
	
	assert.throws( function() { Type + 0.3 }, TypeError )
	
	assert.throws( function() { Type + 0.33333333333 }, TypeError )
	
	assert.throws( function() { Type + 0.7 }, TypeError )

$ $BURN --tolerant add_result_16.burn

add_result_17.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { types + nothing }, TypeError )
	
	assert.throws( function() { types + true }, TypeError )
	
	assert.throws( function() { types + false }, TypeError )
	
	assert.throws( function() { types + 0 }, TypeError )
	
	assert.throws( function() { types + 2 }, TypeError )
	
	assert.throws( function() { types + -2 }, TypeError )
	
	assert.throws( function() { types + 0.0 }, TypeError )
	
	assert.throws( function() { types + 2.0 }, TypeError )
	
	assert.throws( function() { types + -0.5 }, TypeError )
	
	assert.throws( function() { types + "" }, TypeError )
	
	assert.throws( function() { types + "apple" }, TypeError )
	
	assert.throws( function() { types + "banana" }, TypeError )
	
	assert.throws( function() { types + repr }, TypeError )
	
	assert.throws( function() { types + function(){} }, TypeError )
	
	assert.throws( function() { types + Integer }, TypeError )
	
	assert.throws( function() { types + Type }, TypeError )
	
	assert.throws( function() { types + types }, TypeError )
	
	assert.throws( function() { types + 3 }, TypeError )
	
	assert.throws( function() { types + 8 }, TypeError )
	
	assert.throws( function() { types + 0.3 }, TypeError )
	
	assert.throws( function() { types + 0.33333333333 }, TypeError )
	
	assert.throws( function() { types + 0.7 }, TypeError )

$ $BURN --tolerant add_result_17.burn

add_result_18.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 3 + nothing }, TypeError )
	
	assert.throws( function() { 3 + true }, TypeError )
	
	assert.throws( function() { 3 + false }, TypeError )
	
	let $v3 = 3 + 0
	assert( $v3 is Integer )
	assert( $v3 == 3 )
	
	let $v4 = 3 + 2
	assert( $v4 is Integer )
	assert( $v4 == 5 )
	
	let $v5 = 3 + -2
	assert( $v5 is Integer )
	assert( $v5 == 1 )
	
	let $v6 = 3 + 0.0
	assert( $v6 is Float )
	assert( ( 2.9999 < $v6 ) and ( $v6 < 3.0001 ) )
	
	let $v7 = 3 + 2.0
	assert( $v7 is Float )
	assert( ( 4.9999 < $v7 ) and ( $v7 < 5.0001 ) )
	
	let $v8 = 3 + -0.5
	assert( $v8 is Float )
	assert( ( 2.4999 < $v8 ) and ( $v8 < 2.5001 ) )
	
	assert.throws( function() { 3 + "" }, TypeError )
	
	assert.throws( function() { 3 + "apple" }, TypeError )
	
	assert.throws( function() { 3 + "banana" }, TypeError )
	
	assert.throws( function() { 3 + repr }, TypeError )
	
	assert.throws( function() { 3 + function(){} }, TypeError )
	
	assert.throws( function() { 3 + Integer }, TypeError )
	
	assert.throws( function() { 3 + Type }, TypeError )
	
	assert.throws( function() { 3 + types }, TypeError )
	
	let $v17 = 3 + 3
	assert( $v17 is Integer )
	assert( $v17 == 6 )
	
	let $v18 = 3 + 8
	assert( $v18 is Integer )
	assert( $v18 == 11 )
	
	let $v19 = 3 + 0.3
	assert( $v19 is Float )
	assert( ( 3.2999 < $v19 ) and ( $v19 < 3.3001 ) )
	
	let $v20 = 3 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 3.3332 < $v20 ) and ( $v20 < 3.3334 ) )
	
	let $v21 = 3 + 0.7
	assert( $v21 is Float )
	assert( ( 3.6999 < $v21 ) and ( $v21 < 3.7001 ) )

$ $BURN --tolerant add_result_18.burn

add_result_19.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 8 + nothing }, TypeError )
	
	assert.throws( function() { 8 + true }, TypeError )
	
	assert.throws( function() { 8 + false }, TypeError )
	
	let $v3 = 8 + 0
	assert( $v3 is Integer )
	assert( $v3 == 8 )
	
	let $v4 = 8 + 2
	assert( $v4 is Integer )
	assert( $v4 == 10 )
	
	let $v5 = 8 + -2
	assert( $v5 is Integer )
	assert( $v5 == 6 )
	
	let $v6 = 8 + 0.0
	assert( $v6 is Float )
	assert( ( 7.9999 < $v6 ) and ( $v6 < 8.0001 ) )
	
	let $v7 = 8 + 2.0
	assert( $v7 is Float )
	assert( ( 9.9999 < $v7 ) and ( $v7 < 10.0001 ) )
	
	let $v8 = 8 + -0.5
	assert( $v8 is Float )
	assert( ( 7.4999 < $v8 ) and ( $v8 < 7.5001 ) )
	
	assert.throws( function() { 8 + "" }, TypeError )
	
	assert.throws( function() { 8 + "apple" }, TypeError )
	
	assert.throws( function() { 8 + "banana" }, TypeError )
	
	assert.throws( function() { 8 + repr }, TypeError )
	
	assert.throws( function() { 8 + function(){} }, TypeError )
	
	assert.throws( function() { 8 + Integer }, TypeError )
	
	assert.throws( function() { 8 + Type }, TypeError )
	
	assert.throws( function() { 8 + types }, TypeError )
	
	let $v17 = 8 + 3
	assert( $v17 is Integer )
	assert( $v17 == 11 )
	
	let $v18 = 8 + 8
	assert( $v18 is Integer )
	assert( $v18 == 16 )
	
	let $v19 = 8 + 0.3
	assert( $v19 is Float )
	assert( ( 8.2999 < $v19 ) and ( $v19 < 8.3001 ) )
	
	let $v20 = 8 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 8.3332 < $v20 ) and ( $v20 < 8.3334 ) )
	
	let $v21 = 8 + 0.7
	assert( $v21 is Float )
	assert( ( 8.6999 < $v21 ) and ( $v21 < 8.7001 ) )

$ $BURN --tolerant add_result_19.burn

add_result_20.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.3 + nothing }, TypeError )
	
	assert.throws( function() { 0.3 + true }, TypeError )
	
	assert.throws( function() { 0.3 + false }, TypeError )
	
	let $v3 = 0.3 + 0
	assert( $v3 is Float )
	assert( ( 0.2999 < $v3 ) and ( $v3 < 0.3001 ) )
	
	let $v4 = 0.3 + 2
	assert( $v4 is Float )
	assert( ( 2.2999 < $v4 ) and ( $v4 < 2.3001 ) )
	
	let $v5 = 0.3 + -2
	assert( $v5 is Float )
	assert( ( -1.7001 < $v5 ) and ( $v5 < -1.6999 ) )
	
	let $v6 = 0.3 + 0.0
	assert( $v6 is Float )
	assert( ( 0.2999 < $v6 ) and ( $v6 < 0.3001 ) )
	
	let $v7 = 0.3 + 2.0
	assert( $v7 is Float )
	assert( ( 2.2999 < $v7 ) and ( $v7 < 2.3001 ) )
	
	let $v8 = 0.3 + -0.5
	assert( $v8 is Float )
	assert( ( -0.2001 < $v8 ) and ( $v8 < -0.1999 ) )
	
	assert.throws( function() { 0.3 + "" }, TypeError )
	
	assert.throws( function() { 0.3 + "apple" }, TypeError )
	
	assert.throws( function() { 0.3 + "banana" }, TypeError )
	
	assert.throws( function() { 0.3 + repr }, TypeError )
	
	assert.throws( function() { 0.3 + function(){} }, TypeError )
	
	assert.throws( function() { 0.3 + Integer }, TypeError )
	
	assert.throws( function() { 0.3 + Type }, TypeError )
	
	assert.throws( function() { 0.3 + types }, TypeError )
	
	let $v17 = 0.3 + 3
	assert( $v17 is Float )
	assert( ( 3.2999 < $v17 ) and ( $v17 < 3.3001 ) )
	
	let $v18 = 0.3 + 8
	assert( $v18 is Float )
	assert( ( 8.2999 < $v18 ) and ( $v18 < 8.3001 ) )
	
	let $v19 = 0.3 + 0.3
	assert( $v19 is Float )
	assert( ( 0.5999 < $v19 ) and ( $v19 < 0.6001 ) )
	
	let $v20 = 0.3 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 0.6332 < $v20 ) and ( $v20 < 0.6334 ) )
	
	let $v21 = 0.3 + 0.7
	assert( $v21 is Float )
	assert( ( 0.9999 < $v21 ) and ( $v21 < 1.0001 ) )

$ $BURN --tolerant add_result_20.burn

add_result_21.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.33333333333 + nothing }, TypeError )
	
	assert.throws( function() { 0.33333333333 + true }, TypeError )
	
	assert.throws( function() { 0.33333333333 + false }, TypeError )
	
	let $v3 = 0.33333333333 + 0
	assert( $v3 is Float )
	assert( ( 0.3332 < $v3 ) and ( $v3 < 0.3334 ) )
	
	let $v4 = 0.33333333333 + 2
	assert( $v4 is Float )
	assert( ( 2.3332 < $v4 ) and ( $v4 < 2.3334 ) )
	
	let $v5 = 0.33333333333 + -2
	assert( $v5 is Float )
	assert( ( -1.6668 < $v5 ) and ( $v5 < -1.6666 ) )
	
	let $v6 = 0.33333333333 + 0.0
	assert( $v6 is Float )
	assert( ( 0.3332 < $v6 ) and ( $v6 < 0.3334 ) )
	
	let $v7 = 0.33333333333 + 2.0
	assert( $v7 is Float )
	assert( ( 2.3332 < $v7 ) and ( $v7 < 2.3334 ) )
	
	let $v8 = 0.33333333333 + -0.5
	assert( $v8 is Float )
	assert( ( -0.1668 < $v8 ) and ( $v8 < -0.1666 ) )
	
	assert.throws( function() { 0.33333333333 + "" }, TypeError )
	
	assert.throws( function() { 0.33333333333 + "apple" }, TypeError )
	
	assert.throws( function() { 0.33333333333 + "banana" }, TypeError )
	
	assert.throws( function() { 0.33333333333 + repr }, TypeError )
	
	assert.throws( function() { 0.33333333333 + function(){} }, TypeError )
	
	assert.throws( function() { 0.33333333333 + Integer }, TypeError )
	
	assert.throws( function() { 0.33333333333 + Type }, TypeError )
	
	assert.throws( function() { 0.33333333333 + types }, TypeError )
	
	let $v17 = 0.33333333333 + 3
	assert( $v17 is Float )
	assert( ( 3.3332 < $v17 ) and ( $v17 < 3.3334 ) )
	
	let $v18 = 0.33333333333 + 8
	assert( $v18 is Float )
	assert( ( 8.3332 < $v18 ) and ( $v18 < 8.3334 ) )
	
	let $v19 = 0.33333333333 + 0.3
	assert( $v19 is Float )
	assert( ( 0.6332 < $v19 ) and ( $v19 < 0.6334 ) )
	
	let $v20 = 0.33333333333 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 0.6666 < $v20 ) and ( $v20 < 0.6668 ) )
	
	let $v21 = 0.33333333333 + 0.7
	assert( $v21 is Float )
	assert( ( 1.0332 < $v21 ) and ( $v21 < 1.0334 ) )

$ $BURN --tolerant add_result_21.burn

add_result_22.burn:
	import burn.types
	import burn.errors
	
	assert.throws( function() { 0.7 + nothing }, TypeError )
	
	assert.throws( function() { 0.7 + true }, TypeError )
	
	assert.throws( function() { 0.7 + false }, TypeError )
	
	let $v3 = 0.7 + 0
	assert( $v3 is Float )
	assert( ( 0.6999 < $v3 ) and ( $v3 < 0.7001 ) )
	
	let $v4 = 0.7 + 2
	assert( $v4 is Float )
	assert( ( 2.6999 < $v4 ) and ( $v4 < 2.7001 ) )
	
	let $v5 = 0.7 + -2
	assert( $v5 is Float )
	assert( ( -1.3001 < $v5 ) and ( $v5 < -1.2999 ) )
	
	let $v6 = 0.7 + 0.0
	assert( $v6 is Float )
	assert( ( 0.6999 < $v6 ) and ( $v6 < 0.7001 ) )
	
	let $v7 = 0.7 + 2.0
	assert( $v7 is Float )
	assert( ( 2.6999 < $v7 ) and ( $v7 < 2.7001 ) )
	
	let $v8 = 0.7 + -0.5
	assert( $v8 is Float )
	assert( ( 0.1999 < $v8 ) and ( $v8 < 0.2001 ) )
	
	assert.throws( function() { 0.7 + "" }, TypeError )
	
	assert.throws( function() { 0.7 + "apple" }, TypeError )
	
	assert.throws( function() { 0.7 + "banana" }, TypeError )
	
	assert.throws( function() { 0.7 + repr }, TypeError )
	
	assert.throws( function() { 0.7 + function(){} }, TypeError )
	
	assert.throws( function() { 0.7 + Integer }, TypeError )
	
	assert.throws( function() { 0.7 + Type }, TypeError )
	
	assert.throws( function() { 0.7 + types }, TypeError )
	
	let $v17 = 0.7 + 3
	assert( $v17 is Float )
	assert( ( 3.6999 < $v17 ) and ( $v17 < 3.7001 ) )
	
	let $v18 = 0.7 + 8
	assert( $v18 is Float )
	assert( ( 8.6999 < $v18 ) and ( $v18 < 8.7001 ) )
	
	let $v19 = 0.7 + 0.3
	assert( $v19 is Float )
	assert( ( 0.9999 < $v19 ) and ( $v19 < 1.0001 ) )
	
	let $v20 = 0.7 + 0.33333333333
	assert( $v20 is Float )
	assert( ( 1.0332 < $v20 ) and ( $v20 < 1.0334 ) )
	
	let $v21 = 0.7 + 0.7
	assert( $v21 is Float )
	assert( ( 1.3999 < $v21 ) and ( $v21 < 1.4001 ) )

$ $BURN --tolerant add_result_22.burn
