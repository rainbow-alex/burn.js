add_or.burn:
	assert( ( ( 1 + 0 ) or 1 ) == 1 )
	assert( ( 1 + ( 0 or 1 ) ) == 2 )
	assert( ( 1 + 0 or 1 ) == 1 )

$ $BURN add_or.burn

add_and.burn:
	assert( ( ( 1 + 1 ) and 1 ) == 1 )
	assert( ( 1 + ( 1 and 1 ) ) == 2 )
	assert( ( 1 + 1 and 1 ) == 1 )

$ $BURN add_and.burn

add_not.burn:
	1 + not 1

$ $BURN add_not.burn
	* exit status nonzero

add_is.burn:
	assert( ( ( 1 + 1 ) is Integer ) == true )
	assert.throws( function() { 1 + ( 1 is Integer ) }, TypeError )
	assert( ( 1 + 1 is Integer ) == true )

$ $BURN add_is.burn

add_is_not.burn:
	assert( ( ( 1 + 1 ) is not Integer ) == false )
	assert.throws( function() { 1 + ( 1 is not Integer ) }, TypeError )
	assert( ( 1 + 1 is not Integer ) == false )

$ $BURN add_is_not.burn

add_eq.burn:
	assert( ( ( 1 + 1 ) == 1 ) == false )
	assert.throws( function() { 1 + ( 1 == 1 ) }, TypeError )
	assert( ( 1 + 1 == 1 ) == false )

$ $BURN add_eq.burn

add_neq.burn:
	assert( ( ( 1 + 1 ) != 1 ) == true )
	assert.throws( function() { 1 + ( 1 != 1 ) }, TypeError )
	assert( ( 1 + 1 != 1 ) == true )

$ $BURN add_neq.burn

add_lt.burn:
	assert( ( ( 1 + 1 ) < 1 ) == false )
	assert.throws( function() { 1 + ( 1 < 1 ) }, TypeError )
	assert( ( 1 + 1 < 1 ) == false )

$ $BURN add_lt.burn

add_gt.burn:
	assert( ( ( 1 + 1 ) > 1 ) == true )
	assert.throws( function() { 1 + ( 1 > 1 ) }, TypeError )
	assert( ( 1 + 1 > 1 ) == true )

$ $BURN add_gt.burn

add_lteq.burn:
	assert( ( ( 1 + 1 ) <= 1 ) == false )
	assert.throws( function() { 1 + ( 1 <= 1 ) }, TypeError )
	assert( ( 1 + 1 <= 1 ) == false )

$ $BURN add_lteq.burn

add_gteq.burn:
	assert( ( ( 1 + 1 ) >= 1 ) == true )
	assert.throws( function() { 1 + ( 1 <= 1 ) }, TypeError )
	assert( ( 1 + 1 >= 1 ) == true )

$ $BURN add_gteq.burn

// TODO: add-union

add_add.burn:
	assert( ( ( 1 + 2 ) + 3 ) == 6 )
	assert( ( 1 + ( 2 + 3 ) ) == 6 )
	assert( ( 1 + 2 + 3 ) == 6 )

$ $BURN add_add.burn

add_sub.burn:
	assert( ( ( 3 + 2 ) - 1 ) == 4 )
	assert( ( 3 + ( 2 - 1 ) ) == 4 )
	assert( ( 3 + 2 - 1 ) == 4 )

$ $BURN add_sub.burn

add_mul.burn:
	assert( ( ( 1 + 1 ) * 2 ) == 4 )
	assert( ( 1 + ( 1 * 2 ) ) == 3 )
	assert( ( 1 + 1 * 2 ) == 3 )

$ $BURN add_mul.burn

// TODO: add-div
