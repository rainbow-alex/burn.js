// generated by `etc/generate_operator_test.py and`

and_result_1.burn:
	import test
	import burn.types
	
	let $v0 = nothing and nothing
	assert( $v0 is Nothing )
	
	let $v1 = nothing and true
	assert( $v1 is Nothing )
	
	let $v2 = nothing and false
	assert( $v2 is Nothing )
	
	let $v3 = nothing and 0
	assert( $v3 is Nothing )
	
	let $v4 = nothing and 2
	assert( $v4 is Nothing )
	
	let $v5 = nothing and -2
	assert( $v5 is Nothing )
	
	let $v6 = nothing and 0.0
	assert( $v6 is Nothing )
	
	let $v7 = nothing and 2.0
	assert( $v7 is Nothing )
	
	let $v8 = nothing and -0.5
	assert( $v8 is Nothing )
	
	let $v9 = nothing and "c"[0]
	assert( $v9 is Nothing )
	
	let $v10 = nothing and ""
	assert( $v10 is Nothing )
	
	let $v11 = nothing and "apple"
	assert( $v11 is Nothing )
	
	let $v12 = nothing and "banana"
	assert( $v12 is Nothing )
	
	let $v13 = nothing and b""
	assert( $v13 is Nothing )
	
	let $v14 = nothing and b"	«"
	assert( $v14 is Nothing )
	
	let $v15 = nothing and repr
	assert( $v15 is Nothing )
	
	let $v16 = nothing and function(){}
	assert( $v16 is Nothing )
	
	let $v17 = nothing and Integer
	assert( $v17 is Nothing )
	
	let $v18 = nothing and Type
	assert( $v18 is Nothing )
	
	let $v19 = nothing and types
	assert( $v19 is Nothing )

$ $BURN and_result_1.burn

and_result_2.burn:
	import test
	import burn.types
	
	let $v0 = true and nothing
	assert( $v0 is Nothing )
	
	let $v1 = true and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = true and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = true and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = true and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = true and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = true and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = true and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = true and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = true and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = true and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = true and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = true and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = true and b""
	assert( $v13 is Bytes )
	// GREP_ME operator true and b""
	
	let $v14 = true and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator true and b"	«"
	
	let $v15 = true and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = true and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = true and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = true and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = true and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_2.burn

and_result_3.burn:
	import test
	import burn.types
	
	let $v0 = false and nothing
	assert( $v0 is Boolean )
	assert( $v0 == false )
	
	let $v1 = false and true
	assert( $v1 is Boolean )
	assert( $v1 == false )
	
	let $v2 = false and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = false and 0
	assert( $v3 is Boolean )
	assert( $v3 == false )
	
	let $v4 = false and 2
	assert( $v4 is Boolean )
	assert( $v4 == false )
	
	let $v5 = false and -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	let $v6 = false and 0.0
	assert( $v6 is Boolean )
	assert( $v6 == false )
	
	let $v7 = false and 2.0
	assert( $v7 is Boolean )
	assert( $v7 == false )
	
	let $v8 = false and -0.5
	assert( $v8 is Boolean )
	assert( $v8 == false )
	
	let $v9 = false and "c"[0]
	assert( $v9 is Boolean )
	assert( $v9 == false )
	
	let $v10 = false and ""
	assert( $v10 is Boolean )
	assert( $v10 == false )
	
	let $v11 = false and "apple"
	assert( $v11 is Boolean )
	assert( $v11 == false )
	
	let $v12 = false and "banana"
	assert( $v12 is Boolean )
	assert( $v12 == false )
	
	let $v13 = false and b""
	assert( $v13 is Boolean )
	assert( $v13 == false )
	
	let $v14 = false and b"	«"
	assert( $v14 is Boolean )
	assert( $v14 == false )
	
	let $v15 = false and repr
	assert( $v15 is Boolean )
	assert( $v15 == false )
	
	let $v16 = false and function(){}
	assert( $v16 is Boolean )
	assert( $v16 == false )
	
	let $v17 = false and Integer
	assert( $v17 is Boolean )
	assert( $v17 == false )
	
	let $v18 = false and Type
	assert( $v18 is Boolean )
	assert( $v18 == false )
	
	let $v19 = false and types
	assert( $v19 is Boolean )
	assert( $v19 == false )

$ $BURN and_result_3.burn

and_result_4.burn:
	import test
	import burn.types
	
	let $v0 = 0 and nothing
	assert( $v0 is Integer )
	assert( $v0 == 0 )
	
	let $v1 = 0 and true
	assert( $v1 is Integer )
	assert( $v1 == 0 )
	
	let $v2 = 0 and false
	assert( $v2 is Integer )
	assert( $v2 == 0 )
	
	let $v3 = 0 and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 0 and 2
	assert( $v4 is Integer )
	assert( $v4 == 0 )
	
	let $v5 = 0 and -2
	assert( $v5 is Integer )
	assert( $v5 == 0 )
	
	let $v6 = 0 and 0.0
	assert( $v6 is Integer )
	assert( $v6 == 0 )
	
	let $v7 = 0 and 2.0
	assert( $v7 is Integer )
	assert( $v7 == 0 )
	
	let $v8 = 0 and -0.5
	assert( $v8 is Integer )
	assert( $v8 == 0 )
	
	let $v9 = 0 and "c"[0]
	assert( $v9 is Integer )
	assert( $v9 == 0 )
	
	let $v10 = 0 and ""
	assert( $v10 is Integer )
	assert( $v10 == 0 )
	
	let $v11 = 0 and "apple"
	assert( $v11 is Integer )
	assert( $v11 == 0 )
	
	let $v12 = 0 and "banana"
	assert( $v12 is Integer )
	assert( $v12 == 0 )
	
	let $v13 = 0 and b""
	assert( $v13 is Integer )
	assert( $v13 == 0 )
	
	let $v14 = 0 and b"	«"
	assert( $v14 is Integer )
	assert( $v14 == 0 )
	
	let $v15 = 0 and repr
	assert( $v15 is Integer )
	assert( $v15 == 0 )
	
	let $v16 = 0 and function(){}
	assert( $v16 is Integer )
	assert( $v16 == 0 )
	
	let $v17 = 0 and Integer
	assert( $v17 is Integer )
	assert( $v17 == 0 )
	
	let $v18 = 0 and Type
	assert( $v18 is Integer )
	assert( $v18 == 0 )
	
	let $v19 = 0 and types
	assert( $v19 is Integer )
	assert( $v19 == 0 )

$ $BURN and_result_4.burn

and_result_5.burn:
	import test
	import burn.types
	
	let $v0 = 2 and nothing
	assert( $v0 is Nothing )
	
	let $v1 = 2 and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = 2 and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = 2 and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 2 and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = 2 and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = 2 and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 2 and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = 2 and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = 2 and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = 2 and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = 2 and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = 2 and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = 2 and b""
	assert( $v13 is Bytes )
	// GREP_ME operator 2 and b""
	
	let $v14 = 2 and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator 2 and b"	«"
	
	let $v15 = 2 and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = 2 and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = 2 and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = 2 and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = 2 and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_5.burn

and_result_6.burn:
	import test
	import burn.types
	
	let $v0 = -2 and nothing
	assert( $v0 is Nothing )
	
	let $v1 = -2 and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = -2 and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = -2 and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = -2 and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = -2 and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = -2 and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = -2 and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = -2 and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = -2 and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = -2 and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = -2 and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = -2 and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = -2 and b""
	assert( $v13 is Bytes )
	// GREP_ME operator -2 and b""
	
	let $v14 = -2 and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator -2 and b"	«"
	
	let $v15 = -2 and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = -2 and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = -2 and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = -2 and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = -2 and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_6.burn

and_result_7.burn:
	import test
	import burn.types
	
	let $v0 = 0.0 and nothing
	assert( $v0 is Float )
	assert( ( -0.0001 < $v0 ) and ( $v0 < 0.0001 ) )
	
	let $v1 = 0.0 and true
	assert( $v1 is Float )
	assert( ( -0.0001 < $v1 ) and ( $v1 < 0.0001 ) )
	
	let $v2 = 0.0 and false
	assert( $v2 is Float )
	assert( ( -0.0001 < $v2 ) and ( $v2 < 0.0001 ) )
	
	let $v3 = 0.0 and 0
	assert( $v3 is Float )
	assert( ( -0.0001 < $v3 ) and ( $v3 < 0.0001 ) )
	
	let $v4 = 0.0 and 2
	assert( $v4 is Float )
	assert( ( -0.0001 < $v4 ) and ( $v4 < 0.0001 ) )
	
	let $v5 = 0.0 and -2
	assert( $v5 is Float )
	assert( ( -0.0001 < $v5 ) and ( $v5 < 0.0001 ) )
	
	let $v6 = 0.0 and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 0.0 and 2.0
	assert( $v7 is Float )
	assert( ( -0.0001 < $v7 ) and ( $v7 < 0.0001 ) )
	
	let $v8 = 0.0 and -0.5
	assert( $v8 is Float )
	assert( ( -0.0001 < $v8 ) and ( $v8 < 0.0001 ) )
	
	let $v9 = 0.0 and "c"[0]
	assert( $v9 is Float )
	assert( ( -0.0001 < $v9 ) and ( $v9 < 0.0001 ) )
	
	let $v10 = 0.0 and ""
	assert( $v10 is Float )
	assert( ( -0.0001 < $v10 ) and ( $v10 < 0.0001 ) )
	
	let $v11 = 0.0 and "apple"
	assert( $v11 is Float )
	assert( ( -0.0001 < $v11 ) and ( $v11 < 0.0001 ) )
	
	let $v12 = 0.0 and "banana"
	assert( $v12 is Float )
	assert( ( -0.0001 < $v12 ) and ( $v12 < 0.0001 ) )
	
	let $v13 = 0.0 and b""
	assert( $v13 is Float )
	assert( ( -0.0001 < $v13 ) and ( $v13 < 0.0001 ) )
	
	let $v14 = 0.0 and b"	«"
	assert( $v14 is Float )
	assert( ( -0.0001 < $v14 ) and ( $v14 < 0.0001 ) )
	
	let $v15 = 0.0 and repr
	assert( $v15 is Float )
	assert( ( -0.0001 < $v15 ) and ( $v15 < 0.0001 ) )
	
	let $v16 = 0.0 and function(){}
	assert( $v16 is Float )
	assert( ( -0.0001 < $v16 ) and ( $v16 < 0.0001 ) )
	
	let $v17 = 0.0 and Integer
	assert( $v17 is Float )
	assert( ( -0.0001 < $v17 ) and ( $v17 < 0.0001 ) )
	
	let $v18 = 0.0 and Type
	assert( $v18 is Float )
	assert( ( -0.0001 < $v18 ) and ( $v18 < 0.0001 ) )
	
	let $v19 = 0.0 and types
	assert( $v19 is Float )
	assert( ( -0.0001 < $v19 ) and ( $v19 < 0.0001 ) )

$ $BURN and_result_7.burn

and_result_8.burn:
	import test
	import burn.types
	
	let $v0 = 2.0 and nothing
	assert( $v0 is Nothing )
	
	let $v1 = 2.0 and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = 2.0 and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = 2.0 and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = 2.0 and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = 2.0 and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = 2.0 and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = 2.0 and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = 2.0 and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = 2.0 and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = 2.0 and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = 2.0 and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = 2.0 and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = 2.0 and b""
	assert( $v13 is Bytes )
	// GREP_ME operator 2.0 and b""
	
	let $v14 = 2.0 and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator 2.0 and b"	«"
	
	let $v15 = 2.0 and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = 2.0 and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = 2.0 and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = 2.0 and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = 2.0 and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_8.burn

and_result_9.burn:
	import test
	import burn.types
	
	let $v0 = -0.5 and nothing
	assert( $v0 is Nothing )
	
	let $v1 = -0.5 and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = -0.5 and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = -0.5 and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = -0.5 and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = -0.5 and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = -0.5 and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = -0.5 and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = -0.5 and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = -0.5 and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = -0.5 and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = -0.5 and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = -0.5 and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = -0.5 and b""
	assert( $v13 is Bytes )
	// GREP_ME operator -0.5 and b""
	
	let $v14 = -0.5 and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator -0.5 and b"	«"
	
	let $v15 = -0.5 and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = -0.5 and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = -0.5 and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = -0.5 and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = -0.5 and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_9.burn

and_result_10.burn:
	import test
	import burn.types
	
	let $v0 = "c"[0] and nothing
	assert( $v0 is Nothing )
	
	let $v1 = "c"[0] and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = "c"[0] and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = "c"[0] and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = "c"[0] and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = "c"[0] and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = "c"[0] and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = "c"[0] and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = "c"[0] and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = "c"[0] and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = "c"[0] and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = "c"[0] and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = "c"[0] and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = "c"[0] and b""
	assert( $v13 is Bytes )
	// GREP_ME operator "c"[0] and b""
	
	let $v14 = "c"[0] and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator "c"[0] and b"	«"
	
	let $v15 = "c"[0] and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = "c"[0] and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = "c"[0] and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = "c"[0] and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = "c"[0] and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_10.burn

and_result_11.burn:
	import test
	import burn.types
	
	let $v0 = "" and nothing
	assert( $v0 is String )
	assert( $v0 == "" )
	
	let $v1 = "" and true
	assert( $v1 is String )
	assert( $v1 == "" )
	
	let $v2 = "" and false
	assert( $v2 is String )
	assert( $v2 == "" )
	
	let $v3 = "" and 0
	assert( $v3 is String )
	assert( $v3 == "" )
	
	let $v4 = "" and 2
	assert( $v4 is String )
	assert( $v4 == "" )
	
	let $v5 = "" and -2
	assert( $v5 is String )
	assert( $v5 == "" )
	
	let $v6 = "" and 0.0
	assert( $v6 is String )
	assert( $v6 == "" )
	
	let $v7 = "" and 2.0
	assert( $v7 is String )
	assert( $v7 == "" )
	
	let $v8 = "" and -0.5
	assert( $v8 is String )
	assert( $v8 == "" )
	
	let $v9 = "" and "c"[0]
	assert( $v9 is String )
	assert( $v9 == "" )
	
	let $v10 = "" and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = "" and "apple"
	assert( $v11 is String )
	assert( $v11 == "" )
	
	let $v12 = "" and "banana"
	assert( $v12 is String )
	assert( $v12 == "" )
	
	let $v13 = "" and b""
	assert( $v13 is String )
	assert( $v13 == "" )
	
	let $v14 = "" and b"	«"
	assert( $v14 is String )
	assert( $v14 == "" )
	
	let $v15 = "" and repr
	assert( $v15 is String )
	assert( $v15 == "" )
	
	let $v16 = "" and function(){}
	assert( $v16 is String )
	assert( $v16 == "" )
	
	let $v17 = "" and Integer
	assert( $v17 is String )
	assert( $v17 == "" )
	
	let $v18 = "" and Type
	assert( $v18 is String )
	assert( $v18 == "" )
	
	let $v19 = "" and types
	assert( $v19 is String )
	assert( $v19 == "" )

$ $BURN and_result_11.burn

and_result_12.burn:
	import test
	import burn.types
	
	let $v0 = "apple" and nothing
	assert( $v0 is Nothing )
	
	let $v1 = "apple" and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = "apple" and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = "apple" and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = "apple" and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = "apple" and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = "apple" and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = "apple" and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = "apple" and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = "apple" and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = "apple" and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = "apple" and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = "apple" and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = "apple" and b""
	assert( $v13 is Bytes )
	// GREP_ME operator "apple" and b""
	
	let $v14 = "apple" and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator "apple" and b"	«"
	
	let $v15 = "apple" and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = "apple" and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = "apple" and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = "apple" and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = "apple" and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_12.burn

and_result_13.burn:
	import test
	import burn.types
	
	let $v0 = "banana" and nothing
	assert( $v0 is Nothing )
	
	let $v1 = "banana" and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = "banana" and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = "banana" and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = "banana" and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = "banana" and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = "banana" and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = "banana" and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = "banana" and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = "banana" and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = "banana" and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = "banana" and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = "banana" and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = "banana" and b""
	assert( $v13 is Bytes )
	// GREP_ME operator "banana" and b""
	
	let $v14 = "banana" and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator "banana" and b"	«"
	
	let $v15 = "banana" and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = "banana" and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = "banana" and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = "banana" and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = "banana" and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_13.burn

and_result_14.burn:
	import test
	import burn.types
	
	let $v0 = b"" and nothing
	assert( $v0 is Bytes )
	// GREP_ME operator b"" and nothing
	
	let $v1 = b"" and true
	assert( $v1 is Bytes )
	// GREP_ME operator b"" and true
	
	let $v2 = b"" and false
	assert( $v2 is Bytes )
	// GREP_ME operator b"" and false
	
	let $v3 = b"" and 0
	assert( $v3 is Bytes )
	// GREP_ME operator b"" and 0
	
	let $v4 = b"" and 2
	assert( $v4 is Bytes )
	// GREP_ME operator b"" and 2
	
	let $v5 = b"" and -2
	assert( $v5 is Bytes )
	// GREP_ME operator b"" and -2
	
	let $v6 = b"" and 0.0
	assert( $v6 is Bytes )
	// GREP_ME operator b"" and 0.0
	
	let $v7 = b"" and 2.0
	assert( $v7 is Bytes )
	// GREP_ME operator b"" and 2.0
	
	let $v8 = b"" and -0.5
	assert( $v8 is Bytes )
	// GREP_ME operator b"" and -0.5
	
	let $v9 = b"" and "c"[0]
	assert( $v9 is Bytes )
	// GREP_ME operator b"" and "c"[0]
	
	let $v10 = b"" and ""
	assert( $v10 is Bytes )
	// GREP_ME operator b"" and ""
	
	let $v11 = b"" and "apple"
	assert( $v11 is Bytes )
	// GREP_ME operator b"" and "apple"
	
	let $v12 = b"" and "banana"
	assert( $v12 is Bytes )
	// GREP_ME operator b"" and "banana"
	
	let $v13 = b"" and b""
	assert( $v13 is Bytes )
	// GREP_ME operator b"" and b""
	
	let $v14 = b"" and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator b"" and b"	«"
	
	let $v15 = b"" and repr
	assert( $v15 is Bytes )
	// GREP_ME operator b"" and repr
	
	let $v16 = b"" and function(){}
	assert( $v16 is Bytes )
	// GREP_ME operator b"" and function(){}
	
	let $v17 = b"" and Integer
	assert( $v17 is Bytes )
	// GREP_ME operator b"" and Integer
	
	let $v18 = b"" and Type
	assert( $v18 is Bytes )
	// GREP_ME operator b"" and Type
	
	let $v19 = b"" and types
	assert( $v19 is Bytes )
	// GREP_ME operator b"" and types

$ $BURN and_result_14.burn

and_result_15.burn:
	import test
	import burn.types
	
	let $v0 = b"	«" and nothing
	assert( $v0 is Nothing )
	
	let $v1 = b"	«" and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = b"	«" and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = b"	«" and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = b"	«" and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = b"	«" and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = b"	«" and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = b"	«" and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = b"	«" and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = b"	«" and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = b"	«" and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = b"	«" and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = b"	«" and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = b"	«" and b""
	assert( $v13 is Bytes )
	// GREP_ME operator b"	«" and b""
	
	let $v14 = b"	«" and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator b"	«" and b"	«"
	
	let $v15 = b"	«" and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = b"	«" and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = b"	«" and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = b"	«" and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = b"	«" and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_15.burn

and_result_16.burn:
	import test
	import burn.types
	
	let $v0 = repr and nothing
	assert( $v0 is Nothing )
	
	let $v1 = repr and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = repr and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = repr and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = repr and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = repr and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = repr and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = repr and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = repr and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = repr and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = repr and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = repr and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = repr and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = repr and b""
	assert( $v13 is Bytes )
	// GREP_ME operator repr and b""
	
	let $v14 = repr and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator repr and b"	«"
	
	let $v15 = repr and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = repr and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = repr and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = repr and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = repr and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_16.burn

and_result_17.burn:
	import test
	import burn.types
	
	let $v0 = function(){} and nothing
	assert( $v0 is Nothing )
	
	let $v1 = function(){} and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = function(){} and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = function(){} and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = function(){} and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = function(){} and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = function(){} and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = function(){} and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = function(){} and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = function(){} and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = function(){} and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = function(){} and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = function(){} and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = function(){} and b""
	assert( $v13 is Bytes )
	// GREP_ME operator function(){} and b""
	
	let $v14 = function(){} and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator function(){} and b"	«"
	
	let $v15 = function(){} and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = function(){} and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = function(){} and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = function(){} and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = function(){} and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_17.burn

and_result_18.burn:
	import test
	import burn.types
	
	let $v0 = Integer and nothing
	assert( $v0 is Nothing )
	
	let $v1 = Integer and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = Integer and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = Integer and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = Integer and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = Integer and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = Integer and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = Integer and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = Integer and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = Integer and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = Integer and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = Integer and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = Integer and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = Integer and b""
	assert( $v13 is Bytes )
	// GREP_ME operator Integer and b""
	
	let $v14 = Integer and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator Integer and b"	«"
	
	let $v15 = Integer and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = Integer and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = Integer and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = Integer and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = Integer and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_18.burn

and_result_19.burn:
	import test
	import burn.types
	
	let $v0 = Type and nothing
	assert( $v0 is Nothing )
	
	let $v1 = Type and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = Type and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = Type and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = Type and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = Type and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = Type and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = Type and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = Type and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = Type and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = Type and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = Type and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = Type and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = Type and b""
	assert( $v13 is Bytes )
	// GREP_ME operator Type and b""
	
	let $v14 = Type and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator Type and b"	«"
	
	let $v15 = Type and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = Type and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = Type and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = Type and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = Type and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_19.burn

and_result_20.burn:
	import test
	import burn.types
	
	let $v0 = types and nothing
	assert( $v0 is Nothing )
	
	let $v1 = types and true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = types and false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	let $v3 = types and 0
	assert( $v3 is Integer )
	assert( $v3 == 0 )
	
	let $v4 = types and 2
	assert( $v4 is Integer )
	assert( $v4 == 2 )
	
	let $v5 = types and -2
	assert( $v5 is Integer )
	assert( $v5 == -2 )
	
	let $v6 = types and 0.0
	assert( $v6 is Float )
	assert( ( -0.0001 < $v6 ) and ( $v6 < 0.0001 ) )
	
	let $v7 = types and 2.0
	assert( $v7 is Float )
	assert( ( 1.9999 < $v7 ) and ( $v7 < 2.0001 ) )
	
	let $v8 = types and -0.5
	assert( $v8 is Float )
	assert( ( -0.5001 < $v8 ) and ( $v8 < -0.4999 ) )
	
	let $v9 = types and "c"[0]
	assert( $v9 is Character )
	assert( $v9 == "c"[0] )
	
	let $v10 = types and ""
	assert( $v10 is String )
	assert( $v10 == "" )
	
	let $v11 = types and "apple"
	assert( $v11 is String )
	assert( $v11 == "apple" )
	
	let $v12 = types and "banana"
	assert( $v12 is String )
	assert( $v12 == "banana" )
	
	let $v13 = types and b""
	assert( $v13 is Bytes )
	// GREP_ME operator types and b""
	
	let $v14 = types and b"	«"
	assert( $v14 is Bytes )
	// GREP_ME operator types and b"	«"
	
	let $v15 = types and repr
	assert( $v15 is Function )
	assert( $v15 == repr )
	
	let $v16 = types and function(){}
	assert( $v16 is Function )
	assert( $v16 is Function )
	
	let $v17 = types and Integer
	assert( $v17 is Type )
	assert( $v17 is Type )
	
	let $v18 = types and Type
	assert( $v18 is Type )
	assert( $v18 is Type )
	
	let $v19 = types and types
	assert( $v19 is Module )
	assert( $v19 == types )

$ $BURN and_result_20.burn
