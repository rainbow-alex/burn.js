// generated by `etc/generate_operator_test.py neq`

neq_result_1.burn:
	import test
	import burn.types
	
	let $v0 = nothing != nothing
	assert( $v0 is Boolean )
	assert( $v0 == false )
	
	test.assert_throws( function() { nothing != true }, TypeError )
	
	test.assert_throws( function() { nothing != false }, TypeError )
	
	test.assert_throws( function() { nothing != 0 }, TypeError )
	
	test.assert_throws( function() { nothing != 2 }, TypeError )
	
	test.assert_throws( function() { nothing != -2 }, TypeError )
	
	test.assert_throws( function() { nothing != 0.0 }, TypeError )
	
	test.assert_throws( function() { nothing != 2.0 }, TypeError )
	
	test.assert_throws( function() { nothing != -0.5 }, TypeError )
	
	test.assert_throws( function() { nothing != "c"[0] }, TypeError )
	
	test.assert_throws( function() { nothing != "" }, TypeError )
	
	test.assert_throws( function() { nothing != "apple" }, TypeError )
	
	test.assert_throws( function() { nothing != "banana" }, TypeError )
	
	test.assert_throws( function() { nothing != b"" }, TypeError )
	
	test.assert_throws( function() { nothing != b"	«" }, TypeError )
	
	test.assert_throws( function() { nothing != repr }, TypeError )
	
	test.assert_throws( function() { nothing != function(){} }, TypeError )
	
	test.assert_throws( function() { nothing != Integer }, TypeError )
	
	test.assert_throws( function() { nothing != Type }, TypeError )
	
	test.assert_throws( function() { nothing != types }, TypeError )

$ $BURN neq_result_1.burn

neq_result_2.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { true != nothing }, TypeError )
	
	let $v1 = true != true
	assert( $v1 is Boolean )
	assert( $v1 == false )
	
	let $v2 = true != false
	assert( $v2 is Boolean )
	assert( $v2 == true )
	
	test.assert_throws( function() { true != 0 }, TypeError )
	
	test.assert_throws( function() { true != 2 }, TypeError )
	
	test.assert_throws( function() { true != -2 }, TypeError )
	
	test.assert_throws( function() { true != 0.0 }, TypeError )
	
	test.assert_throws( function() { true != 2.0 }, TypeError )
	
	test.assert_throws( function() { true != -0.5 }, TypeError )
	
	test.assert_throws( function() { true != "c"[0] }, TypeError )
	
	test.assert_throws( function() { true != "" }, TypeError )
	
	test.assert_throws( function() { true != "apple" }, TypeError )
	
	test.assert_throws( function() { true != "banana" }, TypeError )
	
	test.assert_throws( function() { true != b"" }, TypeError )
	
	test.assert_throws( function() { true != b"	«" }, TypeError )
	
	test.assert_throws( function() { true != repr }, TypeError )
	
	test.assert_throws( function() { true != function(){} }, TypeError )
	
	test.assert_throws( function() { true != Integer }, TypeError )
	
	test.assert_throws( function() { true != Type }, TypeError )
	
	test.assert_throws( function() { true != types }, TypeError )

$ $BURN neq_result_2.burn

neq_result_3.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { false != nothing }, TypeError )
	
	let $v1 = false != true
	assert( $v1 is Boolean )
	assert( $v1 == true )
	
	let $v2 = false != false
	assert( $v2 is Boolean )
	assert( $v2 == false )
	
	test.assert_throws( function() { false != 0 }, TypeError )
	
	test.assert_throws( function() { false != 2 }, TypeError )
	
	test.assert_throws( function() { false != -2 }, TypeError )
	
	test.assert_throws( function() { false != 0.0 }, TypeError )
	
	test.assert_throws( function() { false != 2.0 }, TypeError )
	
	test.assert_throws( function() { false != -0.5 }, TypeError )
	
	test.assert_throws( function() { false != "c"[0] }, TypeError )
	
	test.assert_throws( function() { false != "" }, TypeError )
	
	test.assert_throws( function() { false != "apple" }, TypeError )
	
	test.assert_throws( function() { false != "banana" }, TypeError )
	
	test.assert_throws( function() { false != b"" }, TypeError )
	
	test.assert_throws( function() { false != b"	«" }, TypeError )
	
	test.assert_throws( function() { false != repr }, TypeError )
	
	test.assert_throws( function() { false != function(){} }, TypeError )
	
	test.assert_throws( function() { false != Integer }, TypeError )
	
	test.assert_throws( function() { false != Type }, TypeError )
	
	test.assert_throws( function() { false != types }, TypeError )

$ $BURN neq_result_3.burn

neq_result_4.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { 0 != nothing }, TypeError )
	
	test.assert_throws( function() { 0 != true }, TypeError )
	
	test.assert_throws( function() { 0 != false }, TypeError )
	
	let $v3 = 0 != 0
	assert( $v3 is Boolean )
	assert( $v3 == false )
	
	let $v4 = 0 != 2
	assert( $v4 is Boolean )
	assert( $v4 == true )
	
	let $v5 = 0 != -2
	assert( $v5 is Boolean )
	assert( $v5 == true )
	
	test.assert_throws( function() { 0 != 0.0 }, TypeError )
	
	test.assert_throws( function() { 0 != 2.0 }, TypeError )
	
	test.assert_throws( function() { 0 != -0.5 }, TypeError )
	
	test.assert_throws( function() { 0 != "c"[0] }, TypeError )
	
	test.assert_throws( function() { 0 != "" }, TypeError )
	
	test.assert_throws( function() { 0 != "apple" }, TypeError )
	
	test.assert_throws( function() { 0 != "banana" }, TypeError )
	
	test.assert_throws( function() { 0 != b"" }, TypeError )
	
	test.assert_throws( function() { 0 != b"	«" }, TypeError )
	
	test.assert_throws( function() { 0 != repr }, TypeError )
	
	test.assert_throws( function() { 0 != function(){} }, TypeError )
	
	test.assert_throws( function() { 0 != Integer }, TypeError )
	
	test.assert_throws( function() { 0 != Type }, TypeError )
	
	test.assert_throws( function() { 0 != types }, TypeError )

$ $BURN neq_result_4.burn

neq_result_5.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { 2 != nothing }, TypeError )
	
	test.assert_throws( function() { 2 != true }, TypeError )
	
	test.assert_throws( function() { 2 != false }, TypeError )
	
	let $v3 = 2 != 0
	assert( $v3 is Boolean )
	assert( $v3 == true )
	
	let $v4 = 2 != 2
	assert( $v4 is Boolean )
	assert( $v4 == false )
	
	let $v5 = 2 != -2
	assert( $v5 is Boolean )
	assert( $v5 == true )
	
	test.assert_throws( function() { 2 != 0.0 }, TypeError )
	
	test.assert_throws( function() { 2 != 2.0 }, TypeError )
	
	test.assert_throws( function() { 2 != -0.5 }, TypeError )
	
	test.assert_throws( function() { 2 != "c"[0] }, TypeError )
	
	test.assert_throws( function() { 2 != "" }, TypeError )
	
	test.assert_throws( function() { 2 != "apple" }, TypeError )
	
	test.assert_throws( function() { 2 != "banana" }, TypeError )
	
	test.assert_throws( function() { 2 != b"" }, TypeError )
	
	test.assert_throws( function() { 2 != b"	«" }, TypeError )
	
	test.assert_throws( function() { 2 != repr }, TypeError )
	
	test.assert_throws( function() { 2 != function(){} }, TypeError )
	
	test.assert_throws( function() { 2 != Integer }, TypeError )
	
	test.assert_throws( function() { 2 != Type }, TypeError )
	
	test.assert_throws( function() { 2 != types }, TypeError )

$ $BURN neq_result_5.burn

neq_result_6.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { -2 != nothing }, TypeError )
	
	test.assert_throws( function() { -2 != true }, TypeError )
	
	test.assert_throws( function() { -2 != false }, TypeError )
	
	let $v3 = -2 != 0
	assert( $v3 is Boolean )
	assert( $v3 == true )
	
	let $v4 = -2 != 2
	assert( $v4 is Boolean )
	assert( $v4 == true )
	
	let $v5 = -2 != -2
	assert( $v5 is Boolean )
	assert( $v5 == false )
	
	test.assert_throws( function() { -2 != 0.0 }, TypeError )
	
	test.assert_throws( function() { -2 != 2.0 }, TypeError )
	
	test.assert_throws( function() { -2 != -0.5 }, TypeError )
	
	test.assert_throws( function() { -2 != "c"[0] }, TypeError )
	
	test.assert_throws( function() { -2 != "" }, TypeError )
	
	test.assert_throws( function() { -2 != "apple" }, TypeError )
	
	test.assert_throws( function() { -2 != "banana" }, TypeError )
	
	test.assert_throws( function() { -2 != b"" }, TypeError )
	
	test.assert_throws( function() { -2 != b"	«" }, TypeError )
	
	test.assert_throws( function() { -2 != repr }, TypeError )
	
	test.assert_throws( function() { -2 != function(){} }, TypeError )
	
	test.assert_throws( function() { -2 != Integer }, TypeError )
	
	test.assert_throws( function() { -2 != Type }, TypeError )
	
	test.assert_throws( function() { -2 != types }, TypeError )

$ $BURN neq_result_6.burn

neq_result_7.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { 0.0 != nothing }, TypeError )
	
	test.assert_throws( function() { 0.0 != true }, TypeError )
	
	test.assert_throws( function() { 0.0 != false }, TypeError )
	
	test.assert_throws( function() { 0.0 != 0 }, TypeError )
	
	test.assert_throws( function() { 0.0 != 2 }, TypeError )
	
	test.assert_throws( function() { 0.0 != -2 }, TypeError )
	
	let $v6 = 0.0 != 0.0
	assert( $v6 is Boolean )
	assert( $v6 == false )
	
	let $v7 = 0.0 != 2.0
	assert( $v7 is Boolean )
	assert( $v7 == true )
	
	let $v8 = 0.0 != -0.5
	assert( $v8 is Boolean )
	assert( $v8 == true )
	
	test.assert_throws( function() { 0.0 != "c"[0] }, TypeError )
	
	test.assert_throws( function() { 0.0 != "" }, TypeError )
	
	test.assert_throws( function() { 0.0 != "apple" }, TypeError )
	
	test.assert_throws( function() { 0.0 != "banana" }, TypeError )
	
	test.assert_throws( function() { 0.0 != b"" }, TypeError )
	
	test.assert_throws( function() { 0.0 != b"	«" }, TypeError )
	
	test.assert_throws( function() { 0.0 != repr }, TypeError )
	
	test.assert_throws( function() { 0.0 != function(){} }, TypeError )
	
	test.assert_throws( function() { 0.0 != Integer }, TypeError )
	
	test.assert_throws( function() { 0.0 != Type }, TypeError )
	
	test.assert_throws( function() { 0.0 != types }, TypeError )

$ $BURN neq_result_7.burn

neq_result_8.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { 2.0 != nothing }, TypeError )
	
	test.assert_throws( function() { 2.0 != true }, TypeError )
	
	test.assert_throws( function() { 2.0 != false }, TypeError )
	
	test.assert_throws( function() { 2.0 != 0 }, TypeError )
	
	test.assert_throws( function() { 2.0 != 2 }, TypeError )
	
	test.assert_throws( function() { 2.0 != -2 }, TypeError )
	
	let $v6 = 2.0 != 0.0
	assert( $v6 is Boolean )
	assert( $v6 == true )
	
	let $v7 = 2.0 != 2.0
	assert( $v7 is Boolean )
	assert( $v7 == false )
	
	let $v8 = 2.0 != -0.5
	assert( $v8 is Boolean )
	assert( $v8 == true )
	
	test.assert_throws( function() { 2.0 != "c"[0] }, TypeError )
	
	test.assert_throws( function() { 2.0 != "" }, TypeError )
	
	test.assert_throws( function() { 2.0 != "apple" }, TypeError )
	
	test.assert_throws( function() { 2.0 != "banana" }, TypeError )
	
	test.assert_throws( function() { 2.0 != b"" }, TypeError )
	
	test.assert_throws( function() { 2.0 != b"	«" }, TypeError )
	
	test.assert_throws( function() { 2.0 != repr }, TypeError )
	
	test.assert_throws( function() { 2.0 != function(){} }, TypeError )
	
	test.assert_throws( function() { 2.0 != Integer }, TypeError )
	
	test.assert_throws( function() { 2.0 != Type }, TypeError )
	
	test.assert_throws( function() { 2.0 != types }, TypeError )

$ $BURN neq_result_8.burn

neq_result_9.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { -0.5 != nothing }, TypeError )
	
	test.assert_throws( function() { -0.5 != true }, TypeError )
	
	test.assert_throws( function() { -0.5 != false }, TypeError )
	
	test.assert_throws( function() { -0.5 != 0 }, TypeError )
	
	test.assert_throws( function() { -0.5 != 2 }, TypeError )
	
	test.assert_throws( function() { -0.5 != -2 }, TypeError )
	
	let $v6 = -0.5 != 0.0
	assert( $v6 is Boolean )
	assert( $v6 == true )
	
	let $v7 = -0.5 != 2.0
	assert( $v7 is Boolean )
	assert( $v7 == true )
	
	let $v8 = -0.5 != -0.5
	assert( $v8 is Boolean )
	assert( $v8 == false )
	
	test.assert_throws( function() { -0.5 != "c"[0] }, TypeError )
	
	test.assert_throws( function() { -0.5 != "" }, TypeError )
	
	test.assert_throws( function() { -0.5 != "apple" }, TypeError )
	
	test.assert_throws( function() { -0.5 != "banana" }, TypeError )
	
	test.assert_throws( function() { -0.5 != b"" }, TypeError )
	
	test.assert_throws( function() { -0.5 != b"	«" }, TypeError )
	
	test.assert_throws( function() { -0.5 != repr }, TypeError )
	
	test.assert_throws( function() { -0.5 != function(){} }, TypeError )
	
	test.assert_throws( function() { -0.5 != Integer }, TypeError )
	
	test.assert_throws( function() { -0.5 != Type }, TypeError )
	
	test.assert_throws( function() { -0.5 != types }, TypeError )

$ $BURN neq_result_9.burn

neq_result_10.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { "c"[0] != nothing }, TypeError )
	
	test.assert_throws( function() { "c"[0] != true }, TypeError )
	
	test.assert_throws( function() { "c"[0] != false }, TypeError )
	
	test.assert_throws( function() { "c"[0] != 0 }, TypeError )
	
	test.assert_throws( function() { "c"[0] != 2 }, TypeError )
	
	test.assert_throws( function() { "c"[0] != -2 }, TypeError )
	
	test.assert_throws( function() { "c"[0] != 0.0 }, TypeError )
	
	test.assert_throws( function() { "c"[0] != 2.0 }, TypeError )
	
	test.assert_throws( function() { "c"[0] != -0.5 }, TypeError )
	
	let $v9 = "c"[0] != "c"[0]
	assert( $v9 is Boolean )
	assert( $v9 == false )
	
	test.assert_throws( function() { "c"[0] != "" }, TypeError )
	
	test.assert_throws( function() { "c"[0] != "apple" }, TypeError )
	
	test.assert_throws( function() { "c"[0] != "banana" }, TypeError )
	
	test.assert_throws( function() { "c"[0] != b"" }, TypeError )
	
	test.assert_throws( function() { "c"[0] != b"	«" }, TypeError )
	
	test.assert_throws( function() { "c"[0] != repr }, TypeError )
	
	test.assert_throws( function() { "c"[0] != function(){} }, TypeError )
	
	test.assert_throws( function() { "c"[0] != Integer }, TypeError )
	
	test.assert_throws( function() { "c"[0] != Type }, TypeError )
	
	test.assert_throws( function() { "c"[0] != types }, TypeError )

$ $BURN neq_result_10.burn

neq_result_11.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { "" != nothing }, TypeError )
	
	test.assert_throws( function() { "" != true }, TypeError )
	
	test.assert_throws( function() { "" != false }, TypeError )
	
	test.assert_throws( function() { "" != 0 }, TypeError )
	
	test.assert_throws( function() { "" != 2 }, TypeError )
	
	test.assert_throws( function() { "" != -2 }, TypeError )
	
	test.assert_throws( function() { "" != 0.0 }, TypeError )
	
	test.assert_throws( function() { "" != 2.0 }, TypeError )
	
	test.assert_throws( function() { "" != -0.5 }, TypeError )
	
	test.assert_throws( function() { "" != "c"[0] }, TypeError )
	
	let $v10 = "" != ""
	assert( $v10 is Boolean )
	assert( $v10 == false )
	
	let $v11 = "" != "apple"
	assert( $v11 is Boolean )
	assert( $v11 == true )
	
	let $v12 = "" != "banana"
	assert( $v12 is Boolean )
	assert( $v12 == true )
	
	test.assert_throws( function() { "" != b"" }, TypeError )
	
	test.assert_throws( function() { "" != b"	«" }, TypeError )
	
	test.assert_throws( function() { "" != repr }, TypeError )
	
	test.assert_throws( function() { "" != function(){} }, TypeError )
	
	test.assert_throws( function() { "" != Integer }, TypeError )
	
	test.assert_throws( function() { "" != Type }, TypeError )
	
	test.assert_throws( function() { "" != types }, TypeError )

$ $BURN neq_result_11.burn

neq_result_12.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { "apple" != nothing }, TypeError )
	
	test.assert_throws( function() { "apple" != true }, TypeError )
	
	test.assert_throws( function() { "apple" != false }, TypeError )
	
	test.assert_throws( function() { "apple" != 0 }, TypeError )
	
	test.assert_throws( function() { "apple" != 2 }, TypeError )
	
	test.assert_throws( function() { "apple" != -2 }, TypeError )
	
	test.assert_throws( function() { "apple" != 0.0 }, TypeError )
	
	test.assert_throws( function() { "apple" != 2.0 }, TypeError )
	
	test.assert_throws( function() { "apple" != -0.5 }, TypeError )
	
	test.assert_throws( function() { "apple" != "c"[0] }, TypeError )
	
	let $v10 = "apple" != ""
	assert( $v10 is Boolean )
	assert( $v10 == true )
	
	let $v11 = "apple" != "apple"
	assert( $v11 is Boolean )
	assert( $v11 == false )
	
	let $v12 = "apple" != "banana"
	assert( $v12 is Boolean )
	assert( $v12 == true )
	
	test.assert_throws( function() { "apple" != b"" }, TypeError )
	
	test.assert_throws( function() { "apple" != b"	«" }, TypeError )
	
	test.assert_throws( function() { "apple" != repr }, TypeError )
	
	test.assert_throws( function() { "apple" != function(){} }, TypeError )
	
	test.assert_throws( function() { "apple" != Integer }, TypeError )
	
	test.assert_throws( function() { "apple" != Type }, TypeError )
	
	test.assert_throws( function() { "apple" != types }, TypeError )

$ $BURN neq_result_12.burn

neq_result_13.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { "banana" != nothing }, TypeError )
	
	test.assert_throws( function() { "banana" != true }, TypeError )
	
	test.assert_throws( function() { "banana" != false }, TypeError )
	
	test.assert_throws( function() { "banana" != 0 }, TypeError )
	
	test.assert_throws( function() { "banana" != 2 }, TypeError )
	
	test.assert_throws( function() { "banana" != -2 }, TypeError )
	
	test.assert_throws( function() { "banana" != 0.0 }, TypeError )
	
	test.assert_throws( function() { "banana" != 2.0 }, TypeError )
	
	test.assert_throws( function() { "banana" != -0.5 }, TypeError )
	
	test.assert_throws( function() { "banana" != "c"[0] }, TypeError )
	
	let $v10 = "banana" != ""
	assert( $v10 is Boolean )
	assert( $v10 == true )
	
	let $v11 = "banana" != "apple"
	assert( $v11 is Boolean )
	assert( $v11 == true )
	
	let $v12 = "banana" != "banana"
	assert( $v12 is Boolean )
	assert( $v12 == false )
	
	test.assert_throws( function() { "banana" != b"" }, TypeError )
	
	test.assert_throws( function() { "banana" != b"	«" }, TypeError )
	
	test.assert_throws( function() { "banana" != repr }, TypeError )
	
	test.assert_throws( function() { "banana" != function(){} }, TypeError )
	
	test.assert_throws( function() { "banana" != Integer }, TypeError )
	
	test.assert_throws( function() { "banana" != Type }, TypeError )
	
	test.assert_throws( function() { "banana" != types }, TypeError )

$ $BURN neq_result_13.burn

neq_result_14.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { b"" != nothing }, TypeError )
	
	test.assert_throws( function() { b"" != true }, TypeError )
	
	test.assert_throws( function() { b"" != false }, TypeError )
	
	test.assert_throws( function() { b"" != 0 }, TypeError )
	
	test.assert_throws( function() { b"" != 2 }, TypeError )
	
	test.assert_throws( function() { b"" != -2 }, TypeError )
	
	test.assert_throws( function() { b"" != 0.0 }, TypeError )
	
	test.assert_throws( function() { b"" != 2.0 }, TypeError )
	
	test.assert_throws( function() { b"" != -0.5 }, TypeError )
	
	test.assert_throws( function() { b"" != "c"[0] }, TypeError )
	
	test.assert_throws( function() { b"" != "" }, TypeError )
	
	test.assert_throws( function() { b"" != "apple" }, TypeError )
	
	test.assert_throws( function() { b"" != "banana" }, TypeError )
	
	let $v13 = b"" != b""
	assert( $v13 is Boolean )
	assert( $v13 == false )
	
	let $v14 = b"" != b"	«"
	assert( $v14 is Boolean )
	assert( $v14 == true )
	
	test.assert_throws( function() { b"" != repr }, TypeError )
	
	test.assert_throws( function() { b"" != function(){} }, TypeError )
	
	test.assert_throws( function() { b"" != Integer }, TypeError )
	
	test.assert_throws( function() { b"" != Type }, TypeError )
	
	test.assert_throws( function() { b"" != types }, TypeError )

$ $BURN neq_result_14.burn

neq_result_15.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { b"	«" != nothing }, TypeError )
	
	test.assert_throws( function() { b"	«" != true }, TypeError )
	
	test.assert_throws( function() { b"	«" != false }, TypeError )
	
	test.assert_throws( function() { b"	«" != 0 }, TypeError )
	
	test.assert_throws( function() { b"	«" != 2 }, TypeError )
	
	test.assert_throws( function() { b"	«" != -2 }, TypeError )
	
	test.assert_throws( function() { b"	«" != 0.0 }, TypeError )
	
	test.assert_throws( function() { b"	«" != 2.0 }, TypeError )
	
	test.assert_throws( function() { b"	«" != -0.5 }, TypeError )
	
	test.assert_throws( function() { b"	«" != "c"[0] }, TypeError )
	
	test.assert_throws( function() { b"	«" != "" }, TypeError )
	
	test.assert_throws( function() { b"	«" != "apple" }, TypeError )
	
	test.assert_throws( function() { b"	«" != "banana" }, TypeError )
	
	let $v13 = b"	«" != b""
	assert( $v13 is Boolean )
	assert( $v13 == true )
	
	let $v14 = b"	«" != b"	«"
	assert( $v14 is Boolean )
	assert( $v14 == false )
	
	test.assert_throws( function() { b"	«" != repr }, TypeError )
	
	test.assert_throws( function() { b"	«" != function(){} }, TypeError )
	
	test.assert_throws( function() { b"	«" != Integer }, TypeError )
	
	test.assert_throws( function() { b"	«" != Type }, TypeError )
	
	test.assert_throws( function() { b"	«" != types }, TypeError )

$ $BURN neq_result_15.burn

neq_result_16.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { repr != nothing }, TypeError )
	
	test.assert_throws( function() { repr != true }, TypeError )
	
	test.assert_throws( function() { repr != false }, TypeError )
	
	test.assert_throws( function() { repr != 0 }, TypeError )
	
	test.assert_throws( function() { repr != 2 }, TypeError )
	
	test.assert_throws( function() { repr != -2 }, TypeError )
	
	test.assert_throws( function() { repr != 0.0 }, TypeError )
	
	test.assert_throws( function() { repr != 2.0 }, TypeError )
	
	test.assert_throws( function() { repr != -0.5 }, TypeError )
	
	test.assert_throws( function() { repr != "c"[0] }, TypeError )
	
	test.assert_throws( function() { repr != "" }, TypeError )
	
	test.assert_throws( function() { repr != "apple" }, TypeError )
	
	test.assert_throws( function() { repr != "banana" }, TypeError )
	
	test.assert_throws( function() { repr != b"" }, TypeError )
	
	test.assert_throws( function() { repr != b"	«" }, TypeError )
	
	let $v15 = repr != repr
	assert( $v15 is Boolean )
	assert( $v15 == false )
	
	let $v16 = repr != function(){}
	assert( $v16 is Boolean )
	assert( $v16 == true )
	
	test.assert_throws( function() { repr != Integer }, TypeError )
	
	test.assert_throws( function() { repr != Type }, TypeError )
	
	test.assert_throws( function() { repr != types }, TypeError )

$ $BURN neq_result_16.burn

neq_result_17.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { function(){} != nothing }, TypeError )
	
	test.assert_throws( function() { function(){} != true }, TypeError )
	
	test.assert_throws( function() { function(){} != false }, TypeError )
	
	test.assert_throws( function() { function(){} != 0 }, TypeError )
	
	test.assert_throws( function() { function(){} != 2 }, TypeError )
	
	test.assert_throws( function() { function(){} != -2 }, TypeError )
	
	test.assert_throws( function() { function(){} != 0.0 }, TypeError )
	
	test.assert_throws( function() { function(){} != 2.0 }, TypeError )
	
	test.assert_throws( function() { function(){} != -0.5 }, TypeError )
	
	test.assert_throws( function() { function(){} != "c"[0] }, TypeError )
	
	test.assert_throws( function() { function(){} != "" }, TypeError )
	
	test.assert_throws( function() { function(){} != "apple" }, TypeError )
	
	test.assert_throws( function() { function(){} != "banana" }, TypeError )
	
	test.assert_throws( function() { function(){} != b"" }, TypeError )
	
	test.assert_throws( function() { function(){} != b"	«" }, TypeError )
	
	let $v15 = function(){} != repr
	assert( $v15 is Boolean )
	assert( $v15 == true )
	
	let $v16 = function(){} != function(){}
	assert( $v16 is Boolean )
	assert( $v16 == true )
	
	test.assert_throws( function() { function(){} != Integer }, TypeError )
	
	test.assert_throws( function() { function(){} != Type }, TypeError )
	
	test.assert_throws( function() { function(){} != types }, TypeError )

$ $BURN neq_result_17.burn

neq_result_18.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { Integer != nothing }, TypeError )
	
	test.assert_throws( function() { Integer != true }, TypeError )
	
	test.assert_throws( function() { Integer != false }, TypeError )
	
	test.assert_throws( function() { Integer != 0 }, TypeError )
	
	test.assert_throws( function() { Integer != 2 }, TypeError )
	
	test.assert_throws( function() { Integer != -2 }, TypeError )
	
	test.assert_throws( function() { Integer != 0.0 }, TypeError )
	
	test.assert_throws( function() { Integer != 2.0 }, TypeError )
	
	test.assert_throws( function() { Integer != -0.5 }, TypeError )
	
	test.assert_throws( function() { Integer != "c"[0] }, TypeError )
	
	test.assert_throws( function() { Integer != "" }, TypeError )
	
	test.assert_throws( function() { Integer != "apple" }, TypeError )
	
	test.assert_throws( function() { Integer != "banana" }, TypeError )
	
	test.assert_throws( function() { Integer != b"" }, TypeError )
	
	test.assert_throws( function() { Integer != b"	«" }, TypeError )
	
	test.assert_throws( function() { Integer != repr }, TypeError )
	
	test.assert_throws( function() { Integer != function(){} }, TypeError )
	
	test.assert_throws( function() { Integer != Integer }, TypeError )
	
	test.assert_throws( function() { Integer != Type }, TypeError )
	
	test.assert_throws( function() { Integer != types }, TypeError )

$ $BURN neq_result_18.burn

neq_result_19.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { Type != nothing }, TypeError )
	
	test.assert_throws( function() { Type != true }, TypeError )
	
	test.assert_throws( function() { Type != false }, TypeError )
	
	test.assert_throws( function() { Type != 0 }, TypeError )
	
	test.assert_throws( function() { Type != 2 }, TypeError )
	
	test.assert_throws( function() { Type != -2 }, TypeError )
	
	test.assert_throws( function() { Type != 0.0 }, TypeError )
	
	test.assert_throws( function() { Type != 2.0 }, TypeError )
	
	test.assert_throws( function() { Type != -0.5 }, TypeError )
	
	test.assert_throws( function() { Type != "c"[0] }, TypeError )
	
	test.assert_throws( function() { Type != "" }, TypeError )
	
	test.assert_throws( function() { Type != "apple" }, TypeError )
	
	test.assert_throws( function() { Type != "banana" }, TypeError )
	
	test.assert_throws( function() { Type != b"" }, TypeError )
	
	test.assert_throws( function() { Type != b"	«" }, TypeError )
	
	test.assert_throws( function() { Type != repr }, TypeError )
	
	test.assert_throws( function() { Type != function(){} }, TypeError )
	
	test.assert_throws( function() { Type != Integer }, TypeError )
	
	test.assert_throws( function() { Type != Type }, TypeError )
	
	test.assert_throws( function() { Type != types }, TypeError )

$ $BURN neq_result_19.burn

neq_result_20.burn:
	import test
	import burn.types
	
	test.assert_throws( function() { types != nothing }, TypeError )
	
	test.assert_throws( function() { types != true }, TypeError )
	
	test.assert_throws( function() { types != false }, TypeError )
	
	test.assert_throws( function() { types != 0 }, TypeError )
	
	test.assert_throws( function() { types != 2 }, TypeError )
	
	test.assert_throws( function() { types != -2 }, TypeError )
	
	test.assert_throws( function() { types != 0.0 }, TypeError )
	
	test.assert_throws( function() { types != 2.0 }, TypeError )
	
	test.assert_throws( function() { types != -0.5 }, TypeError )
	
	test.assert_throws( function() { types != "c"[0] }, TypeError )
	
	test.assert_throws( function() { types != "" }, TypeError )
	
	test.assert_throws( function() { types != "apple" }, TypeError )
	
	test.assert_throws( function() { types != "banana" }, TypeError )
	
	test.assert_throws( function() { types != b"" }, TypeError )
	
	test.assert_throws( function() { types != b"	«" }, TypeError )
	
	test.assert_throws( function() { types != repr }, TypeError )
	
	test.assert_throws( function() { types != function(){} }, TypeError )
	
	test.assert_throws( function() { types != Integer }, TypeError )
	
	test.assert_throws( function() { types != Type }, TypeError )
	
	let $v19 = types != types
	assert( $v19 is Boolean )
	assert( $v19 == false )

$ $BURN neq_result_20.burn
