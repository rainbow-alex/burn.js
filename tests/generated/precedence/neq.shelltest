// generated by `etc/generate_precedence_test.py neq`

neq_or.burn:
	assert( ( ( nothing != nothing ) or nothing ) == nothing )
	assert( ( nothing != ( nothing or nothing ) ) == false )
	assert( ( nothing != nothing or nothing ) == nothing )
	
$ $BURN neq_or.burn

neq_and.burn:
	assert( ( ( true != true ) and false ) == false )
	assert( ( true != ( true and false ) ) == true )
	assert( ( true != true and false ) == false )
	
$ $BURN neq_and.burn

// GREP_ME precedence neq not

neq_is.burn:
	nothing != nothing is nothing
$ $BURN neq_is.burn
	* exit status nonzero

neq_is_not.burn:
	nothing != nothing is not nothing
$ $BURN neq_is_not.burn
	* exit status nonzero

neq_eq.burn:
	nothing != nothing == nothing
$ $BURN neq_eq.burn
	* exit status nonzero

neq_neq.burn:
	nothing != nothing != nothing
$ $BURN neq_neq.burn
	* exit status nonzero

neq_lt.burn:
	nothing != nothing < nothing
$ $BURN neq_lt.burn
	* exit status nonzero

neq_gt.burn:
	nothing != nothing > nothing
$ $BURN neq_gt.burn
	* exit status nonzero

neq_lteq.burn:
	nothing != nothing <= nothing
$ $BURN neq_lteq.burn
	* exit status nonzero

neq_gteq.burn:
	nothing != nothing >= nothing
$ $BURN neq_gteq.burn
	* exit status nonzero

neq_add.burn:
	import test
	test.assert_throws( function() { ( 0 != 0 ) + 0 }, TypeError )
	assert( ( 0 != ( 0 + 0 ) ) == false )
	assert( ( 0 != 0 + 0 ) == false )
	
$ $BURN neq_add.burn

neq_sub.burn:
	import test
	test.assert_throws( function() { ( 0 != 0 ) - 0 }, TypeError )
	assert( ( 0 != ( 0 - 0 ) ) == false )
	assert( ( 0 != 0 - 0 ) == false )
	
$ $BURN neq_sub.burn

neq_mul.burn:
	import test
	test.assert_throws( function() { ( 0 != 0 ) * 0 }, TypeError )
	assert( ( 0 != ( 0 * 0 ) ) == false )
	assert( ( 0 != 0 * 0 ) == false )
	
$ $BURN neq_mul.burn

// GREP_ME precedence neq div

// GREP_ME precedence neq union

// GREP_ME precedence neq intersection
