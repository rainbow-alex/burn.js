// generated by `etc/generate_precedence_test.py mul`

mul_or.burn:
	assert( ( ( 0 * 0 ) or 2 ) == 2 )
	assert( ( 0 * ( 0 or 2 ) ) == 0 )
	assert( ( 0 * 0 or 2 ) == 2 )
	
$ $BURN mul_or.burn

mul_and.burn:
	assert( ( ( 2 * 2 ) and 2 ) == 2 )
	assert( ( 2 * ( 2 and 2 ) ) == 4 )
	assert( ( 2 * 2 and 2 ) == 2 )
	
$ $BURN mul_and.burn

// GREP_ME precedence mul not

// GREP_ME precedence mul is

// GREP_ME precedence mul is_not

mul_eq.burn:
	import test
	assert( ( ( 0 * 0 ) == 0 ) == true )
	test.assert_throws( function() { 0 * ( 0 == 0 ) }, TypeError )
	assert( ( 0 * 0 == 0 ) == true )
	
$ $BURN mul_eq.burn

mul_neq.burn:
	import test
	assert( ( ( 0 * 0 ) != 0 ) == false )
	test.assert_throws( function() { 0 * ( 0 != 0 ) }, TypeError )
	assert( ( 0 * 0 != 0 ) == false )
	
$ $BURN mul_neq.burn

mul_lt.burn:
	import test
	assert( ( ( 0 * 0 ) < 0 ) == false )
	test.assert_throws( function() { 0 * ( 0 < 0 ) }, TypeError )
	assert( ( 0 * 0 < 0 ) == false )
	
$ $BURN mul_lt.burn

mul_gt.burn:
	import test
	assert( ( ( 0 * 0 ) > 0 ) == false )
	test.assert_throws( function() { 0 * ( 0 > 0 ) }, TypeError )
	assert( ( 0 * 0 > 0 ) == false )
	
$ $BURN mul_gt.burn

mul_lteq.burn:
	import test
	assert( ( ( 0 * 0 ) <= 0 ) == true )
	test.assert_throws( function() { 0 * ( 0 <= 0 ) }, TypeError )
	assert( ( 0 * 0 <= 0 ) == true )
	
$ $BURN mul_lteq.burn

mul_gteq.burn:
	import test
	assert( ( ( 0 * 0 ) >= 0 ) == true )
	test.assert_throws( function() { 0 * ( 0 >= 0 ) }, TypeError )
	assert( ( 0 * 0 >= 0 ) == true )
	
$ $BURN mul_gteq.burn

mul_add.burn:
	assert( ( ( 0 * 0 ) + 2 ) == 2 )
	assert( ( 0 * ( 0 + 2 ) ) == 0 )
	assert( ( 0 * 0 + 2 ) == 2 )
	
$ $BURN mul_add.burn

mul_sub.burn:
	assert( ( ( 0 * 0 ) - 2 ) == -2 )
	assert( ( 0 * ( 0 - 2 ) ) == 0 )
	assert( ( 0 * 0 - 2 ) == -2 )
	
$ $BURN mul_sub.burn

// GREP_ME precedence mul mul

// GREP_ME precedence mul div

// GREP_ME precedence mul union

// GREP_ME precedence mul intersection
