// generated by `etc/generate_precedence_test.py or`

// GREP_ME precedence or or

or_and.burn:
	assert( ( ( true or nothing ) and nothing ) == nothing )
	assert( ( true or ( nothing and nothing ) ) == true )
	assert( ( true or nothing and nothing ) == true )
	
$ $BURN or_and.burn

// GREP_ME precedence or not

or_is.burn:
	import test
	test.assert_throws( function() { ( true or nothing ) is nothing }, TypeError )
	assert( ( true or ( nothing is nothing ) ) == true )
	assert( ( true or nothing is nothing ) == true )
	
$ $BURN or_is.burn

or_is_not.burn:
	import test
	test.assert_throws( function() { ( true or nothing ) is not nothing }, TypeError )
	assert( ( true or ( nothing is not nothing ) ) == true )
	assert( ( true or nothing is not nothing ) == true )
	
$ $BURN or_is_not.burn

or_eq.burn:
	assert( ( ( true or nothing ) == false ) == false )
	assert( ( true or ( nothing == false ) ) == true )
	assert( ( true or nothing == false ) == true )
	
$ $BURN or_eq.burn

or_neq.burn:
	assert( ( ( true or nothing ) != true ) == false )
	assert( ( true or ( nothing != true ) ) == true )
	assert( ( true or nothing != true ) == true )
	
$ $BURN or_neq.burn

or_lt.burn:
	assert( ( ( 2 or nothing ) < 0 ) == false )
	assert( ( 2 or ( nothing < 0 ) ) == 2 )
	assert( ( 2 or nothing < 0 ) == 2 )
	
$ $BURN or_lt.burn

or_gt.burn:
	assert( ( ( 2 or nothing ) > 0 ) == true )
	assert( ( 2 or ( nothing > 0 ) ) == 2 )
	assert( ( 2 or nothing > 0 ) == 2 )
	
$ $BURN or_gt.burn

or_lteq.burn:
	assert( ( ( 2 or nothing ) <= 0 ) == false )
	assert( ( 2 or ( nothing <= 0 ) ) == 2 )
	assert( ( 2 or nothing <= 0 ) == 2 )
	
$ $BURN or_lteq.burn

or_gteq.burn:
	assert( ( ( 2 or nothing ) >= 0 ) == true )
	assert( ( 2 or ( nothing >= 0 ) ) == 2 )
	assert( ( 2 or nothing >= 0 ) == 2 )
	
$ $BURN or_gteq.burn

or_add.burn:
	assert( ( ( 2 or nothing ) + 2 ) == 4 )
	assert( ( 2 or ( nothing + 2 ) ) == 2 )
	assert( ( 2 or nothing + 2 ) == 2 )
	
$ $BURN or_add.burn

or_sub.burn:
	assert( ( ( 2 or nothing ) - 2 ) == 0 )
	assert( ( 2 or ( nothing - 2 ) ) == 2 )
	assert( ( 2 or nothing - 2 ) == 2 )
	
$ $BURN or_sub.burn

or_mul.burn:
	assert( ( ( 2 or nothing ) * 0 ) == 0 )
	assert( ( 2 or ( nothing * 0 ) ) == 2 )
	assert( ( 2 or nothing * 0 ) == 2 )
	
$ $BURN or_mul.burn

or_div.burn:
	import test
	test.assert_throws( function() { ( true or nothing ) / nothing }, TypeError )
	assert( ( true or ( nothing / nothing ) ) == true )
	assert( ( true or nothing / nothing ) == true )
	
$ $BURN or_div.burn

or_union.burn:
	import test
	test.assert_throws( function() { ( true or nothing ) | nothing }, TypeError )
	assert( ( true or ( nothing | nothing ) ) == true )
	assert( ( true or nothing | nothing ) == true )
	
$ $BURN or_union.burn

or_intersection.burn:
	import test
	test.assert_throws( function() { ( true or nothing ) & nothing }, TypeError )
	assert( ( true or ( nothing & nothing ) ) == true )
	assert( ( true or nothing & nothing ) == true )
	
$ $BURN or_intersection.burn
