// generated by `etc/generate_precedence_test.py not`

not_or.burn:
	assert( ( ( not nothing ) or true ) == true )
	assert( ( not ( nothing or true ) ) == false )
	assert( ( not nothing or true ) == true )
	
$ $BURN not_or.burn

not_and.burn:
	assert( ( ( not nothing ) and nothing ) == nothing )
	assert( ( not ( nothing and nothing ) ) == true )
	assert( ( not nothing and nothing ) == nothing )
	
$ $BURN not_and.burn

// GREP_ME precedence not not

// GREP_ME precedence not is

// GREP_ME precedence not is_not

not_eq.burn:
	import test
	test.assert_throws( function() { ( not nothing ) == nothing }, TypeError )
	assert( ( not ( nothing == nothing ) ) == false )
	assert( ( not nothing == nothing ) == false )
	
$ $BURN not_eq.burn

not_neq.burn:
	import test
	test.assert_throws( function() { ( not nothing ) != nothing }, TypeError )
	assert( ( not ( nothing != nothing ) ) == true )
	assert( ( not nothing != nothing ) == true )
	
$ $BURN not_neq.burn

not_lt.burn:
	import test
	test.assert_throws( function() { ( not 0 ) < 0 }, TypeError )
	assert( ( not ( 0 < 0 ) ) == true )
	assert( ( not 0 < 0 ) == true )
	
$ $BURN not_lt.burn

not_gt.burn:
	import test
	test.assert_throws( function() { ( not 0 ) > 0 }, TypeError )
	assert( ( not ( 0 > 0 ) ) == true )
	assert( ( not 0 > 0 ) == true )
	
$ $BURN not_gt.burn

not_lteq.burn:
	import test
	test.assert_throws( function() { ( not 0 ) <= 0 }, TypeError )
	assert( ( not ( 0 <= 0 ) ) == false )
	assert( ( not 0 <= 0 ) == false )
	
$ $BURN not_lteq.burn

not_gteq.burn:
	import test
	test.assert_throws( function() { ( not 0 ) >= 0 }, TypeError )
	assert( ( not ( 0 >= 0 ) ) == false )
	assert( ( not 0 >= 0 ) == false )
	
$ $BURN not_gteq.burn

not_add.burn:
	import test
	test.assert_throws( function() { ( not 0 ) + 0 }, TypeError )
	assert( ( not ( 0 + 0 ) ) == true )
	assert( ( not 0 + 0 ) == true )
	
$ $BURN not_add.burn

not_sub.burn:
	import test
	test.assert_throws( function() { ( not 0 ) - 0 }, TypeError )
	assert( ( not ( 0 - 0 ) ) == true )
	assert( ( not 0 - 0 ) == true )
	
$ $BURN not_sub.burn

not_mul.burn:
	import test
	test.assert_throws( function() { ( not 0 ) * 0 }, TypeError )
	assert( ( not ( 0 * 0 ) ) == true )
	assert( ( not 0 * 0 ) == true )
	
$ $BURN not_mul.burn

not_div.burn:
	import test
	test.assert_throws( function() { ( not 0 ) / 2 }, TypeError )
	assert( ( not ( 0 / 2 ) ) == true )
	assert( ( not 0 / 2 ) == true )
	
$ $BURN not_div.burn

// GREP_ME precedence not union

// GREP_ME precedence not intersection
