// generated by `etc/generate_precedence_test.py and`

and_or.burn:
	assert( ( ( nothing and nothing ) or true ) == true )
	assert( ( nothing and ( nothing or true ) ) == nothing )
	assert( ( nothing and nothing or true ) == true )
	
$ $BURN and_or.burn

// GREP_ME precedence and and

// GREP_ME precedence and not

and_is.burn:
	import test
	test.assert_throws( function() { ( nothing and nothing ) is nothing }, TypeError )
	assert( ( nothing and ( nothing is nothing ) ) == nothing )
	assert( ( nothing and nothing is nothing ) == nothing )
	
$ $BURN and_is.burn

and_is_not.burn:
	import test
	test.assert_throws( function() { ( nothing and nothing ) is not nothing }, TypeError )
	assert( ( nothing and ( nothing is not nothing ) ) == nothing )
	assert( ( nothing and nothing is not nothing ) == nothing )
	
$ $BURN and_is_not.burn

and_eq.burn:
	assert( ( ( nothing and nothing ) == nothing ) == true )
	assert( ( nothing and ( nothing == nothing ) ) == nothing )
	assert( ( nothing and nothing == nothing ) == nothing )
	
$ $BURN and_eq.burn

and_neq.burn:
	assert( ( ( nothing and nothing ) != nothing ) == false )
	assert( ( nothing and ( nothing != nothing ) ) == nothing )
	assert( ( nothing and nothing != nothing ) == nothing )
	
$ $BURN and_neq.burn

and_lt.burn:
	assert( ( ( 0 and nothing ) < 0 ) == false )
	assert( ( 0 and ( nothing < 0 ) ) == 0 )
	assert( ( 0 and nothing < 0 ) == 0 )
	
$ $BURN and_lt.burn

and_gt.burn:
	assert( ( ( 0 and nothing ) > 0 ) == false )
	assert( ( 0 and ( nothing > 0 ) ) == 0 )
	assert( ( 0 and nothing > 0 ) == 0 )
	
$ $BURN and_gt.burn

and_lteq.burn:
	assert( ( ( 0 and nothing ) <= 0 ) == true )
	assert( ( 0 and ( nothing <= 0 ) ) == 0 )
	assert( ( 0 and nothing <= 0 ) == 0 )
	
$ $BURN and_lteq.burn

and_gteq.burn:
	assert( ( ( 0 and nothing ) >= 0 ) == true )
	assert( ( 0 and ( nothing >= 0 ) ) == 0 )
	assert( ( 0 and nothing >= 0 ) == 0 )
	
$ $BURN and_gteq.burn

and_add.burn:
	assert( ( ( 0 and nothing ) + 2 ) == 2 )
	assert( ( 0 and ( nothing + 2 ) ) == 0 )
	assert( ( 0 and nothing + 2 ) == 0 )
	
$ $BURN and_add.burn

and_sub.burn:
	assert( ( ( 0 and nothing ) - 2 ) == -2 )
	assert( ( 0 and ( nothing - 2 ) ) == 0 )
	assert( ( 0 and nothing - 2 ) == 0 )
	
$ $BURN and_sub.burn

and_mul.burn:
	import test
	test.assert_throws( function() { ( nothing and nothing ) * nothing }, TypeError )
	assert( ( nothing and ( nothing * nothing ) ) == nothing )
	assert( ( nothing and nothing * nothing ) == nothing )
	
$ $BURN and_mul.burn

and_div.burn:
	import test
	test.assert_throws( function() { ( nothing and nothing ) / nothing }, TypeError )
	assert( ( nothing and ( nothing / nothing ) ) == nothing )
	assert( ( nothing and nothing / nothing ) == nothing )
	
$ $BURN and_div.burn

and_union.burn:
	import test
	test.assert_throws( function() { ( nothing and nothing ) | nothing }, TypeError )
	assert( ( nothing and ( nothing | nothing ) ) == nothing )
	assert( ( nothing and nothing | nothing ) == nothing )
	
$ $BURN and_union.burn

and_intersection.burn:
	import test
	test.assert_throws( function() { ( nothing and nothing ) & nothing }, TypeError )
	assert( ( nothing and ( nothing & nothing ) ) == nothing )
	assert( ( nothing and nothing & nothing ) == nothing )
	
$ $BURN and_intersection.burn
