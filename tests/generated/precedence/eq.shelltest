// generated by `etc/generate_precedence_test.py eq`

eq_or.burn:
	assert( ( ( false == true ) or nothing ) == nothing )
	assert( ( false == ( true or nothing ) ) == false )
	assert( ( false == true or nothing ) == nothing )
	
$ $BURN eq_or.burn

eq_and.burn:
	assert( ( ( nothing == nothing ) and nothing ) == nothing )
	assert( ( nothing == ( nothing and nothing ) ) == true )
	assert( ( nothing == nothing and nothing ) == nothing )
	
$ $BURN eq_and.burn

// GREP_ME precedence eq not

eq_is.burn:
	nothing == nothing is nothing
$ $BURN eq_is.burn
	* exit status nonzero

eq_is_not.burn:
	nothing == nothing is not nothing
$ $BURN eq_is_not.burn
	* exit status nonzero

eq_eq.burn:
	nothing == nothing == nothing
$ $BURN eq_eq.burn
	* exit status nonzero

eq_neq.burn:
	nothing == nothing != nothing
$ $BURN eq_neq.burn
	* exit status nonzero

eq_lt.burn:
	nothing == nothing < nothing
$ $BURN eq_lt.burn
	* exit status nonzero

eq_gt.burn:
	nothing == nothing > nothing
$ $BURN eq_gt.burn
	* exit status nonzero

eq_lteq.burn:
	nothing == nothing <= nothing
$ $BURN eq_lteq.burn
	* exit status nonzero

eq_gteq.burn:
	nothing == nothing >= nothing
$ $BURN eq_gteq.burn
	* exit status nonzero

eq_add.burn:
	import test
	test.assert_throws( function() { ( 0 == 0 ) + 0 }, TypeError )
	assert( ( 0 == ( 0 + 0 ) ) == true )
	assert( ( 0 == 0 + 0 ) == true )
	
$ $BURN eq_add.burn

eq_sub.burn:
	import test
	test.assert_throws( function() { ( 0 == 0 ) - 0 }, TypeError )
	assert( ( 0 == ( 0 - 0 ) ) == true )
	assert( ( 0 == 0 - 0 ) == true )
	
$ $BURN eq_sub.burn

eq_mul.burn:
	import test
	test.assert_throws( function() { ( 0 == 0 ) * 0 }, TypeError )
	assert( ( 0 == ( 0 * 0 ) ) == true )
	assert( ( 0 == 0 * 0 ) == true )
	
$ $BURN eq_mul.burn

// GREP_ME precedence eq div

// GREP_ME precedence eq union

// GREP_ME precedence eq intersection
