// generated by `etc/generate_precedence_test.py lteq`

lteq_or.burn:
	assert( ( ( 2 <= 0 ) or 0 ) == 0 )
	assert( ( 2 <= ( 0 or 0 ) ) == false )
	assert( ( 2 <= 0 or 0 ) == 0 )
	
$ $BURN lteq_or.burn

lteq_and.burn:
	assert( ( ( 0 <= 0 ) and nothing ) == nothing )
	assert( ( 0 <= ( 0 and nothing ) ) == true )
	assert( ( 0 <= 0 and nothing ) == nothing )
	
$ $BURN lteq_and.burn

// GREP_ME precedence lteq not

lteq_is.burn:
	nothing <= nothing is nothing
$ $BURN lteq_is.burn
	* exit status nonzero

lteq_is_not.burn:
	nothing <= nothing is not nothing
$ $BURN lteq_is_not.burn
	* exit status nonzero

lteq_eq.burn:
	nothing <= nothing == nothing
$ $BURN lteq_eq.burn
	* exit status nonzero

lteq_neq.burn:
	nothing <= nothing != nothing
$ $BURN lteq_neq.burn
	* exit status nonzero

lteq_lt.burn:
	nothing <= nothing < nothing
$ $BURN lteq_lt.burn
	* exit status nonzero

lteq_gt.burn:
	nothing <= nothing > nothing
$ $BURN lteq_gt.burn
	* exit status nonzero

lteq_lteq.burn:
	nothing <= nothing <= nothing
$ $BURN lteq_lteq.burn
	* exit status nonzero

lteq_gteq.burn:
	nothing <= nothing >= nothing
$ $BURN lteq_gteq.burn
	* exit status nonzero

lteq_add.burn:
	import test
	test.assert_throws( function() { ( 0 <= 0 ) + 0 }, TypeError )
	assert( ( 0 <= ( 0 + 0 ) ) == true )
	assert( ( 0 <= 0 + 0 ) == true )
	
$ $BURN lteq_add.burn

lteq_sub.burn:
	import test
	test.assert_throws( function() { ( 0 <= 0 ) - 0 }, TypeError )
	assert( ( 0 <= ( 0 - 0 ) ) == true )
	assert( ( 0 <= 0 - 0 ) == true )
	
$ $BURN lteq_sub.burn

lteq_mul.burn:
	import test
	test.assert_throws( function() { ( 0 <= 0 ) * 0 }, TypeError )
	assert( ( 0 <= ( 0 * 0 ) ) == true )
	assert( ( 0 <= 0 * 0 ) == true )
	
$ $BURN lteq_mul.burn

lteq_div.burn:
	import test
	test.assert_throws( function() { ( 0 <= 0 ) / 2 }, TypeError )
	assert( ( 0 <= ( 0 / 2 ) ) == true )
	assert( ( 0 <= 0 / 2 ) == true )
	
$ $BURN lteq_div.burn

// GREP_ME precedence lteq union

// GREP_ME precedence lteq intersection
