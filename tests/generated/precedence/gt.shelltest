// generated by `etc/generate_precedence_test.py gt`

gt_or.burn:
	assert( ( ( 0 > 0 ) or 0 ) == 0 )
	assert( ( 0 > ( 0 or 0 ) ) == false )
	assert( ( 0 > 0 or 0 ) == 0 )
	
$ $BURN gt_or.burn

gt_and.burn:
	assert( ( ( 2 > 0 ) and nothing ) == nothing )
	assert( ( 2 > ( 0 and nothing ) ) == true )
	assert( ( 2 > 0 and nothing ) == nothing )
	
$ $BURN gt_and.burn

// GREP_ME precedence gt not

gt_is.burn:
	nothing > nothing is nothing
$ $BURN gt_is.burn
	* exit status nonzero

gt_is_not.burn:
	nothing > nothing is not nothing
$ $BURN gt_is_not.burn
	* exit status nonzero

gt_eq.burn:
	nothing > nothing == nothing
$ $BURN gt_eq.burn
	* exit status nonzero

gt_neq.burn:
	nothing > nothing != nothing
$ $BURN gt_neq.burn
	* exit status nonzero

gt_lt.burn:
	nothing > nothing < nothing
$ $BURN gt_lt.burn
	* exit status nonzero

gt_gt.burn:
	nothing > nothing > nothing
$ $BURN gt_gt.burn
	* exit status nonzero

gt_lteq.burn:
	nothing > nothing <= nothing
$ $BURN gt_lteq.burn
	* exit status nonzero

gt_gteq.burn:
	nothing > nothing >= nothing
$ $BURN gt_gteq.burn
	* exit status nonzero

gt_add.burn:
	import test
	test.assert_throws( function() { ( 0 > 0 ) + 0 }, TypeError )
	assert( ( 0 > ( 0 + 0 ) ) == false )
	assert( ( 0 > 0 + 0 ) == false )
	
$ $BURN gt_add.burn

gt_sub.burn:
	import test
	test.assert_throws( function() { ( 0 > 0 ) - 0 }, TypeError )
	assert( ( 0 > ( 0 - 0 ) ) == false )
	assert( ( 0 > 0 - 0 ) == false )
	
$ $BURN gt_sub.burn

gt_mul.burn:
	import test
	test.assert_throws( function() { ( 0 > 0 ) * 0 }, TypeError )
	assert( ( 0 > ( 0 * 0 ) ) == false )
	assert( ( 0 > 0 * 0 ) == false )
	
$ $BURN gt_mul.burn

gt_div.burn:
	import test
	test.assert_throws( function() { ( 0 > 0 ) / 2 }, TypeError )
	assert( ( 0 > ( 0 / 2 ) ) == false )
	assert( ( 0 > 0 / 2 ) == false )
	
$ $BURN gt_div.burn

// GREP_ME precedence gt union

// GREP_ME precedence gt intersection
