// generated by `etc/generate_precedence_test.py lt`

lt_or.burn:
	assert( ( ( 0 < 0 ) or 0 ) == 0 )
	assert( ( 0 < ( 0 or 0 ) ) == false )
	assert( ( 0 < 0 or 0 ) == 0 )
	
$ $BURN lt_or.burn

lt_and.burn:
	assert( ( ( 0 < 2 ) and 0 ) == 0 )
	assert( ( 0 < ( 2 and 0 ) ) == false )
	assert( ( 0 < 2 and 0 ) == 0 )
	
$ $BURN lt_and.burn

// GREP_ME precedence lt not

lt_is.burn:
	nothing < nothing is nothing
$ $BURN lt_is.burn
	* exit status nonzero

lt_is_not.burn:
	nothing < nothing is not nothing
$ $BURN lt_is_not.burn
	* exit status nonzero

lt_eq.burn:
	nothing < nothing == nothing
$ $BURN lt_eq.burn
	* exit status nonzero

lt_neq.burn:
	nothing < nothing != nothing
$ $BURN lt_neq.burn
	* exit status nonzero

lt_lt.burn:
	nothing < nothing < nothing
$ $BURN lt_lt.burn
	* exit status nonzero

lt_gt.burn:
	nothing < nothing > nothing
$ $BURN lt_gt.burn
	* exit status nonzero

lt_lteq.burn:
	nothing < nothing <= nothing
$ $BURN lt_lteq.burn
	* exit status nonzero

lt_gteq.burn:
	nothing < nothing >= nothing
$ $BURN lt_gteq.burn
	* exit status nonzero

lt_add.burn:
	import test
	test.assert_throws( function() { ( 0 < 0 ) + 0 }, TypeError )
	assert( ( 0 < ( 0 + 0 ) ) == false )
	assert( ( 0 < 0 + 0 ) == false )
	
$ $BURN lt_add.burn

lt_sub.burn:
	import test
	test.assert_throws( function() { ( 0 < 0 ) - 0 }, TypeError )
	assert( ( 0 < ( 0 - 0 ) ) == false )
	assert( ( 0 < 0 - 0 ) == false )
	
$ $BURN lt_sub.burn

lt_mul.burn:
	import test
	test.assert_throws( function() { ( 0 < 0 ) * 0 }, TypeError )
	assert( ( 0 < ( 0 * 0 ) ) == false )
	assert( ( 0 < 0 * 0 ) == false )
	
$ $BURN lt_mul.burn

lt_div.burn:
	import test
	test.assert_throws( function() { ( 0 < 0 ) / 2 }, TypeError )
	assert( ( 0 < ( 0 / 2 ) ) == false )
	assert( ( 0 < 0 / 2 ) == false )
	
$ $BURN lt_div.burn

// GREP_ME precedence lt union

// GREP_ME precedence lt intersection
